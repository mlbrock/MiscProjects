// ////////////////////////////////////////////////////////////////////////////
// TDW Pindleskin Bot Library Include File
// ////////////////////////////////////////////////////////////////////////////
//
// File Name       : TDW_BotPindleskin.d2l
//
// File Version    : 1.0.0
//
// File Description: Pindleskin Bot Library.
//
// Revison History : 2003-02-22 --- Creation.
//
//	Author          : Michael L. Brock (TheDesertWind)
//
//	Copyright       : (c) 2003 - 2004, Michael L. Brock. All rights reserved.
//
// ////////////////////////////////////////////////////////////////////////////

	// Include guard
if (typeof(TDW_INCLUDE_GUARD_BotPindleskin_d2l) == "undefined") {
	var TDW_INCLUDE_GUARD_BotPindleskin_d2l = true;

// ////////////////////////////////////////////////////////////////////////////
// ////////////////////////////////////////////////////////////////////////////
// Necessary include files...
// ////////////////////////////////////////////////////////////////////////////
include("TDW/TDW_BotLib.d2l");
// ////////////////////////////////////////////////////////////////////////////

/*
	APP NOTES:
	--- ------
	Pindleskin and his minions are classid 440 (Defiled Warrior)
	The NPCs outside in the garden are classid 438 (Prowling Dead)

	The Prowling Dead take 10 seconds to wake up after you enter the area.
*/

// ////////////////////////////////////////////////////////////////////////////
TDW_BOT_ConfigureList["attack.cluster.avoid.distance"]             = 5;

TDW_BOT_ConfigureList["tdw.bot.pindleskin.walk.to.pindleskin"]     = false;
TDW_BOT_ConfigureList["tdw.bot.pindleskin.attack.func.attack"]     = null;
TDW_BOT_ConfigureList["tdw.bot.pindleskin.kill.minions"]           = false;
TDW_BOT_ConfigureList["tdw.bot.pindleskin.kill.minions.max.level"] = 90;
TDW_BOT_ConfigureList["tdw.bot.pindleskin.kill.minions.pre"]       = false;
TDW_BOT_ConfigureList["tdw.bot.pindleskin.kill.minions.post"]      = false;
TDW_BOT_ConfigureList["tdw.bot.pindleskin.abort.on.prowling.dead"] = true;
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
var TDW_BOT_PB_PindleKill_LairBounds  = [[10051, 13210], [10065, 13245]];
var TDW_BOT_PB_PindleKill_Coords      = [[10057, 13239], [10059, 13212]];
var TDW_BOT_PB_PindleKill_CoordsIndex = 0;
var TDW_BOT_PB_ClearPindleMinions     = [10060, 13275];
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TDW_BOT_PB_Start(config_list)
{
	var init_err_msg = TDW_BOT_PB_Init(config_list);

	if (init_err_msg)
		TDW_BOT_SUPP_DoExitWithMsg(init_err_msg);

	TDW_BOT_PB_Run();

	TDW_BOT_PB_Finish();
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TDW_BOT_PB_Init(config_list)
{
//TDW_BOT_ConfigureList["operation.log.level.file"] = D2JSP_UTIL_LOG_Level_MINUTIAE;

	return(TDW_BOT_Init("TDW_BotPindleskin", null, config_list));
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TDW_BOT_PB_Run()
{
/*
	var npc_spec = new TDW_BOT_ATTACK_SpecialNPC("Pindleskin",
		TDW_BOT_ATTACK_NPC_FLAG_NO_INIT_MOVE | TDW_BOT_ATTACK_NPC_FLAG_NO_MOVE |
		TDW_BOT_ATTACK_NPC_FLAG_NO_RETURN |
		((TDW_BOT_ContextList["tdw.bot.pindleskin.kill.minions.pre"]) ?
			TDW_BOT_ATTACK_NPC_FLAG_KILL_MINIONS_PRE :
			TDW_BOT_ATTACK_NPC_FLAG_NONE) |
		((TDW_BOT_ContextList["tdw.bot.pindleskin.kill.minions.post"]) ?
			TDW_BOT_ATTACK_NPC_FLAG_KILL_MINIONS_POST :
			TDW_BOT_ATTACK_NPC_FLAG_NONE), 100, 10, 20,
		null, TDW_BOT_PB_PindleKill_AttackFunc, null);
*/

	npc_spec = TDW_BOT_PB_PindleKill_GetAttackSpec();

	if (TDW_BOT_ContextList["tdw.bot.pindleskin.kill.minions.pre"])
		npc_spec.flags |= TDW_BOT_ATTACK_NPC_FLAG_KILL_MINIONS_PRE;

	if (TDW_BOT_ContextList["tdw.bot.pindleskin.kill.minions.post"])
			npc_spec.flags |= TDW_BOT_ATTACK_NPC_FLAG_KILL_MINIONS_POST;

	var access_strategy =
		(TDW_BOT_ContextList["tdw.bot.pindleskin.walk.to.pindleskin"]) ?
		TDW_BOT_MOVE_GetDefaultLinkAccessStrategy_Walk() :
		TDW_BOT_MOVE_GetDefaultLinkAccessStrategy();

	var minions_flag = 
		(TDW_BOT_ContextList["tdw.bot.pindleskin.kill.minions.max.level"] <=
		me.getStat(D2JSP_STAT_LEVEL)) ? false :
		TDW_BOT_ContextList["tdw.bot.pindleskin.kill.minions"];
		
	TDW_BOT_PB_PindleKill(npc_spec, access_strategy, minions_flag);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TDW_BOT_PB_Finish()
{
	TDW_BOT_FinalComplete();
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TDW_BOT_PB_PindleKill_AttackFunc(special_npc, npc_obj)
{
/*
	if (Dist(npc_obj.x, npc_obj.y,
		TDW_BOT_PB_PindleKill_Coords[TDW_BOT_PB_PindleKill_CoordsIndex][0],
		TDW_BOT_PB_PindleKill_Coords[TDW_BOT_PB_PindleKill_CoordsIndex][1]) < 10)
		TDW_BOT_PB_PindleKill_CoordsIndex =
			(TDW_BOT_PB_PindleKill_CoordsIndex + 1) % 2;

	if (D2JSP_SYLIB_myDistPair(
		TDW_BOT_PB_PindleKill_Coords[TDW_BOT_PB_PindleKill_CoordsIndex]) > 3) {
		TDW_BOT_Log.logInfo("Correcting position from [" + me.x + ", " + me.y +
			"] to [" +
			TDW_BOT_PB_PindleKill_Coords[TDW_BOT_PB_PindleKill_CoordsIndex][0] +
			", " +
			TDW_BOT_PB_PindleKill_Coords[TDW_BOT_PB_PindleKill_CoordsIndex][1] +
			"].");
		D2JSP_SKILL_TeleportToPair(
			TDW_BOT_PB_PindleKill_Coords[TDW_BOT_PB_PindleKill_CoordsIndex]);
	}
*/
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TDW_BOT_PB_PindleKill_GetAttackSpec()
{
	var npc_spec = new TDW_BOT_ATTACK_SpecialNPC("Pindleskin",
		TDW_BOT_ATTACK_NPC_FLAG_NO_RETURN, 100, 0, 0, null,
		TDW_BOT_PB_PindleKill_AttackFunc, null, null);

	npc_spec.bounding_box       = TDW_BOT_PB_PindleKill_LairBounds;
	npc_spec.threat_attack_spec = new TDW_THREAT_MoveSpec(npc_spec.coord_min,
		npc_spec.coord_max, null, 0, TDW_BOT_PB_PindleKill_LairBounds);

	return(npc_spec);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TDW_BOT_PB_PindleKill(npc_spec, access_strategy, minions_flag)
{
	var tmp_attack_spec = TDW_BOT_AttackNPCSpec;

	npc_spec        = (npc_spec instanceof TDW_BOT_ATTACK_SpecialNPC) ?
		npc_spec : TDW_BOT_PB_PindleKill_GetAttackSpec();
	access_strategy = (access_strategy instanceof TDW_PATH_LinkAccessStrategy) ?
		access_strategy : TDW_BOT_MOVE_GetDefaultLinkAccessStrategy();

	npc_spec.pre_func    = (D2JSP_UTIL_GEN_TypeOfFunction(
		TDW_BOT_ContextList["tdw.bot.pindleskin.attack.func.pre"])) ?
		TDW_BOT_ContextList["tdw.bot.pindleskin.attack.func.pre"] : null;
	npc_spec.attack_func = (D2JSP_UTIL_GEN_TypeOfFunction(
		TDW_BOT_ContextList["tdw.bot.pindleskin.attack.func.attack"])) ?
		TDW_BOT_ContextList["tdw.bot.pindleskin.attack.func.attack"] :
		TDW_BOT_PB_PindleKill_AttackFunc;

	npc_spec.flags = TDW_BOT_ATTACK_NPC_FLAG_NO_RETURN |
		((TDW_BOT_ContextList["tdw.bot.pindleskin.kill.minions.pre"]) ?
			TDW_BOT_ATTACK_NPC_FLAG_KILL_MINIONS_PRE : 0) |
		((TDW_BOT_ContextList["tdw.bot.pindleskin.kill.minions.post"]) ?
			TDW_BOT_ATTACK_NPC_FLAG_KILL_MINIONS_POST : 0);

	var return_code = TDW_BOT_PB_PindleKill_Core(npc_spec, access_strategy);

	if ((!return_code) && minions_flag) {
		var current_time = new Date();
		var pause_time   = current_time.valueOf() + 10000;
		var end_time     = current_time.valueOf() + 20000;
		var npc_cluster;
		TDW_BOT_MOVE_TeleportToDestination(TDW_BOT_PB_ClearPindleMinions,
			TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_NONE);
		do {
			D2JSP_UTIL_BNET_OverheadSafe("Clearing area");
			if (myDist(TDW_BOT_PB_ClearPindleMinions[0],
				TDW_BOT_PB_ClearPindleMinions[1]) > 3)
				TDW_BOT_MOVE_TeleportToDestination(TDW_BOT_PB_ClearPindleMinions,
					TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_ALL);
			TDW_BOT_MOVE_DoArrival(TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_ALL);
			delay(250);
			npc_cluster  = new TDW_BOT_ATTACK_Cluster(null, 20, null,
				TDW_BOT_COLL_BLOCK_ATTACK);
			current_time = new Date();
		} while (((npc_cluster.count > 2) || (pause_time > current_time)) &&
			(end_time > current_time));
		TDW_BOT_MOVE_TeleportToDestination(TDW_BOT_PB_ClearPindleMinions,
			TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_ALL |
			TDW_BOT_SUPP_TP2DEST_FLAG_PICKUP_ISF);
	}

	TDW_BOT_AttackNPCSpec = tmp_attack_spec;

	return(return_code);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TDW_BOT_PB_PindleKill_Core(npc_spec, access_strategy)
{
	if (TDW_BOT_MOVE_GotoActTown(5))
		return(-1);

	TDW_MOVE_COMPAT_TownMove("portal");

	TDW_PATH_CreateArea(D2JSP_AREA_NIHLATHAKS_TEMPLE);
	TDW_PATH_BuildMap(D2JSP_AREA_NIHLATHAKS_TEMPLE);

	TDW_BOT_CHECK_PrecastChecks();

	if (TDW_MOVE_LookForAndTakePortal(D2JSP_AREA_NIHLATHAKS_TEMPLE, "*", 5, 50,
		true)) {
		access_strategy.callback_func(access_strategy,
			TDW_PATH_ASCB_MSG_ERROR, "Unable to get to " +
			D2JSP_AREA_AreaToName(D2JSP_AREA_NIHLATHAKS_TEMPLE) + ".");
		return(-1);
	}

	if (!TDW_BOT_CHECK_PrecastChecks(30000)) {
		access_strategy.callback_func(access_strategy,
			TDW_PATH_ASCB_MSG_ERROR, "Aborting run because precasts could not " +
			"be completed.");
		return(-1);
	}

	TDW_BOT_Log.flushLog();

	var old_action_flags = access_strategy.move_control.action_flags;
	access_strategy.move_control.action_flags =
		TDW_BOT_SUPP_TP2DEST_FLAG_NO_AVOID_NPCS;
	access_strategy.callback_func(access_strategy,
		TDW_PATH_ASCB_GOTO_XYPAIR, TDW_BOT_PB_PindleKill_Coords[0]);
	access_strategy.move_control.action_flags = old_action_flags;
print("***** TELEPORTED USING ACCESS STRATEGY");

	// Final teleport ensures our merc is beside us...
	TDW_BOT_MOVE_TeleportToDestination(TDW_BOT_PB_PindleKill_Coords[0],
		TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_NONE);
print("***** TELEPORTED USING INTERPOLATION");

	TDW_BOT_AttackNPCSpec.addNPC(npc_spec);

	TDW_BOT_AttackNPCSpec.killAny();

	if (TDW_BOT_AttackNPCSpec.findNPC("Pindleskin"))
		return(-1);

	return(0)
}
// ////////////////////////////////////////////////////////////////////////////

} // if (typeof(TDW_INCLUDE_GUARD_BotPindleskin_d2l) == "undefined") {

