// ////////////////////////////////////////////////////////////////////////////
// ////////////////////////////////////////////////////////////////////////////
// D2Jsp Utility Include File
// ////////////////////////////////////////////////////////////////////////////
//
// File Name       : _D2JSP_Utility.d2l
//
// File Version    : 01.00.00
//
// File Description: Contains D2JSP utility routines.
//
// Revison History : 2002-11-19 --- Creation
//
//	Author          : Michael L. Brock (TheDesertWind)
//
//	Copyright       : (c) 2002 - 2004, Michael L. Brock. All rights reserved.
//
// ////////////////////////////////////////////////////////////////////////////

	// Include guard
if (typeof(D2JSP_INCLUDE_GUARD_Utility_d2l) == "undefined") {
	var D2JSP_INCLUDE_GUARD_Utility_d2l = true;

// ////////////////////////////////////////////////////////////////////////////
// ////////////////////////////////////////////////////////////////////////////
// A reference to the JavaScript global object.
// ////////////////////////////////////////////////////////////////////////////
var D2JSP_UTIL_GlobalObjectRef = this;
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
var D2JSP_UTIL_LastError = me.lasterror;
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
if (typeof(D2JSP_UTIL_IncludeOnceHash) == "undefined") {
	var D2JSP_UTIL_IncludeOnceHash                       = new Array();
	D2JSP_UTIL_IncludeOnceHash["TDW/_D2JSP_Utility.d2l"] = [new Date(), null];
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
// ////////////////////////////////////////////////////////////////////////////
// ////////////////////////////////////////////////////////////////////////////
function includeonce(file_name)
{
	file_name = file_name.replace(/\\+/g, "/");
	file_name = file_name.replace(/\/+/g, "/");
	file_name = file_name.replace(/^\s+|\s+$/g, "");

	if (!(file_name in D2JSP_UTIL_IncludeOnceHash)) {
//print("INCLUDING: " + file_name);
		D2JSP_UTIL_IncludeOnceHash[file_name] = [new Date(), null];
		include(file_name);
		D2JSP_UTIL_IncludeOnceHash[file_name][1] = new Date();
	}
// CODE NOTE: For testing...
//	else
//		print("MULTIPLE INCLUDE ATTEMPT'" + file_name + "' was ignored.");
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
// ////////////////////////////////////////////////////////////////////////////
// Some necessary include files ...
// ////////////////////////////////////////////////////////////////////////////
includeonce("base_items.d2l");
includeonce("base_itemstatcost.d2l");
includeonce("base_levels.d2l");
includeonce("base_leveldefs.d2l");
includeonce("base_lvlmaze.d2l");
includeonce("base_lvlprest.d2l");
includeonce("base_lvlsub.d2l");
includeonce("base_lvltypes.d2l");
includeonce("base_lvlwarp.d2l");
includeonce("base_missiles.d2l");
includeonce("base_monstats.d2l");
includeonce("base_monstats2.d2l");
includeonce("base_skills.d2l");
includeonce("base_skilldesc.d2l");
includeonce("base_objects.d2l");

if (parseFloat(me.version) >= 0.4138) {
	includeonce("base_charstats.d2l");
	includeonce("base_setitems.d2l");
	includeonce("base_uniqueitems.d2l");
	includeonce("base_sets.d2l");
}

includeonce("TDW/_D2JSP_Modes.d2l");
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
// ////////////////////////////////////////////////////////////////////////////
// Ripped-off from Scavenger's multi-bot...
// ////////////////////////////////////////////////////////////////////////////
var D2JSP_UTIL_COLOR_BASE_WHITE  = 0;
var D2JSP_UTIL_COLOR_BASE_RED    = 1;
var D2JSP_UTIL_COLOR_BASE_GREEN  = 2;
var D2JSP_UTIL_COLOR_BASE_BLUE   = 3;
var D2JSP_UTIL_COLOR_BASE_GOLD   = 4;
var D2JSP_UTIL_COLOR_BASE_GRAY   = 5;
var D2JSP_UTIL_COLOR_BASE_BLACK  = 6;
var D2JSP_UTIL_COLOR_BASE_GOLD2  = 7;
var D2JSP_UTIL_COLOR_BASE_ORANGE = 8;
var D2JSP_UTIL_COLOR_BASE_YELLOW = 9;
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
// ////////////////////////////////////////////////////////////////////////////
// Ripped-off from Scavenger's multi-bot...
// ////////////////////////////////////////////////////////////////////////////
var D2JSP_UTIL_COLOR_WHITE  = "ÿc" + D2JSP_UTIL_COLOR_BASE_WHITE;
var D2JSP_UTIL_COLOR_RED    = "ÿc" + D2JSP_UTIL_COLOR_BASE_RED;
var D2JSP_UTIL_COLOR_GREEN  = "ÿc" + D2JSP_UTIL_COLOR_BASE_GREEN;
var D2JSP_UTIL_COLOR_BLUE   = "ÿc" + D2JSP_UTIL_COLOR_BASE_BLUE;
var D2JSP_UTIL_COLOR_GOLD   = "ÿc" + D2JSP_UTIL_COLOR_BASE_GOLD;
var D2JSP_UTIL_COLOR_GRAY   = "ÿc" + D2JSP_UTIL_COLOR_BASE_GRAY;
var D2JSP_UTIL_COLOR_BLACK  = "ÿc" + D2JSP_UTIL_COLOR_BASE_BLACK;
var D2JSP_UTIL_COLOR_GOLD2  = "ÿc" + D2JSP_UTIL_COLOR_BASE_GOLD2;
var D2JSP_UTIL_COLOR_ORANGE = "ÿc" + D2JSP_UTIL_COLOR_BASE_ORANGE;
var D2JSP_UTIL_COLOR_YELLOW = "ÿc" + D2JSP_UTIL_COLOR_BASE_YELLOW;
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
var D2JSP_UTIL_GETUNIT_PLAYER  = 0;
var D2JSP_UTIL_GETUNIT_NPC     = 1;
var D2JSP_UTIL_GETUNIT_OBJECT  = 2;
var D2JSP_UTIL_GETUNIT_MISSILE = 3;
var D2JSP_UTIL_GETUNIT_ITEM    = 4;
var D2JSP_UTIL_GETUNIT_TILE    = 5;
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
var D2JSP_UTIL_CLICKMAP_TYPE_LEFT_DOWN  = 0;
var D2JSP_UTIL_CLICKMAP_TYPE_LEFT_HOLD  = 1;
var D2JSP_UTIL_CLICKMAP_TYPE_LEFT_UP    = 2;
var D2JSP_UTIL_CLICKMAP_TYPE_RIGHT_DOWN = 3;
var D2JSP_UTIL_CLICKMAP_TYPE_RIGHT_HOLD = 4;
var D2JSP_UTIL_CLICKMAP_TYPE_RIGHT_UP   = 5;

var D2JSP_UTIL_CLICKMAP_SHIFT_OFF       = 0;
var D2JSP_UTIL_CLICKMAP_SHIFT_ON        = 1;
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
var D2JSP_BASESTAT_ITEM           =  0;
var D2JSP_BASESTAT_MONSTER        =  1;
var D2JSP_BASESTAT_SKILL_DESC     =  2;
var D2JSP_BASESTAT_SKILL          =  3;
var D2JSP_BASESTAT_OBJECT         =  4;
var D2JSP_BASESTAT_MISSILE        =  5;
var D2JSP_BASESTAT_MONSTER_2      =  6;
var D2JSP_BASESTAT_ITEM_STAT_COST =  7;
var D2JSP_BASESTAT_LEVELS         =  8;
var D2JSP_BASESTAT_LEVELDEFS      =  9;
var D2JSP_BASESTAT_LVLMAZE        = 10;
var D2JSP_BASESTAT_LVLSUB         = 11;
var D2JSP_BASESTAT_LVLWARP        = 12;
var D2JSP_BASESTAT_LVLPREST       = 13;
var D2JSP_BASESTAT_LVLTYPES       = 14;

var D2JSP_BASESTAT_CHARSTATS      = 15;
var D2JSP_BASESTAT_SET_ITEMS      = 16;
var D2JSP_BASESTAT_UNIQUE_ITEMS   = 17;
var D2JSP_BASESTAT_SETS           = 18;
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
var D2JSP_UTIL_UnitNameList = new Array();
D2JSP_UTIL_UnitNameList[D2JSP_UTIL_GETUNIT_PLAYER]  = "Player";
D2JSP_UTIL_UnitNameList[D2JSP_UTIL_GETUNIT_NPC]     = "Npc";
D2JSP_UTIL_UnitNameList[D2JSP_UTIL_GETUNIT_OBJECT]  = "Object";
D2JSP_UTIL_UnitNameList[D2JSP_UTIL_GETUNIT_ITEM]    = "Item";
D2JSP_UTIL_UnitNameList[D2JSP_UTIL_GETUNIT_TILE]    = "Tile";
D2JSP_UTIL_UnitNameList[D2JSP_UTIL_GETUNIT_MISSILE] = "Missile";
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
var D2JSP_UTIL_DAMAGE_PHYSICAL		= 0;
var D2JSP_UTIL_DAMAGE_FIRE				= 1;
var D2JSP_UTIL_DAMAGE_LIGHT			= 2;
var D2JSP_UTIL_DAMAGE_MAGIC			= 3;
var D2JSP_UTIL_DAMAGE_COLD				= 4;
var D2JSP_UTIL_DAMAGE_POISON			= 5;

var D2JSP_UTIL_DAMAGE_COUNT			= 6;
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
var D2JSP_UTIL_DAMAGE_BaseElementList		= [
	"Physical",
	"Fire",
	"Lightning",
	"Magic",
	"Cold",
	"Poison"
];
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
var D2JSP_UTIL_DAMAGE_DiffAdjustmentList		= [
	[  0,   0,   0,   0,   0,   0],
	[  0,  40,  40,  40,  40,  40],
	[  0, 100, 100, 100, 100, 100]
];
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
var D2JSP_UTIL_UI_0X00                 = 0x00;
var D2JSP_UTIL_UI_INV                  = 0x01;
var D2JSP_UTIL_UI_CHAR                 = 0x02;
var D2JSP_UTIL_UI_QUICK_SKILL          = 0x03;
var D2JSP_UTIL_UI_SKILL                = 0x04;
var D2JSP_UTIL_UI_CHAT                 = 0x05;
var D2JSP_UTIL_UI_0X06                 = 0x06;
var D2JSP_UTIL_UI_A2Q1_SKILL           = 0x07;
var D2JSP_UTIL_UI_NPC_MENU             = 0x08;
var D2JSP_UTIL_UI_MENU                 = 0x09;
var D2JSP_UTIL_UI_AUTOMAP              = 0x0A;
var D2JSP_UTIL_UI_CONFIG_CONTROLS      = 0x0B;
var D2JSP_UTIL_UI_SHOP                 = 0x0C;
var D2JSP_UTIL_UI_ALT_SHOW_ITEMS       = 0x0D;
var D2JSP_UTIL_UI_SPECIAL_MENU         = 0x0E;
var D2JSP_UTIL_UI_QUEST                = 0x0F;
var D2JSP_UTIL_UI_SCROLL_OF_INIFUSS    = 0x10;
var D2JSP_UTIL_UI_QUEST_LOG            = 0x11;
var D2JSP_UTIL_UI_STATUS_AREA          = 0x12;
var D2JSP_UTIL_UI_0X13                 = 0x13;
var D2JSP_UTIL_UI_WAYPOINT             = 0x14;
var D2JSP_UTIL_UI_MINI_PANEL           = 0x15;
var D2JSP_UTIL_UI_PARTY                = 0x16;
var D2JSP_UTIL_UI_PLAYER_TRADE_REQUEST = 0x17;
var D2JSP_UTIL_UI_MSGS                 = 0x18;
var D2JSP_UTIL_UI_STASH                = 0x19;
var D2JSP_UTIL_UI_CUBE                 = 0x1A;
var D2JSP_UTIL_UI_0X1B                 = 0x1B;
var D2JSP_UTIL_UI_0X1C                 = 0x1C;
var D2JSP_UTIL_UI_0X1D                 = 0x1D;
var D2JSP_UTIL_UI_0X1E                 = 0x1E;
var D2JSP_UTIL_UI_BELT                 = 0x1F;
var D2JSP_UTIL_UI_0X20                 = 0x20;
var D2JSP_UTIL_UI_HELP                 = 0x21;
var D2JSP_UTIL_UI_0X22                 = 0x22;
var D2JSP_UTIL_UI_0X23                 = 0x23;
var D2JSP_UTIL_UI_MERC_SCREEN          = 0x24;
var D2JSP_UTIL_UI_SCROLL_OF_WHATEVER   = 0x25;
var D2JSP_UTIL_UI_0X26                 = 0x26;
var D2JSP_UTIL_UI_0X27                 = 0x27;
var D2JSP_UTIL_UI_0X28                 = 0x28;
var D2JSP_UTIL_UI_0X29                 = 0x29;
var D2JSP_UTIL_UI_0X2A                 = 0x2A;
var D2JSP_UTIL_UI_0X2B                 = 0x2B;
var D2JSP_UTIL_UI_0X2C                 = 0x2C;
var D2JSP_UTIL_UI_0X2D                 = 0x2D;
var D2JSP_UTIL_UI_0X2E                 = 0x2E;
var D2JSP_UTIL_UI_0X2F                 = 0x2F;
var D2JSP_UTIL_UI_0X30                 = 0x30;

var D2JSP_UTIL_UI_AllList = [
//	D2JSP_UTIL_UI_0X00,
	D2JSP_UTIL_UI_INV,
	D2JSP_UTIL_UI_CHAR,
	D2JSP_UTIL_UI_QUICK_SKILL,
	D2JSP_UTIL_UI_SKILL,
	D2JSP_UTIL_UI_CHAT,
//	D2JSP_UTIL_UI_0X06,
	D2JSP_UTIL_UI_A2Q1_SKILL,
	D2JSP_UTIL_UI_NPC_MENU,
	D2JSP_UTIL_UI_MENU,
	D2JSP_UTIL_UI_AUTOMAP,
	D2JSP_UTIL_UI_CONFIG_CONTROLS,
	D2JSP_UTIL_UI_SHOP,
	D2JSP_UTIL_UI_ALT_SHOW_ITEMS,
	D2JSP_UTIL_UI_SPECIAL_MENU,
	D2JSP_UTIL_UI_QUEST,
	D2JSP_UTIL_UI_SCROLL_OF_INIFUSS,
	D2JSP_UTIL_UI_QUEST_LOG,
	D2JSP_UTIL_UI_STATUS_AREA,
//	D2JSP_UTIL_UI_0X13,
	D2JSP_UTIL_UI_WAYPOINT,
	D2JSP_UTIL_UI_MINI_PANEL,
	D2JSP_UTIL_UI_PARTY,
	D2JSP_UTIL_UI_PLAYER_TRADE_REQUEST,
	D2JSP_UTIL_UI_MSGS,
	D2JSP_UTIL_UI_STASH,
	D2JSP_UTIL_UI_CUBE,
//	D2JSP_UTIL_UI_0X1B,
//	D2JSP_UTIL_UI_0X1C,
//	D2JSP_UTIL_UI_0X1D,
//	D2JSP_UTIL_UI_0X1E,
	D2JSP_UTIL_UI_BELT,
//	D2JSP_UTIL_UI_0X20,
	D2JSP_UTIL_UI_HELP,
//	D2JSP_UTIL_UI_0X22,
//	D2JSP_UTIL_UI_0X23,
	D2JSP_UTIL_UI_MERC_SCREEN,
	D2JSP_UTIL_UI_SCROLL_OF_WHATEVER,
//	D2JSP_UTIL_UI_0X26,
//	D2JSP_UTIL_UI_0X27,
//	D2JSP_UTIL_UI_0X28,
//	D2JSP_UTIL_UI_0X29,
//	D2JSP_UTIL_UI_0X2A,
//	D2JSP_UTIL_UI_0X2B,
//	D2JSP_UTIL_UI_0X2C,
//	D2JSP_UTIL_UI_0X2D,
//	D2JSP_UTIL_UI_0X2E,
//	D2JSP_UTIL_UI_0X2F,
//	D2JSP_UTIL_UI_0X30
];

// Same as D2JSP_UTIL_UI_AllList, except for 0x07.
var D2JSP_UTIL_UI_CancelList = [
//	D2JSP_UTIL_UI_0X00,
	D2JSP_UTIL_UI_INV,
	D2JSP_UTIL_UI_CHAR,
	D2JSP_UTIL_UI_QUICK_SKILL,
	D2JSP_UTIL_UI_SKILL,
	D2JSP_UTIL_UI_CHAT,
//	D2JSP_UTIL_UI_0X06,
//	D2JSP_UTIL_UI_A2Q1_SKILL,
	D2JSP_UTIL_UI_NPC_MENU,
	D2JSP_UTIL_UI_MENU,
//	D2JSP_UTIL_UI_AUTOMAP,					// Leave the auto-map on...
	D2JSP_UTIL_UI_CONFIG_CONTROLS,
	D2JSP_UTIL_UI_SHOP,
	D2JSP_UTIL_UI_ALT_SHOW_ITEMS,
	D2JSP_UTIL_UI_SPECIAL_MENU,
	D2JSP_UTIL_UI_QUEST,
	D2JSP_UTIL_UI_SCROLL_OF_INIFUSS,
	D2JSP_UTIL_UI_QUEST_LOG,
	D2JSP_UTIL_UI_STATUS_AREA,
//	D2JSP_UTIL_UI_0X13,
	D2JSP_UTIL_UI_WAYPOINT,
	D2JSP_UTIL_UI_MINI_PANEL,
	D2JSP_UTIL_UI_PARTY,
	D2JSP_UTIL_UI_PLAYER_TRADE_REQUEST,
	D2JSP_UTIL_UI_MSGS,
	D2JSP_UTIL_UI_STASH,
	D2JSP_UTIL_UI_CUBE,
//	D2JSP_UTIL_UI_0X1B,
//	D2JSP_UTIL_UI_0X1C,
//	D2JSP_UTIL_UI_0X1D,
//	D2JSP_UTIL_UI_0X1E,
	D2JSP_UTIL_UI_BELT,
//	D2JSP_UTIL_UI_0X20,
	D2JSP_UTIL_UI_HELP,
//	D2JSP_UTIL_UI_0X22,
//	D2JSP_UTIL_UI_0X23,
	D2JSP_UTIL_UI_MERC_SCREEN,
	D2JSP_UTIL_UI_SCROLL_OF_WHATEVER,
//	D2JSP_UTIL_UI_0X26,
//	D2JSP_UTIL_UI_0X27,
//	D2JSP_UTIL_UI_0X28,
//	D2JSP_UTIL_UI_0X29,
//	D2JSP_UTIL_UI_0X2A,
//	D2JSP_UTIL_UI_0X2B,
//	D2JSP_UTIL_UI_0X2C,
//	D2JSP_UTIL_UI_0X2D,
//	D2JSP_UTIL_UI_0X2E,
//	D2JSP_UTIL_UI_0X2F,
//	D2JSP_UTIL_UI_0X30
];

var D2JSP_UTIL_UI_NPCList = [
	D2JSP_UTIL_UI_NPC_MENU,
	D2JSP_UTIL_UI_SHOP,
	D2JSP_UTIL_UI_SPECIAL_MENU
];

var D2JSP_UTIL_UI_NameList = [
	[ 0x00, "0x00" ],
	[ 0x01, "inv" ],
	[ 0x02, "char" ],
	[ 0x03, "quick skill" ],
	[ 0x04, "skill" ],
	[ 0x05, "chat" ],
	[ 0x06, "0x06=?Game load started?" ],
	[ 0x07, "0x07=?Realm mode game ready/Right-click A2 Book of Skill" ],
	[ 0x08, "npc menu" ],
	[ 0x09, "menu?" ],
	[ 0x0a, "automap" ],
	[ 0x0b, "config controls" ],
	[ 0x0c, "shop" ],
	[ 0x0d, "alt show items" ],
	[ 0x0e, "cash/Add sockets screen/Imbue screen/Personalize screen/Horadic Orifice Screen" ],
	[ 0x0f, "quest" ],
	[ 0x10, "0x10=Right-click Scroll of Inifuss" ],
	[ 0x11, "questlog button" ],
	[ 0x12, "status area" ],
	[ 0x13, "?=0x13=?Single player mode game ready?" ],
	[ 0x14, "waypoint" ],
	[ 0x15, "mini panel" ],
	[ 0x16, "party" ],
	[ 0x17, "?=Player trade request" ],
	[ 0x18, "msgs" ],
	[ 0x19, "stash" ],
	[ 0x1a, "cube" ],
	[ 0x1b, "0x1b" ],
	[ 0x1c, "0x1c" ],
	[ 0x1d, "0x1d" ],
	[ 0x1e, "0x1e" ],
	[ 0x1f, "belt" ],
	[ 0x20, "0x20" ],
	[ 0x21, "help" ],
	[ 0x22, "0x22=?Game loading?" ],
	[ 0x23, "0x23" ],
	[ 0x24, "merc screen" ],
	[ 0x25, "scroll of whatever" ],
	[ 0x26, "0x26" ],
	[ 0x27, "0x27" ],
	[ 0x28, "0x28" ],
	[ 0x29, "0x29" ],
	[ 0x2a, "0x2a" ],
	[ 0x2b, "0x2b" ],
	[ 0x2c, "0x2c" ],
	[ 0x2d, "0x2d" ],
	[ 0x2e, "0x2e" ],
	[ 0x2f, "0x2f" ],
	[ 0x30, "0x30" ],
];
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
// ////////////////////////////////////////////////////////////////////////////
// Potion feeding ...
// ////////////////////////////////////////////////////////////////////////////
// A = Antidote
// H = Health		<--- The default if not specified or invalid
// M = Mana
// R = Rejuvenation
// S = Stamina
// T = Thawing

var D2JSP_UTIL_POT_PotionNameList   = new Array();
D2JSP_UTIL_POT_PotionNameList["A"]  = "Antidote";
D2JSP_UTIL_POT_PotionNameList["H"]  = "Healing";
D2JSP_UTIL_POT_PotionNameList["M"]  = "Mana";
D2JSP_UTIL_POT_PotionNameList["R"]  = "Rejuvenation";
D2JSP_UTIL_POT_PotionNameList["S"]  = "Stamina";
D2JSP_UTIL_POT_PotionNameList["T"]  = "Thawing";

var D2JSP_UTIL_POT_PotionSearchList  = new Array();
D2JSP_UTIL_POT_PotionSearchList["A"] = ["yps"];
D2JSP_UTIL_POT_PotionSearchList["H"] = ["hp5", "hp5", "hp3", "hp2", "hp1"];
D2JSP_UTIL_POT_PotionSearchList["M"] = ["mp5", "mp5", "mp3", "mp2", "mp1"];
D2JSP_UTIL_POT_PotionSearchList["R"] = ["rvs", "rvl"];
D2JSP_UTIL_POT_PotionSearchList["S"] = ["vps"];
D2JSP_UTIL_POT_PotionSearchList["T"] = ["vps"];


var D2JSP_UTIL_POT_PotionSearchModes =
	[D2JSP_MODE_ITEM_INVEN_STASH_CUBE_STORE, D2JSP_MODE_ITEM_IN_BELT];
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
var D2JSP_UTIL_PARTY_MODE_LOOT_TOGGLE		= 0;
var D2JSP_UTIL_PARTY_MODE_HOSTILE_TOGGLE	= 1;
var D2JSP_UTIL_PARTY_MODE_PARTY				= 2;
var D2JSP_UTIL_PARTY_MODE_UNPARTY			= 3;
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
// ////////////////////////////////////////////////////////////////////////////
// The defined logging levels...
// ////////////////////////////////////////////////////////////////////////////
var D2JSP_UTIL_LOG_Level_MINUTIAE =  0;
var D2JSP_UTIL_LOG_Level_DEBUG    =  1;
var D2JSP_UTIL_LOG_Level_DETAIL   =  2;
var D2JSP_UTIL_LOG_Level_INFO     =  3;
var D2JSP_UTIL_LOG_Level_PICKUP   =  4;
var D2JSP_UTIL_LOG_Level_EVALUATE =  5;
var D2JSP_UTIL_LOG_Level_DISCARD  =  6;
var D2JSP_UTIL_LOG_Level_KEEP     =  7;
var D2JSP_UTIL_LOG_Level_WARNING  =  8;
var D2JSP_UTIL_LOG_Level_ERROR    =  9;
var D2JSP_UTIL_LOG_Level_FATAL    = 10;
var D2JSP_UTIL_LOG_Level_CHICKEN  = 11;
var D2JSP_UTIL_LOG_Level_HOSTILE  = 12;
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
// ////////////////////////////////////////////////////////////////////////////
// The names of the logging levels...
// ////////////////////////////////////////////////////////////////////////////
var D2JSP_UTIL_LOG_LevelList = [
	"MINUTIAE",
	"DEBUG   ",
	"DETAIL  ",
	"INFO    ",
	"PICKUP  ",
	"EVALUATE",
	"DISCARD ",
	"KEEP    ",
	"WARNING ",
	"ERROR   ",
	"FATAL   ",
	"CHICKEN ",
	"HOSTILE "
];
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
var D2JSP_UTIL_LOG_RegistrationList = new Array();
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
// ////////////////////////////////////////////////////////////////////////////
// ////////////////////////////////////////////////////////////////////////////
var D2JSP_UTIL_COLL_BLOCK_NONE        = 0x00;
var D2JSP_UTIL_COLL_BLOCK_WALK        = 0x01;
var D2JSP_UTIL_COLL_BLOCK_LOS         = 0x02;
var D2JSP_UTIL_COLL_BLOCK_JUMP        = 0x04;	//	Seems to also block attack.
var D2JSP_UTIL_COLL_BLOCK_PLAYER_WALK = 0x08;
var D2JSP_UTIL_COLL_BLOCK_BIT_4       = 0x10;	// This doesn't block walk or LoS.
var D2JSP_UTIL_COLL_BLOCK_LIGHT       = 0x20;
var D2JSP_UTIL_COLL_BLOCK_BIT_6       = 0x40;
var D2JSP_UTIL_COLL_BLOCK_BIT_7       = 0x80;	// Players (any).

var D2JSP_UTIL_COLL_BLOCK_MASK        = 0xFF;
var D2JSP_UTIL_COLL_BLOCK_DEFAULT     =
	D2JSP_UTIL_COLL_BLOCK_WALK |
	D2JSP_UTIL_COLL_BLOCK_LOS  |
	D2JSP_UTIL_COLL_BLOCK_PLAYER_WALK;
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
var D2JSP_UTIL_RealmList = [
	"*/INVALID/*",
	"uswest.battle.net",
	"useast.battle.net",
	"asia.battle.net",
	"europe.battle.net"
];
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
// ////////////////////////////////////////////////////////////////////////////
// Text names for three game difficulty levels...
// ////////////////////////////////////////////////////////////////////////////
var D2JSP_UTIL_GameDifficulty = [
	"Normal",
	"Nightmare",
	"Hell"
];
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function D2JSP_UTIL_GetDifficultyName(diff)
{
	return(((diff >= 0) && (diff < D2JSP_UTIL_GameDifficulty.length)) ?
		D2JSP_UTIL_GameDifficulty[diff] : "*INVALID*");
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function D2JSP_UTIL_GetCurrentDifficultyName()
{
	return(D2JSP_UTIL_GetDifficultyName(me.diff));
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function D2JSP_UTIL_InteractObject(in_object)
{
	if (parseFloat(me.version) < 0.33)
		in_object.interact();
	else {
		clickMap(D2JSP_UTIL_CLICKMAP_TYPE_LEFT_DOWN,
			D2JSP_UTIL_CLICKMAP_SHIFT_OFF, in_object);
		delay(rnd(10, 50));
		clickMap(D2JSP_UTIL_CLICKMAP_TYPE_LEFT_UP,
			D2JSP_UTIL_CLICKMAP_SHIFT_OFF, in_object);
	}
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function D2JSP_UTIL_InteractWaypoint(waypoint_obj, waypoint_area)
{
	waypoint_obj  = (waypoint_obj != null) ? waypoint_obj :
		getUnit(D2JSP_UTIL_GETUNIT_OBJECT, "Waypoint");
	waypoint_area = (D2JSP_UTIL_GEN_TypeOfNumber(waypoint_area)) ?
		((D2JSP_AREA_HasWayPoint(waypoint_area)) ? waypoint_area : me.area) :
		me.area;

	while (!getUIFlag(D2JSP_UTIL_UI_WAYPOINT)) {
		D2JSP_UTIL_InteractObject(waypoint_obj);
		for (var count_1 = 0; count_1 < 10; count_1++) {
			delay(50);
			if (getUIFlag(D2JSP_UTIL_UI_WAYPOINT))
				break;
		}
	}

	if (waypoint_area == me.area)
		return;

	waypoint_obj.interact(waypoint_area);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function D2JSP_UTIL_MoveTo(in_x, in_y)
{
/*
	while ((me.mode != D2JSP_MODE_PLAYER_STANDING_IN_TOWN) &&
		(me.mode != D2JSP_MODE_PLAYER_STANDING_OUTSIDE_TOWN))
		delay(10);

	if (parseFloat(me.version) < 0.33)
		me.move(in_x, in_y);
	else {
		clickMap(D2JSP_UTIL_CLICKMAP_TYPE_LEFT_DOWN,
			D2JSP_UTIL_CLICKMAP_SHIFT_OFF, in_x, in_y);
		delay(50);
		for (var count_1 = 0; count_1 < 100; count_1++) {
			if ((me.mode == D2JSP_MODE_PLAYER_STANDING_IN_TOWN) ||
				(me.mode == D2JSP_MODE_PLAYER_STANDING_OUTSIDE_TOWN))
				break;
			delay(10);
		}
		delay(rnd(10, 50));
		clickMap(D2JSP_UTIL_CLICKMAP_TYPE_LEFT_UP,
			D2JSP_UTIL_CLICKMAP_SHIFT_OFF, in_x, in_y);
	}

	while ((me.mode != D2JSP_MODE_PLAYER_STANDING_IN_TOWN) &&
		(me.mode != D2JSP_MODE_PLAYER_STANDING_OUTSIDE_TOWN))
		delay(10);
*/

	while ((me.mode != D2JSP_MODE_PLAYER_STANDING_IN_TOWN) &&
		(me.mode != D2JSP_MODE_PLAYER_STANDING_OUTSIDE_TOWN))
		delay(10);

	if (parseFloat(me.version) < 0.33)
		me.move(in_x, in_y);
	else {
//		var max_iter = (D2JSP_AREA_IsTown()) ? 100 : 50;
		// We don't use D2JSP_AREA_IsTown() to avoid include _D2JSP_Areas.d2j
		var max_iter = ((me.area == 1) || (me.area == 40) || (me.area == 75) ||
			(me.area == 103) || (me.area == 109)) ? 100 : 50;
		clickMap(D2JSP_UTIL_CLICKMAP_TYPE_LEFT_DOWN,
			D2JSP_UTIL_CLICKMAP_SHIFT_OFF, in_x, in_y);
		for (var count_1 = 0; count_1 < max_iter; count_1++) {
			if ((me.mode != D2JSP_MODE_PLAYER_STANDING_IN_TOWN) &&
				(me.mode != D2JSP_MODE_PLAYER_STANDING_OUTSIDE_TOWN))
				break;
			delay(10);
		}
		clickMap(D2JSP_UTIL_CLICKMAP_TYPE_LEFT_HOLD,
			D2JSP_UTIL_CLICKMAP_SHIFT_OFF, in_x, in_y);
		for (var count_1 = 0; count_1 < 100; count_1++) {
			if ((me.mode == D2JSP_MODE_PLAYER_STANDING_IN_TOWN) ||
				(me.mode == D2JSP_MODE_PLAYER_STANDING_OUTSIDE_TOWN))
				break;
			delay(10);
		}
		delay(rnd(10, 50));
		clickMap(D2JSP_UTIL_CLICKMAP_TYPE_LEFT_UP,
			D2JSP_UTIL_CLICKMAP_SHIFT_OFF, in_x, in_y);
	}

	while ((me.mode != D2JSP_MODE_PLAYER_STANDING_IN_TOWN) &&
		(me.mode != D2JSP_MODE_PLAYER_STANDING_OUTSIDE_TOWN))
		delay(10);

/*
	while ((me.mode != D2JSP_MODE_PLAYER_STANDING_IN_TOWN) &&
		(me.mode != D2JSP_MODE_PLAYER_STANDING_OUTSIDE_TOWN))
		delay(10);

	if (parseFloat(me.version) < 0.33)
		me.move(in_x, in_y);
	else {
		clickMap(D2JSP_UTIL_CLICKMAP_TYPE_LEFT_DOWN,
			D2JSP_UTIL_CLICKMAP_SHIFT_OFF, in_x, in_y);
		delay(rnd(10, 50));
		clickMap(D2JSP_UTIL_CLICKMAP_TYPE_LEFT_UP,
			D2JSP_UTIL_CLICKMAP_SHIFT_OFF, in_x, in_y);
	}

	while ((me.mode != D2JSP_MODE_PLAYER_STANDING_IN_TOWN) &&
		(me.mode != D2JSP_MODE_PLAYER_STANDING_OUTSIDE_TOWN))
		delay(10);
*/
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function D2JSP_UTIL_MoveToXYPair(in_x_y_pair)
{
	D2JSP_UTIL_MoveTo(in_x_y_pair[0], in_x_y_pair[1]);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function D2JSP_UTIL_MoveToObject(in_object)
{
	D2JSP_UTIL_MoveTo(in_object.x, in_object.y);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function D2JSP_UTIL_GetObjectTargetArea(in_object)
{
/*
	if (parseFloat(me.version) < 0.33.03)
		return(in_object.area);
	else
		return(in_object.subarea);
*/
	return((!("subarea" in in_object)) ? in_object.area : in_object.subarea);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function D2JSP_UTIL_GetChestStatus(in_object)
{
/*
	if (parseFloat(me.version) < 0.33.03)
		return(in_object.area);
	else
		return(in_object.status);
*/
	return((!("status" in in_object)) ? in_object.area : in_object.status);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function D2JSP_UTIL_GetBaseStatItem(in_unit, base_stat)
{
	return((in_unit.type == D2JSP_UTIL_GETUNIT_ITEM) ?
		getBaseStat(D2JSP_BASESTAT_ITEM, in_unit.classid, base_stat) : 0);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function D2JSP_UTIL_GetBaseStatMonster(in_unit, base_stat)
{
	return((in_unit.type == D2JSP_UTIL_GETUNIT_NPC) ?
		getBaseStat(D2JSP_BASESTAT_MONSTER, in_unit.classid, base_stat) : 0);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function D2JSP_UTIL_GetBaseStatObject(in_unit, base_stat)
{
	return((in_unit.type == D2JSP_UTIL_GETUNIT_OBJECT) ?
		getBaseStat(D2JSP_BASESTAT_OBJECT, in_unit.classid, base_stat) : 0);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function D2JSP_UTIL_GetBaseStatMissile(in_unit, base_stat)
{
	return((in_unit.type == D2JSP_UTIL_GETUNIT_MISSILE) ?
		getBaseStat(D2JSP_BASESTAT_MISSILE, in_unit.classid, base_stat) : 0);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function D2JSP_UTIL_getSkillInfo(skill_id, selector)
{
	return((parseFloat(me.version) < 0.3316) ? getSkillInfo(skill_id, selector) :
		getBaseStat(D2JSP_BASESTAT_SKILL, skill_id, selector));
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function D2JSP_UTIL_getSkillDescInfo(skill_id, selector)
{
	return(getBaseStat(D2JSP_BASESTAT_SKILL_DESC, skill_id, selector));
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function D2JSP_UTIL_GEN_LogGlobalSymbols(log_obj)
{
	var symbol_count = 0;

	log_obj = D2JSP_UTIL_LOG_SelectALog(log_obj);

	log_obj.emitSep();
	log_obj.emitSep();
	log_obj.emitComment("Log of All Current Global Symbols");
	log_obj.emitSep();

	for (var this_prop in D2JSP_UTIL_GlobalObjectRef)
		log_obj.logInfoQuiet(D2JSP_UTIL_FORMAT_RJust(++symbol_count, 8) + ": " +
			this_prop);

	log_obj.emitSep();
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function D2JSP_UTIL_GEN_CloneObject(source_obj)
{
	var destination_obj;
	var this_property;


	if (source_obj == null)
		destination_obj = null;
	else {
		destination_obj = new source_obj.constructor();
//		if (typeof(source_obj[this_property]) == "object") {
		if (source_obj instanceof Boolean)
			destination_obj = new Boolean(source_obj);
		else if (source_obj instanceof Date)
			destination_obj = new Date(source_obj.valueOf());
		else if (source_obj instanceof String)
			destination_obj = new String(source_obj);
		else if (source_obj instanceof Number)
			destination_obj = new Number(source_obj);
		else if (typeof(source_obj) == "object") {
			for (this_property in source_obj)
				destination_obj[this_property] = 
					(typeof(source_obj[this_property]) == "object") ?
					D2JSP_UTIL_GEN_CloneObject(source_obj[this_property]) :
					source_obj[this_property];
		}
		else
			destination_obj = source_obj;
	}

	return(destination_obj);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function D2JSP_UTIL_GEN_UnitCloneItem(in_unit)
{
	this._parent     = in_unit.getParent();
	this._item_flags = D2JSP_ITEMFLAG_GetFlagsForItem(in_unit);
	this._base_stats = new Array(D2JSP_BASESTAT_COUNT);
	this._enchants   = new Array(64);
	this._states     = new Array(D2JSP_STATE_COUNT);
	this._stats      = new Array(D2JSP_STAT_COUNT);

	for (var this_prop in in_unit)
		this[this_prop] = in_unit[this_prop];

	if (parseFloat(me.version) < 0.3316) {
		for (var count_1 = D2JSP_BASESTAT_MINIMUM;
			count_1 <= D2JSP_BASESTAT_MAXIMUM; count_1++)
			this._base_stats[count_1] = in_unit.getBaseStat(count_1);
	}
	else {
		for (count_1 = 0; count_1 < D2JSP_BASE_ITEMS_NAMES.length; count_1++)
			this._base_stats[count_1] = D2JSP_UTIL_GetBaseStatItem(in_unit, count_1);
	}

	for (var count_1 = 0; count_1 < 64; count_1++)
		this._enchants[count_1] = in_unit.getEnchant(count_1);

	for (var count_1 = D2JSP_STATE_MINIMUM; count_1 <= D2JSP_STATE_MAXIMUM;
		count_1++)
		this._states[count_1] = in_unit.getState(count_1);

	for (var count_1 = D2JSP_STAT_MINIMUM; count_1 <= D2JSP_STAT_MAXIMUM;
		count_1++)
		this._stats[count_1] = in_unit.getStat(count_1);

	this.getParent   = D2JSP_UTIL_GEN_UnitItemClone_getParent;
	this.getFlag     = D2JSP_UTIL_GEN_UnitItemClone_getFlag;
	this.getBaseStat = D2JSP_UTIL_GEN_UnitItemClone_getBaseStat;
	this.getEnchant  = D2JSP_UTIL_GEN_UnitItemClone_getEnchant;
	this.getState    = D2JSP_UTIL_GEN_UnitItemClone_getState;
	this.getStat     = D2JSP_UTIL_GEN_UnitItemClone_getStat;

	function D2JSP_UTIL_GEN_UnitItemClone_getParent() {
		return(this._parent);
	}

	function D2JSP_UTIL_GEN_UnitItemClone_getFlag(selector) {
		return(selector & this._item_flags);
	}

	function D2JSP_UTIL_GEN_UnitItemClone_getBaseStat(selector) {
		return(((selector >= D2JSP_BASESTAT_MINIMUM) &&
			(selector <= D2JSP_BASESTAT_MAXIMUM)) ?
			this._base_stats[selector] : null);
	}

	function D2JSP_UTIL_GEN_UnitItemClone_getEnchant(selector) {
		return(((selector >= 0) && (selector < this._enchants.length)) ?
			this._enchants[selector] : null);
	}

	function D2JSP_UTIL_GEN_UnitItemClone_getState(selector) {
		return(((selector >= D2JSP_STATE_MINIMUM) &&
			(selector <= D2JSP_STATE_MAXIMUM)) ?
			this._states[selector] : null);
	}

	function D2JSP_UTIL_GEN_UnitItemClone_getStat(selector) {
		return(((selector >= D2JSP_STAT_MINIMUM) &&
			(selector <= D2JSP_STAT_MAXIMUM)) ?
			this._stats[selector] : null);
	}
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function D2JSP_UTIL_GEN_CompareNumeric(datum_1, datum_2)
{
	return(datum_1 - datum_2);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function D2JSP_UTIL_GEN_CompareLength(datum_1, datum_2)
{
	return(datum_1.length - datum_2.length);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function D2JSP_UTIL_GEN_CompareIgnoreCase(datum_1, datum_2)
{
	return((datum_1.toLowerCase() < datum_2.toLowerCase()) ? -1 :
		((datum_1.toLowerCase() > datum_2.toLowerCase()) ? 1 : 0));
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function D2JSP_UTIL_GEN_CompareDistanceElements(ele_1, ele_2)
{
	return(D2JSP_UTIL_GEN_CompareNumeric(ele_1[0], ele_2[0]));
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
/*
function D2JSP_UTIL_BNET_ScheduleInvitation(player_name, time_out, interval)
{
	if (!D2JSP_UTIL_GEN_TypeOfStringNotEmpty(player_name)) {
		return(-1);
	}

	time_out = (D2JSP_UTIL_GEN_TypeOfNumber(time_out) && (time_out > 0)) ?
		time_out : 60000;
	interval = (D2JSP_UTIL_GEN_TypeOfNumber(interval) && (interval > 0)) ?
		interval : 5000;

	var file_name = D2JSP_UTIL_GEN_MakeUniqueFileName("____PartyInvitation.");
	var file_handle;

	if ((file_handle = fileOpen(file_name, 1)) == null) {
		file_handle.writeLine("// ///////// ///////////////////////////////////");
		file_handle.writeLine("// ///////// ///////////////////////////////////");
		file_handle.writeLine("// Purpose : BNet Party Invitation");
		file_handle.writeLine("// Created : " + (new Date()));
		file_handle.writeLine("// Inviter : " + me.account + " / " + me.name);
		file_handle.writeLine("// Invitee : " + player_name);
		file_handle.writeLine("// Time-Out: " +
			D2JSP_UTIL_FORMAT_RJust(time_out, 10) + " milliseconds");
		file_handle.writeLine("// Interval: " +
			D2JSP_UTIL_FORMAT_RJust(interval, 10) + " milliseconds");
		file_handle.writeLine("// FileName: " + file_name);
		file_handle.writeLine("// ///////// ///////////////////////////////////");
		file_handle.writeLine("");
		file_handle.writeLine("const TDW_PARTY_TimeOut  = " + time_out);
		file_handle.writeLine("const TDW_PARTY_Interval = " + interval);
		file_handle.writeLine("const TDW_PARTY_FileName = " + file_name);
		file_handle.writeLine("");
		file_handle.writeLine("include(\"TDW/TDW_PartyInvite.d2l\");");
		file_handle.writeLine("");
		file_handle.writeLine("function main()");
		file_handle.writeLine("{");
		file_handle.writeLine("\tTDW_PartyInvite(" + time_out + ", " + interval + ");
		file_handle.writeLine("}");
		file_handle.writeLine("");
		file_handle.writeLine("// ///////// ///////////////////////////////////");
		
		file_handle.writeLine("// ///////// ///////////////////////////////////");
	}
}
*/
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function D2JSP_UTIL_BNET_SaySafe(say_text)
{
	say_text += "";
	say_text = (me.realm) ? say_text.replace(/\xff+(c\d)/g, "") : say_text;

	say(say_text);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function D2JSP_UTIL_BNET_OverheadSafe(say_text)
{
	say_text += "";

	say_text = (me.realm) ? say_text.replace(/\xff+(c\d)/g, "") : say_text;

	me.overhead(say_text);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function D2JSP_UTIL_GEN_ParseNetString(net_string)
{
	var match_data = net_string.match(/^\xff+c4(.*)\xff+c0: (.*)$/);

	return((match_data && (match_data.length == 3)) ?
		[match_data[1], match_data[2]] : null);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function D2JSP_UTIL_GEN_HashedArrayHasElements(in_hash)
{
	for (var this_prop in in_hash)
		return(true);

	return(false);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function D2JSP_UTIL_GEN_CountHashElements(in_hash)
{
	var out_count = 0;
	var this_one;

	for (this_one in in_hash)
		out_count++;

	return(out_count);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function D2JSP_UTIL_GEN_UniqueArray(in_array)
{
	var out_array  = new Array();
	var hash_array = new Array();
	var this_one;

	for (this_one = 0; this_one < in_array.length; this_one++)
		hash_array[in_array[this_one] + ""] = in_array[this_one];

	for (this_one in hash_array)
		out_array.push(hash_array[this_one]);

	return(out_array);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function D2JSP_UTIL_GEN_UniqueArrayI(in_array)
{
	var out_array  = new Array();
	var hash_array = new Array();
	var this_one;

	for (this_one = 0; this_one < in_array.length; this_one++)
		hash_array[(in_array[this_one] + "").toLowerCase()] = in_array[this_one];

	for (this_one in hash_array)
		out_array.push(hash_array[this_one]);

	return(out_array);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function D2JSP_UTIL_GEN_ArrayIndexedToHashedShallow(in_array)
{
	var hash_array = new Array();
	var this_one;

	for (this_one = 0; this_one < in_array.length; this_one++)
		hash_array[(in_array[this_one] + "")] = in_array[count_1];

	return(hash_array);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function D2JSP_UTIL_GEN_ArrayIndexedToHashedDeep(in_array)
{
	var hash_array = new Array();
	var this_one;

	for (this_one = 0; this_one < in_array.length; this_one++)
		hash_array[(in_array[this_one] + "")] =
			D2JSP_UTIL_GEN_CloneObject(in_array[count_1]);

	return(hash_array);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function D2JSP_UTIL_GEN_ArrayHashedKeysToIndexedShallow(in_array)
{
	var index_array = new Array();
	var this_one;

	for (this_one in in_array)
		index_array.push(this_one);

	return(index_array);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function D2JSP_UTIL_GEN_ArrayHashedKeysToIndexedDeep(in_array)
{
	var index_array = new Array();
	var this_one;

	for (this_one in in_array)
		index_array.push(D2JSP_UTIL_GEN_CloneObject(this_one));

	return(index_array);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function D2JSP_UTIL_GEN_ArrayHashedValuesToIndexedShallow(in_array)
{
	var index_array = new Array();
	var this_one;

	for (this_one in in_array)
		index_array.push(in_array[this_one]);

	return(index_array);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function D2JSP_UTIL_GEN_ArrayHashedValuesToIndexedDeep(in_array)
{
	var index_array = new Array();
	var this_one;

	for (this_one in in_array)
		index_array.push(D2JSP_UTIL_GEN_CloneObject(in_array[this_one]));

	return(index_array);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function D2JSP_UTIL_GEN_TypeOfUndefined(in_data)
{
	return((typeof(in_data) == "undefined") ? true : false);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function D2JSP_UTIL_GEN_TypeOfBoolean(in_data)
{
	return(((typeof(in_data) == "boolean") || (typeof(in_data) == "number")) ?
		true : false);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function D2JSP_UTIL_GEN_TypeOfNumber(in_data)
{
	return((typeof(in_data) == "number") ? true : false);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function D2JSP_UTIL_GEN_TypeOfSInt(in_data)
{
	return((D2JSP_UTIL_GEN_TypeOfNumber(in_data) &&
		(in_data == ((in_data >= 0) ? Math.floor(in_data) : Math.ceil(in_data))))?
		true : false);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function D2JSP_UTIL_GEN_TypeOfUInt(in_data)
{
	return((D2JSP_UTIL_GEN_TypeOfNumber(in_data) &&
		(in_data == Math.floor(in_data))) ? true : false);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function D2JSP_UTIL_GEN_TypeOfString(in_data)
{
	return(((in_data instanceof String) || (typeof(in_data) == "string")) ?
		true : false);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function D2JSP_UTIL_GEN_TypeOfObject(in_data)
{
	return((typeof(in_data) == "object") ? true : false);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function D2JSP_UTIL_GEN_TypeOfFunction(in_data)
{
	return((typeof(in_data) == "function") ? true : false);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function D2JSP_UTIL_GEN_TypeOfArray(in_data)
{
	return(in_data instanceof Array);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function D2JSP_UTIL_GEN_TypeOfArrayIndexed(in_data)
{
	return(D2JSP_UTIL_GEN_TypeOfArray(in_data) && ("length" in in_data) &&
		D2JSP_UTIL_GEN_TypeOfNumber(in_data.length));
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function D2JSP_UTIL_GEN_TypeOfArrayHashed(in_data)
{
/*
	if (D2JSP_UTIL_GEN_TypeOfArrayIndexed(in_data) && (!in_data.length)) {
		for (var this_prop in in_data)
			return(true);
	}

	return(false);
*/
	if (D2JSP_UTIL_GEN_TypeOfArray(in_data)) {
		for (var this_prop in in_data)
			return(true);
	}

	return(false);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function D2JSP_UTIL_GEN_TypeOfStringNotEmpty(in_data)
{
	return((D2JSP_UTIL_GEN_TypeOfString(in_data) && (in_data != "")) ?
		true : false);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function D2JSP_UTIL_GEN_TypeOfCoord(in_data)
{
	return((D2JSP_UTIL_GEN_TypeOfArrayIndexed(in_data) &&
		(in_data.length == 2) && D2JSP_UTIL_GEN_TypeOfNumber(in_data[0]) &&
		D2JSP_UTIL_GEN_TypeOfNumber(in_data[1])) ? true : false);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function D2JSP_UTIL_IsValidJSName(in_text)
{
	return((D2JSP_UTIL_GEN_TypeOfStringNotEmpty(in_text) &&
		(in_text.match(/^[A-Za-z_]+[A-Za-z0-9_]*$/) != null)) ? true : false);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function D2JSP_UTIL_GEN_ExpandArgs(in_arguments, first_index)
{
	var out_arguments = new Array();

	in_arguments = (D2JSP_UTIL_GEN_TypeOfArrayIndexed(in_arguments)) ?
		in_arguments : ((in_arguments != null) ? [in_arguments] : (new Array()));
	first_index  = (D2JSP_UTIL_GEN_TypeOfNumber(first_index) &&
		(first_index > -1)) ? first_index : 0;

	for (var count_1 = first_index; count_1 < in_arguments.length; count_1++) {
		if (D2JSP_UTIL_GEN_TypeOfArrayHashed(in_arguments[count_1]))
			out_arguments = out_arguments.concat(D2JSP_UTIL_GEN_ExpandArgs(
				D2JSP_UTIL_GEN_ArrayHashedKeysToIndexedShallow(
				in_arguments[count_1])));
		else if (D2JSP_UTIL_GEN_TypeOfArrayIndexed(in_arguments[count_1]))
			out_arguments = out_arguments.concat(
				D2JSP_UTIL_GEN_ExpandArgs(in_arguments[count_1]));
		else
			out_arguments.push(in_arguments[count_1]);
	}

	return(out_arguments);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
// Just attempts to progress the linear congruential generator a bit further
// on its path based upon:
//		1) The specifics of the user realm, account, and character names. Which
//			is good if you're running multiple bots.
//		2) The current number of milliseconds in the time of day --- changes
//			frequently, of course...
// ////////////////////////////////////////////////////////////////////////////
function D2JSP_UTIL_GEN_SeedRandomNumbers()
{
	var name_list = [me.realm, me.account, me.name];
	var this_date;
	var this_max;
	var count_1;
	var count_2;

	this_date = new Date();
	this_max  = rnd(0, (this_date.valueOf() % 1000));
	for (count_1 = 0; count_1 < this_max; count_1++)
		rnd(0, 1);

	for (count_1 = 0; count_1 < name_list.length; count_1++) {
		name_length = name_list[count_1].length;
		for (count_2 = 0; count_2 < name_list[count_1].length; count_2++)
			rnd(0, (name_list[count_1].charCodeAt(count_2) % 256));
	}

	this_date = new Date();
	rnd(0, (this_date.valueOf() % 1000));
	this_max  = rnd(0, (this_date.valueOf() % 1000));
	for (count_1 = 0; count_1 < this_max; count_1++)
		rnd(0, 1);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function D2JSP_UTIL_GEN_FuzzyDelay(in_delay_ms, fuzz_percent)
{
	var fuzz_actual;
	var delay_ms;

	if ((!arguments.length) || (in_delay_ms < 1))
		in_delay_ms = 10;

	if ((arguments.length < 2) || (fuzz_percent < 1)) {
		fuzz_percent = (in_delay_ms / 10);
		fuzz_percent = (fuzz_percent < 1) ? 1 : fuzz_percent;
	}

	fuzz_actual = Math.floor(in_delay_ms * (fuzz_percent / 100));
	fuzz_actual = (fuzz_actual >= 1) ? fuzz_actual : 1;

	delay_ms    = in_delay_ms + (rnd(0, fuzz_actual) * [-1, 0, 1][rnd(0, 2)]);

	delay(Math.abs(delay_ms));

	return(Math.abs(delay_ms));
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function D2JSP_UTIL_GEN_RandomRange(low_num, high_num)
{
	low_num  = (low_num < 0)  ? Math.ceil(low_num)  : Math.floor(low_num);
	high_num = (high_num < 0) ? Math.ceil(high_num) : Math.floor(high_num);

	if (low_num == high_num)
		return(low_num);
	else if (low_num > high_num) {
		tmp_num  = low_num;
		low_num  = high_num;
		high_num = tmp_num;
	}

	return(low_num + Math.floor(Math.random() *
		Math.abs((high_num + 1) - low_num)));
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function D2JSP_UTIL_IsValidIPAddress(ip_address)
{
	if (D2JSP_UTIL_GEN_TypeOfStringNotEmpty(ip_address)) {
		var quad_match = ip_address.match(/^(\d+)\.(\d+)\.(\d+)\.(\d+)$/);
		if (quad_match && (quad_match.length == 5)) {
			for (var count_1 = 1; count_1 < 5; count_1++) {
				if ((!D2JSP_UTIL_FORMAT_IsDigit(quad_match[count_1])) ||
					(parseInt(quad_match[count_1], 10) > 255))
					return(false);
			}
			return(true);
		}
	}
	return(false);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function D2JSP_UTIL_GEN_CleanFileName(file_name)
{
	file_name = file_name.replace(/\\+/g, "/");
	file_name = file_name.replace(/\/+/g, "/");
	file_name = file_name.replace(/^\s+|\s+$/g, "");

	return(file_name);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function D2JSP_UTIL_GEN_CancelObject(this_obj)
{
	this_obj.cancel(0);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function D2JSP_UTIL_GEN_CancelNPC(this_obj)
{
	this_obj.cancel(1);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function D2JSP_UTIL_GEN_CheckCursor(check_count, check_time)
{
	if ((arguments.length < 1) || (check_count < 1))
		check_count = 1;

	if ((arguments.length < 2) || (check_time < 1))
		check_time = 10;

	while (check_count) {
		if (!me.itemoncursor)
			break;
		D2JSP_UTIL_GEN_FuzzyDelay(check_time);
		check_count--;
	}

	return((me.itemoncursor) ? true : false);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function D2JSP_UTIL_GEN_ClearCursor(dispose_flag, log_obj, error_msg_string)
{
	var return_code        = 0;
	var container_map_list = null;
	var this_obj;
	var tmp_name;
	var item_destination;
	var count_1;
	var count_2;

	if ((arguments.length < 1) || (dispose_flag == null))
		dispose_flag = false;

	if (!D2JSP_UTIL_GEN_CheckCursor())
		return(0);

	log_obj            = D2JSP_UTIL_LOG_SelectALog(log_obj);
	container_map_list = D2JSP_ITEM_CONT_BuildMapList();
	this_obj           = getUnit(D2JSP_UTIL_GETUNIT_ITEM, null,
		D2JSP_MODE_ITEM_ON_CURSOR);

	if (!this_obj) {
		if (!me.itemoncursor)			// Hmmm... item on cursor vanished!
			return(0);
		error_msg_string = "Have an item on my cursor but I can't seem to " +
			"access it in order to clear it";
		log_obj.logFatal(D2JSP_UTIL_COLOR_RED + error_msg_string);
		delay(3000);
		return(-1);
	}

	tmp_name = D2JSP_ITEM_ColorItemFullName(this_obj);
	if (this_obj.getFlag(D2JSP_ITEMFLAG_IDENTIFIED) &&
		((this_obj.quality == D2JSP_ITEM_QUALITY_SET) ||
		(this_obj.quality == D2JSP_ITEM_QUALITY_UNIQUE)))
		tmp_name += "(" + D2JSP_ITEM_ColorItemFixFName(this_obj) + ")";

	log_obj.logWarning(D2JSP_UTIL_COLOR_YELLOW + "Have an item on my cursor (" +
		tmp_name + ") --- will try to clear it.");
	if (dispose_flag == true) {
		this_obj.cancel();					// Drop it on the ground.
		if (!D2JSP_UTIL_GEN_CheckCursor(1000, 10)) {
			log_obj.logInfo("Dropped the " + tmp_name + " from the cursor " +
				"to the gound.");
			return(0);
		}
		error_msg_string = "Attempt to drop the " + tmp_name + " from " +
			"the cursor to the ground failed.";
		log_obj.logFatal(D2JSP_UTIL_COLOR_RED + error_msg_string);
		log_obj.logFatal(D2JSP_UTIL_COLOR_RED +
			"********** THIS IS A FATAL ERROR **********");
		delay(3000);
		return(-1);
	}

	item_destination = D2JSP_ITEM_CONT_ItemMove(this_obj, container_map_list,
		D2JSP_ITEM_CONT_SRC_INVENTORY);
	if (!item_destination) {
		log_obj.logWarning(D2JSP_UTIL_COLOR_YELLOW + "Attempt to move the " +
			tmp_name + " from the cursor to inventory failed.");
		if (D2JSP_AREA_IsTown())
			log_obj.logWarning(D2JSP_UTIL_COLOR_YELLOW + "Will try to move the " +
				tmp_name + " into another container.");
		else
			log_obj.logWarning(D2JSP_UTIL_COLOR_YELLOW + "Will try the desperate "+
				"measure of attempting to move the " + tmp_name +
				" into another container.");
		item_destination = D2JSP_ITEM_CONT_ItemMove(this_obj, container_map_list);
		if (!item_destination) {
			error_msg_string = "Attempt to move the " + tmp_name +
				" from the cursor to a container failed.";
			log_obj.logFatal(D2JSP_UTIL_COLOR_RED + error_msg_string);
			log_obj.logFatal(D2JSP_UTIL_COLOR_RED +
				"********** THIS IS A FATAL ERROR **********");
			delay(3000);
			return(-1);
		}
	}

	log_obj.logInfo("Stored the " + tmp_name + " from the cursor to " +
		D2JSP_ITEM_CONT_ToName(item_destination[0]) + " at coordinates [" +
		item_destination[1] + ", " + item_destination[2] + "]");

	return(0);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function D2JSP_UTIL_GEN_CheckGameReady(max_tries)
{
/*
	var type_list  = [
		["Player",  D2JSP_UTIL_GETUNIT_PLAYER  ],
		["NPC",     D2JSP_UTIL_GETUNIT_NPC     ],
		["Object",  D2JSP_UTIL_GETUNIT_OBJECT  ],
		["Item",    D2JSP_UTIL_GETUNIT_ITEM    ]
	];
	var count_list = new Array(type_list.length);
	var return_code;
	var count_1;
	var count_2;

	max_tries = (max_tries > 0) ? max_tries : 5;

	for (count_1 = 0; count_1 < count_list.length; count_1++)
		count_list[count_1] = Number.MAX_VALUE;

	for (count_1 = -1; count_1 < max_tries; count_1++) {
		return_code = true;
		for (count_2 = 0; count_2 < type_list.length; count_2++) {
			this_count = D2JSP_UTIL_GEN_DoUnitType(type_list[count_2][1]);
			if (count_list[count_2] != this_count) {
				count_list[count_2] = this_count;
				return_code         = false;
				if (count_1 > -1)
					break;
			}
		}
		if (return_code == true)
			break;
		else if (count_1 > -1)
			delay(500);							// No server interaction, so no fuzz...
	}

	return(return_code);
*/

	var return_code   = -1;
	var gamestarttime = me.gamestarttime;

	if (me.gamestarttime && ((getTickCount() - me.gamestarttime) >= 3000))
		return_code = 0;
	else {
		max_tries = (max_tries < 1) ? 50 : max_tries;
		delay(100);
		for (var count_1 = 0; count_1 < 50; count_1++) {
			if ((getUIFlag(0x13) && (!getUIFlag(0x22))) ||
				(gamestarttime && ((getTickCount() - gamestarttime) >= 3000))) {
				return_code = 0;
				break;
			}
			delay(100);
		}
	}

//	delay(1000);

	return(return_code);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function D2JSP_UTIL_GEN_DoUnitType(unit_type, callback_func, callback_data)
{
	var out_count = 0;
	var this_obj  = getUnit(unit_type);

	if (this_obj) {
		do {
			out_count++;
			if (typeof(callback_func) == "function")
				callback_func(callback_data);
		} while (this_obj && this_obj.getNext());
	}

	return(out_count);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function D2JSP_UTIL_GEN_ReadFile(file_name)
{
	var line_list = null;
	var file_handle;

	if ((file_handle = fileOpen(file_name, 0)) != null) {
		line_list = new Array();
		while (!file_handle.eof)
			line_list.push(file_handle.readLine());
		file_handle.close();
	}

	return(line_list);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function D2JSP_UTIL_GEN_WriteFile(file_name, line_data)
{
/*
	var return_code = -1;
	var file_handle;

	if ((file_handle = fileOpen(file_name, 1)) != null) {
		for (var count_1 = 0; count_1 < line_data.length; count_1++)
			file_handle.writeLine(line_data[count_1]);
		file_handle.close();
		return_code = 0;
	}

	return(return_code);
*/
	var return_code = -1;
	var file_handle;

	if ((file_handle = fileOpen(file_name, 1)) != null) {
		D2JSP_UTIL_GEN_EmitToFileHandle(file_handle, line_data);
		file_handle.close();
		return_code = 0;
	}

	return(return_code);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function D2JSP_UTIL_GEN_AppendFile(file_name, line_data)
{
/*
	var return_code = -1;
	var file_handle;

	if ((file_handle = fileOpen(file_name, 2)) != null) {
		if (D2JSP_UTIL_GEN_TypeOfArrayIndexed(line_data)) {
			for (var count_1 = 0; count_1 < line_data.length; count_1++)
				file_handle.writeLine(line_data[count_1]);
		}
		else if (D2JSP_UTIL_GEN_TypeOfArrayHashed(line_data)) {
			for (var this_prop in line_data)
				file_handle.writeLine(this_prop + " = " + line_data[this_prop]);
		}
		else
			file_handle.writeLine(line_data);
		file_handle.close();
		return_code = 0;
	}

	return(return_code);
*/
	var return_code = -1;
	var file_handle;

	if ((file_handle = fileOpen(file_name, 2)) != null) {
		D2JSP_UTIL_GEN_EmitToFileHandle(file_handle, line_data);
		file_handle.close();
		return_code = 0;
	}

	return(return_code);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function D2JSP_UTIL_GEN_EmitToFileHandle(file_handle, line_data)
{
	if (file_handle) {
		if (D2JSP_UTIL_GEN_TypeOfArrayIndexed(line_data)) {
			for (var count_1 = 0; count_1 < line_data.length; count_1++)
				file_handle.writeLine(line_data[count_1]);
		}
		else if (D2JSP_UTIL_GEN_TypeOfArrayHashed(line_data)) {
			for (var this_prop in line_data)
				file_handle.writeLine(this_prop + " = " + line_data[this_prop]);
		}
		else
			file_handle.writeLine(line_data);
		file_handle.close();
		return_code = 0;
	}
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function D2JSP_UTIL_GEN_FileExists(file_name)
{
	var file_handle;

	if ((file_handle = fileOpen(file_name, 0)) != null) {
		file_handle.close();
		return(true);
	}

	return(false);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function D2JSP_UTIL_GEN_MakeUniqueFileName(file_base)
{
	var file_name;

	file_base = (D2JSP_UTIL_GEN_TypeOf(file_base)) ? file_base : "";

	while (true) {
		file_name = file_base + "_____TMP_FILE." + me.realm + "." + me.account +
			"." + me.name + "." + getMyPID() + "." + (new Date()).valueOf() + "." +
			rnd(0, 1000);
		if (!D2JSP_UTIL_GEN_FileExists(file_name))
			return(file_name);
	}

	return(false);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function D2JSP_UTIL_GEN_GCDelay()
{
	delay(10);
	runGC();
	delay(10);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function D2JSP_UTIL_GEN_Delay()
{
	delay(10);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function D2JSP_UTIL_GEN_RealmToNumber(in_realm)
{
	for (count_1 = 0; count_1 < D2JSP_UTIL_RealmList.length; count_1++) {
		if (in_realm.toLowerCase() == D2JSP_UTIL_RealmList[count_1])
			return(count_1);
	}

	if (in_realm.indexOf(".battle.net") == -1)
		return(D2JSP_UTIL_GEN_RealmToNumber(in_realm + ".battle.net"));

	return(-1);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function D2JSP_UTIL_GEN_NumberToRealm(in_realm)
{
	return((D2JSP_UTIL_GEN_TypeOfNumber(in_realm) && (in_realm >= 0) &&
		(in_realm < D2JSP_UTIL_RealmList.length)) ?
		D2JSP_UTIL_RealmList[in_realm] : null);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function D2JSP_UTIL_GEN_ParseRealmToNumber(in_realm)
{
	if (D2JSP_UTIL_GEN_TypeOfNumber(in_realm) ||
		D2JSP_UTIL_FORMAT_IsDigit(in_realm)) {
		if ((in_realm >= 0) && (in_realm < D2JSP_UTIL_RealmList.length))
			return(parseInt(in_realm, 10));
	}
	else if (D2JSP_UTIL_GEN_TypeOfString(in_realm))
		return(D2JSP_UTIL_GEN_RealmToNumber(in_realm));

	return(-1);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function D2JSP_UTIL_GEN_ParseRealmToName(in_realm)
{
	var realm_number = D2JSP_UTIL_GEN_ParseRealmToNumber(in_realm);

	return((realm_number != -1) ? D2JSP_UTIL_RealmList[realm_number] : null);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function D2JSP_UTIL_GetGameName()
{
	return((parseFloat(me.version) >= 0.36) ? me.gamename : null);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function D2JSP_UTIL_GetGamePassword()
{
	return((parseFloat(me.version) >= 0.36) ? me.gamepassword : null);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function D2JSP_UTIL_GetGameServerNumber()
{
	return((parseFloat(me.version) >= 0.36) ?
		me.gameserverip.split(/\./)[3] : null);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function D2JSP_UTIL_GetGameServerIP()
{
	return((parseFloat(me.version) >= 0.36) ? me.gameserverip : null);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function D2JSP_UTIL_GetWindowTitle()
{
	return((parseFloat(me.version) >= 0.3709) ? me.windowtitle : null);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function D2JSP_UTIL_CCITT_CalculateTable(ascii_value)
{
	var accumulator = 0;

	ascii_value <<= 8;

	for (var count_1 = 8; count_1 > 0; count_1--) {
		if ((ascii_value ^ accumulator) & 0x8000)
			accumulator = (accumulator << 1) ^ 0x1021;
		else
			accumulator <<= 1;
		ascii_value <<= 1;
	}

	return(accumulator);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
var D2JSP_UTIL_CCITT_Table = new Array(256);
for (count_1 = 0; count_1 < 256; count_1++)
	D2JSP_UTIL_CCITT_Table[count_1] = D2JSP_UTIL_CCITT_CalculateTable(count_1);
delete count_1;
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function D2JSP_UTIL_CCITT_GetForString(ascii_string)
{
	var out_crc = 0;

	for (var count_1 = 0; count_1 < ascii_string.length; count_1++)
		out_crc = (out_crc << 8) ^
			D2JSP_UTIL_CCITT_Table[(out_crc >> 8) ^ ascii_string.charCodeAt(count_1)];

	return(out_crc);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function D2JSP_UTIL_CCITT_GetForArray(ascii_array)
{
	var out_crc = 0;

	for (var count_1 = 0; count_1 < ascii_array.length; count_1++)
		out_crc = (out_crc << 8) ^
			D2JSP_UTIL_CCITT_Table[(out_crc >> 8) ^ ascii_array[count_1]];

	return(out_crc);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function D2JSP_UTIL_PATH_ProgressivePathSort(in_path_list, in_origin)
{
	var out_path_list = new Array();
	var tmp_path_list = D2JSP_UTIL_GEN_CloneObject(in_path_list);
	var curr_origin;

	in_origin   = (in_origin != null) ? in_origin : [me.x, me.y];
	curr_origin = in_origin;

	while (tmp_path_list.length) {
		var nearest_coord_index = -1;
		var nearest_coord       = Number.MAX_VALUE;
		var this_distance;
		var count_1;
		for (count_1 = 0; count_1 < tmp_path_list.length; count_1++) {
			this_distance =
				(Dist(in_origin[0], in_origin[1],
				 tmp_path_list[count_1][0], tmp_path_list[count_1][1]) +
				 Dist(curr_origin[0], curr_origin[1],
				 tmp_path_list[count_1][0], tmp_path_list[count_1][1])) / 2;
			if ((this_distance < nearest_coord) || (!count_1)) {
				nearest_coord       = this_distance;
				nearest_coord_index = count_1;
			}
		}
		curr_origin = tmp_path_list[nearest_coord_index];
		out_path_list.push(tmp_path_list[nearest_coord_index]);
		tmp_path_list.splice(nearest_coord_index, 1);
	}

	return(out_path_list);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function D2JSP_UTIL_PATH_GetNearestCoord(in_path_list, in_origin, tolerance)
{
	var nearest_coord_index = -1;
	var nearest_coord       = Number.MAX_VALUE;
	var this_distance;
	var count_1;

	in_origin = (in_origin != null) ? in_origin : [me.x, me.y];
	tolerance = (D2JSP_UTIL_GEN_TypeOfNumber(tolerance) && (tolerance > 0)) ?
		(tolerance * tolerance) :  null;	// Because we use distance ^ 2;

	for (count_1 = 0; count_1 < in_path_list.length; count_1++) {
		if (((this_distance = Dist2(in_origin[0], in_origin[1],
			in_path_list[count_1][0], in_path_list[count_1][1])) <
			nearest_coord) || (!count_1)) {
			nearest_coord       = this_distance;
			nearest_coord_index = count_1;
			if (tolerance && (this_distance <= tolerance))
				break;
		}
	}

	return(nearest_coord_index);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function D2JSP_UTIL_PATH_PopNearestCoord(in_path_list, in_origin, tolerance)
{
	if (in_path_list.length) {
		var nearest_coord_index =
			D2JSP_UTIL_PATH_GetNearestCoord(in_path_list, in_origin, tolerance);
		var nearest_unit        = in_path_list[nearest_coord_index];
		in_path_list.splice(nearest_coord_index, 1);
		return(nearest_unit);
	}

	return(null);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function D2JSP_UTIL_PATH_DistanceToCoordLength(distance)
{
	return(Math.sqrt(Math.abs(distance * distance) / 2));
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function D2JSP_UTIL_PATH_CoordLengthToDistance(coord_length)
{
	return(Math.sqrt((coord_length * coord_length) * 2));
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function D2JSP_UTIL_GetCallStack()
{
	return(D2JSP_UTIL_GetCallStackInternal());
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function D2JSP_UTIL_GetCallStackInternal()
{
	var call_stack = new Array();
	var caller     = D2JSP_UTIL_GetCallStack.caller;
	var last_func  = null;

	while (caller) {
		var func_name = D2JSP_UTIL_FORMAT_FunctionToName(caller);
//D2JSP_UTIL_LOG_GetALog().logInfo("D2JSP_UTIL_GetCallStackInternal() = " + func_name);
		if (call_stack.length && (last_func == call_stack[call_stack.length - 1]))
			;
		else {
			last_func = func_name;
			call_stack.push(func_name + "()");
		}
		caller = caller.caller;
	}

	return(call_stack);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function D2JSP_UTIL_LogCallStack(log_obj, remove_depth, prefix)
{
	log_obj = D2JSP_UTIL_LOG_SelectALog(log_obj);

	var call_stack = D2JSP_UTIL_GetCallStack();

	call_stack.splice(0, (remove_depth > 0) ? (remove_depth + 1) : 1);

	prefix = (D2JSP_UTIL_GEN_TypeOfStringNotEmpty(prefix)) ? (prefix + ": ") : "";

	while (call_stack.length)
		log_obj.logInfo("CALL STACK TRACE: " + prefix + call_stack.shift());
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function D2JSP_UTIL_FORMAT_OneSpace(in_string)
{
	in_string += "";

	return(in_string.replace(/\s+/g, " "));
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function D2JSP_UTIL_FORMAT_NoSpace(in_string)
{
	in_string += "";

	return(in_string.replace(/\s+/g, ""));
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function D2JSP_UTIL_FORMAT_LowerCase(in_string)
{
	in_string += "";

	return(in_string.toLowerCase());
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function D2JSP_UTIL_FORMAT_UpperCase(in_string)
{
	in_string += "";

	return(in_string.toUpperCase());
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function D2JSP_UTIL_FORMAT_InitCaps(in_string)
{
	in_string += "";
	in_string  = in_string.toLowerCase();

	var string_length = in_string.length;
	var start_index   = 0;
	var out_string    = "";
	var this_index;

	while (start_index < string_length) {
		var this_char = in_string.charAt(start_index);
		if ((!start_index) &&
			("abcdefghijklmnopqrstuvwxyz".indexOf(this_char) > -1))
			out_string += this_char.toUpperCase();
		else if (" \t\r\n\f~`!@#$%^&*()-_+={[}]\"':;<.>./?".
			indexOf(this_char) > -1) {
			out_string += this_char;
			start_index++;
			this_char = in_string.charAt(start_index);
			if ("abcdefghijklmnopqrstuvwxyz".indexOf(this_char) > -1)
				out_string += this_char.toUpperCase();
			else
				out_string += this_char;
		}
		else
			out_string += this_char;
		start_index++;
	}

	return(out_string);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function D2JSP_UTIL_FORMAT_LTrim(in_string)
{
	in_string += "";

	return(in_string.replace(/^\s+/, ""));
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function D2JSP_UTIL_FORMAT_RTrim(in_string)
{
	in_string += "";

	return(in_string.replace(/\s+$/, ""));
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function D2JSP_UTIL_FORMAT_Trim(in_string)
{
	in_string += "";

	return(in_string.replace(/^\s+|\s+$/g, ""));
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function D2JSP_UTIL_FORMAT_LJust(in_string, in_width, fill_char)
{
/*
	var tmp_fill_char;
	var tmp_string;

	tmp_fill_char = ((typeof(fill_char) != "string") || (!fill_char.length)) ?
		" " : fill_char.toString(fill_char.charCodeAt(0, 1));

	if (in_width <= 0)
		return("");
	else {
		tmp_string = D2JSP_UTIL_FORMAT_Trim(in_string + "");
		if (tmp_string.length > in_width)
			return(tmp_string.substr(0, in_width));
		else if (tmp_string.length < in_width) {
			var tmp_array = new Array((in_width - tmp_string.length) + 1);
			return(tmp_string + tmp_array.join(tmp_fill_char));
		}
		return(tmp_string);
	}
*/
	return(D2JSP_UTIL_FORMAT_RPad(D2JSP_UTIL_FORMAT_Trim(in_string),
		in_width, fill_char));
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function D2JSP_UTIL_FORMAT_RJust(in_string, in_width, fill_char)
{
/*
	var tmp_fill_char;
	var tmp_string;

	tmp_fill_char = ((typeof(fill_char) != "string") || (!fill_char.length)) ?
		" " : fill_char.toString(fill_char.charCodeAt(0, 1));

	if (in_width <= 0)
		return("");
	else {
		tmp_string = D2JSP_UTIL_FORMAT_Trim(in_string + "");
		if (tmp_string.length > in_width)
			return(tmp_string.substr(0, in_width));
		else if (tmp_string.length < in_width) {
			var tmp_array = new Array((in_width - tmp_string.length) + 1);
			return(tmp_array.join(tmp_fill_char) + tmp_string);
		}
		return(tmp_string);
	}
*/
	return(D2JSP_UTIL_FORMAT_LPad(D2JSP_UTIL_FORMAT_Trim(in_string),
		in_width, fill_char));
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function D2JSP_UTIL_FORMAT_LPad(in_string, in_width, fill_char)
{
	var tmp_fill_char;
	var tmp_string;

	tmp_fill_char = ((typeof(fill_char) != "string") || (!fill_char.length)) ?
		" " : fill_char.toString(fill_char.charCodeAt(0, 1));

	if (in_width <= 0)
		return("");
	else {
		tmp_string = in_string + "";
		if (tmp_string.length > in_width)
			return(tmp_string.substr(0, in_width));
		else if (tmp_string.length < in_width) {
			var tmp_array = new Array((in_width - tmp_string.length) + 1);
			return(tmp_array.join(tmp_fill_char) + tmp_string);
		}
		return(tmp_string);
	}
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function D2JSP_UTIL_FORMAT_RPad(in_string, in_width, fill_char)
{
	var tmp_fill_char;
	var tmp_string;

	tmp_fill_char = ((typeof(fill_char) != "string") || (!fill_char.length)) ?
		" " : fill_char.toString(fill_char.charCodeAt(0, 1));

	if (in_width <= 0)
		return("");
	else {
		tmp_string = in_string + "";
		if (tmp_string.length > in_width)
			return(tmp_string.substr(0, in_width));
		else if (tmp_string.length < in_width) {
			var tmp_array = new Array((in_width - tmp_string.length) + 1);
			return(tmp_string + tmp_array.join(tmp_fill_char));
		}
		return(tmp_string);
	}
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function D2JSP_UTIL_FORMAT_Center(in_string, in_width, fill_char)
{
	if (in_width <= 0)
		return("");

	in_string = D2JSP_UTIL_FORMAT_Trim(in_string + "");

	if (in_width < in_string.length)
		return(in_string.substr(0, in_width));
	else if (in_width > in_string.length) {
		var pad_length = Math.floor((in_width - in_string.length) / 2)
		if (pad_length)
			in_string = D2JSP_UTIL_FORMAT_LJust(in_string,
				pad_length + in_string.length, fill_char);
		return(D2JSP_UTIL_FORMAT_LPad(in_string, in_width, fill_char));
	}

	return(in_string)
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function D2JSP_UTIL_FORMAT_RepeatString(in_string, in_count)
{
	var out_string = "";

	for (var count_1 = 0; count_1 < in_count; count_1++)
		out_string += in_string;

	return(out_string);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function D2JSP_UTIL_FORMAT_ZeroFill(in_string, in_width)
{
	return(D2JSP_UTIL_FORMAT_RJust(in_string + "", in_width, "0"));
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function D2JSP_UTIL_FORMAT_IsBoolean(in_string)
{
	in_string += "";

	return(((in_string == "0") || (in_string == "1") ||
		(in_string.toLowerCase() == "true") ||
		(in_string.toLowerCase() == "false")) ? true : false);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function D2JSP_UTIL_FORMAT_IsDigit(in_string)
{
	in_string += "";

	return((in_string.match(/^\d+$/)) ? true : false);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function D2JSP_UTIL_FORMAT_IsInteger(in_string)
{
	in_string += "";

	if (D2JSP_UTIL_FORMAT_IsDigit(in_string))
		return(true);
	else if ((in_string.length > 1) && 
		((in_string.charAt(0) == "-") || (in_string.charAt(0) == "+")))
		return(D2JSP_UTIL_FORMAT_IsDigit(in_string.substr(1)));

	return(false);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function D2JSP_UTIL_FORMAT_StringCount(in_string, search_string)
{
	var string_count = 0;
	var current_pos  = 0;

	if (search_string > "") {
		while ((current_pos =
			in_string.indexOf(search_string, current_pos)) > -1) {
			string_count++;
			current_pos++;
		}
	}

	return(string_count);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function D2JSP_UTIL_FORMAT_FindFirst(in_string, search_list)
{
	var found_index = Number.MAX_VALUE;
	var count_1;
	var this_index;

	for (count_1 = 0; count_1 < search_list.length; count_1++) {
		if (((this_index = in_string.indexOf(search_list[count_1])) > -1) &&
			(this_index < found_index))
			found_index = this_index;
	}

	return((found_index == Number.MAX_VALUE) ? -1 : found_index);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function D2JSP_UTIL_FORMAT_GetUserRealm()
{
	return((me.account && (me.account != "")) ? me.realm : "#SP#");
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function D2JSP_UTIL_FORMAT_GetUserAccount()
{
	return((me.account && (me.account != "")) ?
		me.account.replace(/#\d.*$/, "") : "#SP#");
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function D2JSP_UTIL_FORMAT_GetUserDottedString()
{
	return(D2JSP_UTIL_FORMAT_GetUserRealm() + "." +
		D2JSP_UTIL_FORMAT_GetUserAccount() + "." + me.name);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function D2JSP_UTIL_FORMAT_GetUserDottedStringFixed()
{
	var tmp_string = D2JSP_UTIL_FORMAT_GetUserDottedString();

	return(tmp_string.replace(/[^A-Za-z0-9_\.]/ig, "_"));
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function D2JSP_UTIL_FORMAT_FunctionToName(in_func)
{
	var func_name = null;

	if (in_func == null)
		func_name = null;
	else if (D2JSP_UTIL_GEN_TypeOfFunction(in_func)) {
		func_name = D2JSP_UTIL_FORMAT_Trim(
			D2JSP_UTIL_FORMAT_OneSpace(in_func + ""));
		func_name = D2JSP_UTIL_FORMAT_Trim(func_name.substr(8));
		func_name = D2JSP_UTIL_FORMAT_Trim(
			func_name.substr(0, func_name.indexOf("(")));
	}
	else if (D2JSP_UTIL_GEN_TypeOfString(in_func))
		func_name = in_func;
	else if (D2JSP_UTIL_GEN_TypeOfObject(in_func) &&
		("constructor" in in_func))
		func_name = D2JSP_UTIL_FORMAT_FunctionToName(in_func.constructor);

	return(func_name);		
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function D2JSP_UTIL_DATE_ToSmallDate(in_date)
{
	var string_date;

	in_date = ((!arguments.length) || (typeof(in_date) != "object")) ?
		(new Date()) : in_date;

	string_date = in_date.toString();

	return(
		D2JSP_UTIL_FORMAT_ZeroFill(in_date.getFullYear(),     4) + "-" +
		D2JSP_UTIL_FORMAT_ZeroFill(in_date.getMonth() + 1,    2) + "-" +
		D2JSP_UTIL_FORMAT_ZeroFill(in_date.getDate(),         2) + " " +
		D2JSP_UTIL_FORMAT_ZeroFill(in_date.getHours(),        2) + ":" +
		D2JSP_UTIL_FORMAT_ZeroFill(in_date.getMinutes(),      2) + ":" +
		D2JSP_UTIL_FORMAT_ZeroFill(in_date.getSeconds(),      2) + "." +
		D2JSP_UTIL_FORMAT_ZeroFill(in_date.getMilliseconds(), 3)
	);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function D2JSP_UTIL_DATE_ToSmallDateSimple(in_date)
{
	var string_date;

	in_date = ((!arguments.length) || (typeof(in_date) != "object")) ?
		(new Date()) : in_date;

	string_date = in_date.toString();

	return(
		D2JSP_UTIL_FORMAT_ZeroFill(in_date.getFullYear(),     4) +
		D2JSP_UTIL_FORMAT_ZeroFill(in_date.getMonth() + 1,    2) +
		D2JSP_UTIL_FORMAT_ZeroFill(in_date.getDate(),         2) + "." +
		D2JSP_UTIL_FORMAT_ZeroFill(in_date.getHours(),        2) +
		D2JSP_UTIL_FORMAT_ZeroFill(in_date.getMinutes(),      2) +
		D2JSP_UTIL_FORMAT_ZeroFill(in_date.getSeconds(),      2) + "." +
		D2JSP_UTIL_FORMAT_ZeroFill(in_date.getMilliseconds(), 3)
	);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function D2JSP_UTIL_POT_FixPotionType(potion_type)
{
	return(((potion_type != undefined) &&
		("AHMRST".indexOf(potion_type.toUpperCase()) > -1)) ?
		potion_type.toUpperCase() : "H");
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function D2JSP_UTIL_POT_FindPotion(potion_type, belt_only_flag, escalate_flag)
{
	var search_list;
	var count_1;
	var count_2;
	var this_pot;
	var escalate_type;

	potion_type = D2JSP_UTIL_POT_FixPotionType(potion_type);
	search_list = D2JSP_UTIL_POT_PotionSearchList[potion_type];

	for (count_1 = 0; count_1 < search_list.length; count_1++) {
		// We usually try to find the pot in inventory first because the belt
		// has fast access in an emergency. Also, it's easier to feed mercenaries
		// from the belt.
		for (count_2 = ((!belt_only_flag) ? 0 : 1);
			count_2 < D2JSP_UTIL_POT_PotionSearchModes.length; count_2++) {
			this_pot = getUnit(D2JSP_UTIL_GETUNIT_ITEM, search_list[count_1],
				D2JSP_UTIL_POT_PotionSearchModes[count_2]);
			if (this_pot) {
				if (count_2)
					return(this_pot);
				do {
					if (this_pot.itemloc == D2JSP_ITEMLOC_INVENTORY)
						return(this_pot);
				} while (this_pot && this_pot.getNext(search_list[count_1],
					D2JSP_UTIL_POT_PotionSearchModes[count_2]));
			}
		}
	}

	// We escalate healing and mana potions to rejuvenation potions.
	// In turn, rejuvenation potions are escalated to healing potions.
	if (escalate_flag && ((escalate_type = "HMR".indexOf(potion_type)) > -1))
		return(D2JSP_UTIL_POT_FindPotion((escalate_type != 2) ? "R" : "H",
			belt_only_flag, false));
	else
		return(null);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function D2JSP_UTIL_POT_DrinkPotionMe(potion_type, escalate_flag)
{
	return(D2JSP_UTIL_POT_DrinkPotion(false, potion_type, escalate_flag));
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function D2JSP_UTIL_POT_DrinkPotionMerc(potion_type, escalate_flag)
{
	return(D2JSP_UTIL_POT_DrinkPotion(true, potion_type, escalate_flag));
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function D2JSP_UTIL_POT_DrinkPotion(to_merc_flag, potion_type, escalate_flag)
{
	var pot_code = null;
	var pot_name;
	var this_pot;

	potion_type = D2JSP_UTIL_POT_FixPotionType(potion_type);

	// Can't really feed mana or stamina potions to mercs...
	if (to_merc_flag && ((potion_type == "M") || (potion_type == "S")))
		pot_code = (potion_type == "M") ? "mp5" : "vps";// SURRRRE, we did...
	else if ((this_pot = D2JSP_UTIL_POT_FindPotion(potion_type, to_merc_flag,
		escalate_flag))) {
		pot_code = this_pot.code;
		pot_name = this_pot.name;
		clickItem((to_merc_flag) ? D2JSP_ITEM_CLICK_BUTTON_RIGHT_SHIFT :
			D2JSP_ITEM_CLICK_BUTTON_RIGHT, this_pot);
		D2JSP_UTIL_LOG_GetALog().logDetail(((to_merc_flag) ? "Gave mercenary a " :
			"Drank a ") + D2JSP_UTIL_POT_PotionNameList[potion_type] +
			" potion (item code " + pot_code + ", item name " + pot_name + ").");
	}
	else
		D2JSP_UTIL_LOG_GetALog().logWarning("Attempt to locate a " +
			D2JSP_UTIL_POT_PotionNameList[potion_type] + " potion for my" +
			((to_merc_flag) ? " mercenary" : "self") + " failed.");

	return(pot_code);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function D2JSP_UTIL_POT_DrinkPotionTimedMe(last_time, no_drink_ms,
	potion_type, escalate_flag)
{
	return(D2JSP_UTIL_POT_DrinkPotionTimed(last_time, no_drink_ms, false,
		potion_type, escalate_flag));
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function D2JSP_UTIL_POT_DrinkPotionTimedMerc(last_time, no_drink_ms,
	potion_type, escalate_flag)
{
	return(D2JSP_UTIL_POT_DrinkPotionTimed(last_time, no_drink_ms, true,
		potion_type, escalate_flag));
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function D2JSP_UTIL_POT_DrinkPotionTimed(last_time, no_drink_ms, to_merc_flag,
	potion_type, escalate_flag)
{
	var pot_code;

	if (last_time instanceof Date) {
		no_drink_ms = ((typeof(no_drink_ms) == undefined) || (!no_drink_ms)) ?
			1000 : no_drink_ms;
		if (new Date(last_time.valueOf() + no_drink_ms) > (new Date().valueOf()))
			return([last_time, null]);
	}

	return(((pot_code = D2JSP_UTIL_POT_DrinkPotion(to_merc_flag, potion_type,
		escalate_flag)) != null) ? [(new Date()), pot_code] : null);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
// ////////////////////////////////////////////////////////////////////////////
// The D2JSP_UTIL_Log object constructor...
// ////////////////////////////////////////////////////////////////////////////
function D2JSP_UTIL_Log(file_name, lead_text, level_file, level_screen,
	no_log_screen, no_append_flag)
{
	var log_date = new Date();

	// //////////////////////////////////////////////////////////////////////
	// //////////////////////////////////////////////////////////////////////
	// Fix parameters...
	// //////////////////////////////////////////////////////////////////////
	file_name      = (!arguments.length || (typeof(file_name) != "string")) ?
		"" : file_name;
  lead_text       = ((arguments.length < 2) || (typeof(lead_text) != "string")||
		(lead_text == "")) ? "D2JSP" : D2JSP_UTIL_FORMAT_Trim(lead_text);
	level_file     = ((typeof(level_file) != "number") || (level_file < 0) ||
		(level_file > D2JSP_UTIL_LOG_Level_HOSTILE)) ?
		D2JSP_UTIL_LOG_Level_DETAIL : level_file;
	level_screen   = ((typeof(level_screen) != "number") || (level_screen < 0) ||
		(level_screen > D2JSP_UTIL_LOG_Level_HOSTILE)) ?
		D2JSP_UTIL_LOG_Level_INFO : level_screen;
	level_file     = (level_file >= level_screen) ? level_file : level_screen;
	no_log_screen  = (no_log_screen) ? true : false;
	no_append_flag = (no_append_flag) ? true : false;
	// //////////////////////////////////////////////////////////////////////

	// //////////////////////////////////////////////////////////////////////
	// //////////////////////////////////////////////////////////////////////
	// Object data.
	// //////////////////////////////////////////////////////////////////////
	this.file_name        = new String(file_name);
	this.lead_text        = new String(lead_text);
	this.level_file       = level_file;
	this.level_screen     = level_screen;
	this.file_handle      = null;
	this.log_screen       = (no_log_screen) ? false : true;
	this.no_append_flag   = no_append_flag;
	this.synchronous_mode = false;
	this.reg_key          = D2JSP_UTIL_FORMAT_ZeroFill(log_date.valueOf(), 16) +
		" " + this.file_name;
	// //////////////////////////////////////////////////////////////////////

	// //////////////////////////////////////////////////////////////////////
	// //////////////////////////////////////////////////////////////////////
	// Object methods.
	// //////////////////////////////////////////////////////////////////////
	this.logMinutiae     = D2JSP_UTIL_LOG_logMinutiae;
	this.logDebug        = D2JSP_UTIL_LOG_logDebug;
	this.logDetail       = D2JSP_UTIL_LOG_logDetail;
	this.logInfo         = D2JSP_UTIL_LOG_logInfo;
	this.logInfoQuiet    = D2JSP_UTIL_LOG_logInfoQuiet;
	this.logPickup       = D2JSP_UTIL_LOG_logPickup;
	this.logEvaluate     = D2JSP_UTIL_LOG_logEvaluate;
	this.logDiscard      = D2JSP_UTIL_LOG_logDiscard;
	this.logKeep         = D2JSP_UTIL_LOG_logKeep;
	this.logWarning      = D2JSP_UTIL_LOG_logWarning;
	this.logWarningColor = D2JSP_UTIL_LOG_logWarningColor;
	this.logError        = D2JSP_UTIL_LOG_logError;
	this.logErrorColor   = D2JSP_UTIL_LOG_logErrorColor;
	this.logFatal        = D2JSP_UTIL_LOG_logFatal;
	this.logChicken      = D2JSP_UTIL_LOG_logChicken;
	this.logHostile      = D2JSP_UTIL_LOG_logHostile;
	this.logAny          = D2JSP_UTIL_LOG_logAny;
	this.writeLine       = D2JSP_UTIL_LOG_writeLine;
	this.closeLog        = D2JSP_UTIL_LOG_closeLog;
	this.flushLog        = D2JSP_UTIL_LOG_flushLog;
	this.doSyncMode      = D2JSP_UTIL_LOG_doSyncMode;
	this.syncModeOff     = D2JSP_UTIL_LOG_syncModeOff;
	this.syncModeOn      = D2JSP_UTIL_LOG_syncModeOn;
	this.setSyncMode     = D2JSP_UTIL_LOG_setSyncMode;
	this.screenOff       = D2JSP_UTIL_LOG_screenOff;
	this.screenOn        = D2JSP_UTIL_LOG_screenOn;
	this.emitSep         = D2JSP_UTIL_LOG_emitSep;
	this.emitComment     = D2JSP_UTIL_LOG_emitComment;
	this.getLevelFile    = D2JSP_UTIL_LOG_getLevelFile;
	this.getLevelScreen  = D2JSP_UTIL_LOG_getLevelScreen;
	this.setLevelFile    = D2JSP_UTIL_LOG_setLevelFile;
	this.setLevelScreen  = D2JSP_UTIL_LOG_setLevelScreen;
	this.toString        = D2JSP_UTIL_LOG_toString;
	// //////////////////////////////////////////////////////////////////////

	// //////////////////////////////////////////////////////////////////////
	// //////////////////////////////////////////////////////////////////////
	// Open the log file, if one was specified...
	// //////////////////////////////////////////////////////////////////////
	if (file_name != "") {
		if ((this.file_handle = fileOpen(this.file_name,
			(this.no_append_flag) ? 1 : 2)) != null) {
			this.emitSep();
			this.emitSep();
			this.emitComment("Log Output Started " + log_date.toString());
			this.emitSep();
			D2JSP_UTIL_LOG_RegistrationList[this.reg_key] = this;
		}
		// Wait one millisecond to ensure log registration keys have different
		// timestamps...
		delay(1);
	}
	// //////////////////////////////////////////////////////////////////////

	// //////////////////////////////////////////////////////////////////////
	// //////////////////////////////////////////////////////////////////////
	// Method implementations...
	// //////////////////////////////////////////////////////////////////////
	function D2JSP_UTIL_LOG_logMinutiae(debug_message, debug_time)
	{
		this.logAny(debug_message, D2JSP_UTIL_LOG_Level_MINUTIAE,
			debug_time);
	}
	// //////////////////////////////////////////////////////////////////////
	function D2JSP_UTIL_LOG_logDebug(debug_message, debug_time)
	{
		this.logAny(debug_message, D2JSP_UTIL_LOG_Level_DEBUG,
			debug_time);
	}
	// //////////////////////////////////////////////////////////////////////
	function D2JSP_UTIL_LOG_logDetail(debug_message, debug_time)
	{
		this.logAny(debug_message, D2JSP_UTIL_LOG_Level_DETAIL,
			debug_time);
	}
	// //////////////////////////////////////////////////////////////////////
	function D2JSP_UTIL_LOG_logInfo(debug_message, debug_time)
	{
		this.logAny(debug_message, D2JSP_UTIL_LOG_Level_INFO,
			debug_time);
	}
	// //////////////////////////////////////////////////////////////////////
	function D2JSP_UTIL_LOG_logInfoQuiet(debug_message, debug_time)
	{
		var old_screen_state = this.screenOff();

		this.logAny(debug_message, D2JSP_UTIL_LOG_Level_INFO,
			debug_time);

		if (old_screen_state)
			this.screenOn();
	}
	// //////////////////////////////////////////////////////////////////////
	function D2JSP_UTIL_LOG_logPickup(debug_message, debug_time)
	{
		this.logAny(debug_message, D2JSP_UTIL_LOG_Level_PICKUP,
			debug_time);
	}
	// //////////////////////////////////////////////////////////////////////
	function D2JSP_UTIL_LOG_logEvaluate(debug_message, debug_time)
	{
		this.logAny(debug_message, D2JSP_UTIL_LOG_Level_EVALUATE,
			debug_time);
	}
	// //////////////////////////////////////////////////////////////////////
	function D2JSP_UTIL_LOG_logDiscard(debug_message, debug_time)
	{
		this.logAny(debug_message, D2JSP_UTIL_LOG_Level_DISCARD,
			debug_time);
	}
	// //////////////////////////////////////////////////////////////////////
	function D2JSP_UTIL_LOG_logKeep(debug_message, debug_time)
	{
		this.logAny(debug_message, D2JSP_UTIL_LOG_Level_KEEP,
			debug_time);
	}
	// //////////////////////////////////////////////////////////////////////
	function D2JSP_UTIL_LOG_logWarning(debug_message, debug_time)
	{
		this.logAny(debug_message, D2JSP_UTIL_LOG_Level_WARNING,
			debug_time);
	}
	// //////////////////////////////////////////////////////////////////////
	function D2JSP_UTIL_LOG_logWarningColor(debug_message, debug_time)
	{
		if (!D2JSP_UTIL_GEN_TypeOfArrayIndexed(debug_message))
			this.logWarning(D2JSP_UTIL_COLOR_YELLOW + debug_message, debug_time);
		else {
			debug_time = (debug_time instanceof Date) ? debug_time : (new Date());
			for (var count_1 = 0; count_1 < debug_message.length; count_1++)
				this.logWarning(D2JSP_UTIL_COLOR_YELLOW + debug_message[count_1],
					debug_time);
		}
	}
	// //////////////////////////////////////////////////////////////////////
	function D2JSP_UTIL_LOG_logError(debug_message, debug_time)
	{
		this.logAny(debug_message, D2JSP_UTIL_LOG_Level_ERROR,
			debug_time);
	}
	// //////////////////////////////////////////////////////////////////////
	function D2JSP_UTIL_LOG_logErrorColor(debug_message, debug_time)
	{
		if (!D2JSP_UTIL_GEN_TypeOfArrayIndexed(debug_message))
			this.logError(D2JSP_UTIL_COLOR_RED + debug_message, debug_time);
		else {
			debug_time = (debug_time instanceof Date) ? debug_time : (new Date());
			for (var count_1 = 0; count_1 < debug_message.length; count_1++)
				this.logError(D2JSP_UTIL_COLOR_RED + debug_message[count_1],
					debug_time);
		}
	}
	// //////////////////////////////////////////////////////////////////////
	function D2JSP_UTIL_LOG_logFatal(debug_message, debug_time)
	{
		this.logAny(debug_message, D2JSP_UTIL_LOG_Level_FATAL,
			debug_time);
	}
	// //////////////////////////////////////////////////////////////////////
	function D2JSP_UTIL_LOG_logChicken(debug_message, debug_time)
	{
		this.logAny(debug_message, D2JSP_UTIL_LOG_Level_CHICKEN,
			debug_time);
	}
	// //////////////////////////////////////////////////////////////////////
	function D2JSP_UTIL_LOG_logHostile(debug_message, debug_time)
	{
		this.logAny(debug_message, D2JSP_UTIL_LOG_Level_HOSTILE,
			debug_time);
	}
	// //////////////////////////////////////////////////////////////////////
	function D2JSP_UTIL_LOG_logAny(in_debug_message, debug_level, debug_time)
	{
		var count_1;
		var log_time;
		var log_level;
		var debug_message;
		var file_message;

		if ((!D2JSP_UTIL_GEN_TypeOfString(in_debug_message)) &&
			D2JSP_UTIL_GEN_TypeOfArrayIndexed(in_debug_message)) {
			log_level = ((arguments.length < 2) ||
				(D2JSP_UTIL_LOG_LevelList[debug_level] == null)) ?
				D2JSP_UTIL_LOG_Level_INFO : debug_level;
			if ((log_level >= this.level_file) ||
				((log_level >= this.level_screen) && this.log_screen)) {
				log_time = ((arguments.length < 3) ||
					(!(debug_time instanceof Date))) ? new Date() : debug_time;
				for (count_1 = 0; count_1 < in_debug_message.length; count_1++)
					this.logAny(in_debug_message[count_1], debug_level,
						debug_time);
			}
		}
		else {
			debug_message = in_debug_message + "";
			if (this.file_handle != null) {
				if (this.level_screen < this.level_file)
					this.level_file = this.level_screen;
				log_level = ((arguments.length < 2) ||
					(D2JSP_UTIL_LOG_LevelList[debug_level] == null)) ?
					D2JSP_UTIL_LOG_Level_INFO : debug_level;
				if (log_level >= this.level_file) {
					log_time = ((arguments.length < 3) ||
						(!(debug_time instanceof Date))) ? new Date() : debug_time;
					file_message = debug_message.replace(/\xff+(c\d)/g, "");
					this.file_handle.writeLine(D2JSP_UTIL_DATE_ToSmallDate(log_time)+
						" " + D2JSP_UTIL_LOG_LevelList[log_level] + " " +
						this.lead_text + " " + file_message);
					this.doSyncMode();
				}
				if ((log_level >= this.level_screen) && this.log_screen)
					print(debug_message);
			}
			else if (this.log_screen) {
				log_level = ((arguments.length < 2) ||
					(D2JSP_UTIL_LOG_LevelList[debug_level] == null)) ?
					D2JSP_UTIL_LOG_Level_INFO : debug_level;
				if (log_level >= this.level_screen)
					print(debug_message);
			}
		}
	}
	// //////////////////////////////////////////////////////////////////////
	function D2JSP_UTIL_LOG_writeLine(in_debug_message)
	{
		if ((!D2JSP_UTIL_GEN_TypeOfString(in_debug_message)) &&
			D2JSP_UTIL_GEN_TypeOfArrayIndexed(in_debug_message)) {
			for (var count_1 = 0; count_1 < in_debug_message.length; count_1++)
				this.writeLine(in_debug_message[count_1]);
		}
		else {
			var debug_message = in_debug_message + "";
			var file_message  = debug_message.replace(/\xff+(c\d)/g, "");
			this.file_handle.writeLine(file_message);
			this.doSyncMode();
		}
	}
	// //////////////////////////////////////////////////////////////////////
	function D2JSP_UTIL_LOG_closeLog()
	{
		var log_date = new Date();

		if (this.file_handle != null) {
			this.emitSep();
			this.emitComment("Log Output Stopped " + log_date.toString());
			this.emitSep();
			this.emitSep();
			this.file_handle.writeLine("");
			this.file_handle.close();
			this.file_handle = null;
			delete D2JSP_UTIL_LOG_RegistrationList[this.reg_key];
		}
	}
	// //////////////////////////////////////////////////////////////////////
	function D2JSP_UTIL_LOG_flushLog()
	{
/*
	CODE NOTE: For use in cores before 0.31.
		if (this.file_name != "") {
			if (this.file_handle != null)
				this.file_handle.close();
			this.file_handle = fileOpen(this.file_name, 2);
		}
*/
		if ((this.file_name != "") && (this.file_handle != null))
			this.file_handle.flush();
	}
	// //////////////////////////////////////////////////////////////////////
	function D2JSP_UTIL_LOG_doSyncMode()
	{
		if (this.synchronous_mode)
			this.flushLog();
	}
	// //////////////////////////////////////////////////////////////////////
	function D2JSP_UTIL_LOG_syncModeOff()
	{
/*
		var old_state = this.synchronous_mode;

		this.synchronous_mode = false;

		return(old_state);
*/
		return(this.setSyncMode(false));
	}
	// //////////////////////////////////////////////////////////////////////
	function D2JSP_UTIL_LOG_syncModeOn()
	{
/*
		var old_state = this.synchronous_mode;

		this.synchronous_mode = true;

		return(old_state);
*/
		return(this.setSyncMode(true));
	}
	// //////////////////////////////////////////////////////////////////////
	function D2JSP_UTIL_LOG_setSyncMode(sync_mode)
	{
		var old_state = this.synchronous_mode;

		this.synchronous_mode = (sync_mode) ? true : false;

		return(old_state);
	}
	// //////////////////////////////////////////////////////////////////////
	function D2JSP_UTIL_LOG_screenOff()
	{
		var old_state = this.log_screen;

		this.log_screen = false;

		return(old_state);
	}
	// //////////////////////////////////////////////////////////////////////
	function D2JSP_UTIL_LOG_screenOn()
	{
		var old_state = this.log_screen;

		this.log_screen = true;

		return(old_state);
	}
	// //////////////////////////////////////////////////////////////////////
	function D2JSP_UTIL_LOG_emitSep(fill_char)
	{
		var tmp_char;

		tmp_char = ((arguments.length < 1) || (typeof(fill_char) != "string") ||
			(fill_char == "")) ? "/" :
			fill_char.toString(fill_char.charCodeAt(0, 1));
	
		if (this.file_handle != null) {
			this.file_handle.writeLine(
				D2JSP_UTIL_FORMAT_RJust("", 4 + 1 + 2 + 1 + 2, tmp_char) + " " +
				D2JSP_UTIL_FORMAT_RJust("", 2 + 1 + 2 + 1 + 2 + 1 + 3, tmp_char) +
				" "+ D2JSP_UTIL_FORMAT_RJust("", D2JSP_UTIL_LOG_LevelList[0].length,
				tmp_char) + " " +
				D2JSP_UTIL_FORMAT_RJust("", this.lead_text.length, tmp_char) +
				" " + D2JSP_UTIL_FORMAT_RJust("", 75, tmp_char));
			this.doSyncMode();
		}
	}
	// //////////////////////////////////////////////////////////////////////
	function D2JSP_UTIL_LOG_emitComment(in_comment)
	{
		in_comment = ((!arguments.length) || (typeof(in_comment) != "string")) ?
			"" : in_comment;
	
		if (this.file_handle != null) {
			this.file_handle.writeLine(
				D2JSP_UTIL_FORMAT_RJust("", 4 + 1 + 2 + 1 + 2, " ") + " " +
				D2JSP_UTIL_FORMAT_RJust("", 2 + 1 + 2 + 1 + 2 + 1 + 3, " ") + " "+
				D2JSP_UTIL_FORMAT_RJust("",
				D2JSP_UTIL_LOG_LevelList[0].length, " ") + " " +
				D2JSP_UTIL_FORMAT_RJust("", this.lead_text.length, " ") + " " +
				"// " + in_comment);
			this.doSyncMode();
		}
	}
	// //////////////////////////////////////////////////////////////////////
	function D2JSP_UTIL_LOG_getLevelFile()
	{
		return(this.level_file);
	}
	// //////////////////////////////////////////////////////////////////////
	function D2JSP_UTIL_LOG_getLevelScreen()
	{
		return(this.level_screen);
	}
	// //////////////////////////////////////////////////////////////////////
	function D2JSP_UTIL_LOG_setLevelFile(new_level)
	{
		var old_level;

		old_level       = this.level_file;
		this.level_file = ((new_level >= 0) &&
			(new_level <= D2JSP_UTIL_LOG_Level_HOSTILE)) ? new_level : old_level;
	
		return(old_level);
	}
	// //////////////////////////////////////////////////////////////////////
	function D2JSP_UTIL_LOG_setLevelScreen(new_level)
	{
		var old_level;
	
		old_level         = this.level_screen;
		this.level_screen = ((new_level >= 0) &&
			(new_level <= D2JSP_UTIL_LOG_Level_HOSTILE)) ? new_level : old_level;
	
		return(old_level);
	}
	// //////////////////////////////////////////////////////////////////////
	function D2JSP_UTIL_LOG_toString()
	{
		return("D2JSP Log File '" + this.file_name + "' current state = " +
			((this.file_handle != null) ? "OPEN" : "CLOSED"));
	}
	// //////////////////////////////////////////////////////////////////////
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function D2JSP_UTIL_LogMinutiae(debug_message, debug_time, log_obj)
{
	D2JSP_UTIL_LOG_SelectALog(log_obj).logAny(debug_message,
		D2JSP_UTIL_LOG_Level_MINUTIAE, debug_time);
}
// //////////////////////////////////////////////////////////////////////
function D2JSP_UTIL_LogDebug(debug_message, debug_time, log_obj)
{
	D2JSP_UTIL_LOG_SelectALog(log_obj).logAny(debug_message,
		D2JSP_UTIL_LOG_Level_DEBUG, debug_time);
}
// //////////////////////////////////////////////////////////////////////
function D2JSP_UTIL_LogDetail(debug_message, debug_time, log_obj)
{
	D2JSP_UTIL_LOG_SelectALog(log_obj).logAny(debug_message,
		D2JSP_UTIL_LOG_Level_DETAIL, debug_time);
}
// //////////////////////////////////////////////////////////////////////
function D2JSP_UTIL_LogInfo(debug_message, debug_time, log_obj)
{
	D2JSP_UTIL_LOG_SelectALog(log_obj).logAny(debug_message,
		D2JSP_UTIL_LOG_Level_INFO, debug_time);
}
// //////////////////////////////////////////////////////////////////////
function D2JSP_UTIL_LogInfoQuiet(debug_message, debug_time, log_obj)
{
	D2JSP_UTIL_LOG_SelectALog(log_obj).logInfoQuiet(debug_message, debug_time);
}
	// //////////////////////////////////////////////////////////////////////
function D2JSP_UTIL_LogPickup(debug_message, debug_time, log_obj)
{
	D2JSP_UTIL_LOG_SelectALog(log_obj).logAny(debug_message,
		D2JSP_UTIL_LOG_Level_PICKUP, debug_time);
}
// //////////////////////////////////////////////////////////////////////
function D2JSP_UTIL_LogEvaluate(debug_message, debug_time, log_obj)
{
	D2JSP_UTIL_LOG_SelectALog(log_obj).logAny(debug_message,
		D2JSP_UTIL_LOG_Level_EVALUATE, debug_time);
}
// //////////////////////////////////////////////////////////////////////
function D2JSP_UTIL_LogDiscard(debug_message, debug_time, log_obj)
{
	D2JSP_UTIL_LOG_SelectALog(log_obj).logAny(debug_message,
		D2JSP_UTIL_LOG_Level_DISCARD, debug_time);
}
// //////////////////////////////////////////////////////////////////////
function D2JSP_UTIL_LogKeep(debug_message, debug_time, log_obj)
{
	D2JSP_UTIL_LOG_SelectALog(log_obj).logAny(debug_message,
		D2JSP_UTIL_LOG_Level_KEEP, debug_time);
}
// //////////////////////////////////////////////////////////////////////
function D2JSP_UTIL_LogWarning(debug_message, debug_time, log_obj)
{
	D2JSP_UTIL_LOG_SelectALog(log_obj).logAny(debug_message,
		D2JSP_UTIL_LOG_Level_WARNING, debug_time);
}
// //////////////////////////////////////////////////////////////////////
function D2JSP_UTIL_LogWarningColor(debug_message, debug_time, log_obj)
{
	D2JSP_UTIL_LOG_SelectALog(log_obj).logWarningColor(debug_message,
		debug_time);
}
// //////////////////////////////////////////////////////////////////////
function D2JSP_UTIL_LogError(debug_message, debug_time, log_obj)
{
	D2JSP_UTIL_LOG_SelectALog(log_obj).logAny(debug_message,
		D2JSP_UTIL_LOG_Level_ERROR, debug_time);
}
// //////////////////////////////////////////////////////////////////////
function D2JSP_UTIL_LogErrorColor(debug_message, debug_time, log_obj)
{
	D2JSP_UTIL_LOG_SelectALog(log_obj).logErrorColor(debug_message,
		debug_time);
}
// //////////////////////////////////////////////////////////////////////
function D2JSP_UTIL_LogFatal(debug_message, debug_time, log_obj)
{
	D2JSP_UTIL_LOG_SelectALog(log_obj).logAny(debug_message,
		D2JSP_UTIL_LOG_Level_FATAL, debug_time);
}
// //////////////////////////////////////////////////////////////////////
function D2JSP_UTIL_LogChicken(debug_message, debug_time, log_obj)
{
	D2JSP_UTIL_LOG_SelectALog(log_obj).logAny(debug_message,
		D2JSP_UTIL_LOG_Level_CHICKEN, debug_time);
}
// //////////////////////////////////////////////////////////////////////
function D2JSP_UTIL_LogHostile(debug_message, debug_time, log_obj)
{
	D2JSP_UTIL_LOG_SelectALog(log_obj).logAny(debug_message,
		D2JSP_UTIL_LOG_Level_HOSTILE, debug_time);
}
// //////////////////////////////////////////////////////////////////////
function D2JSP_UTIL_LogAny(debug_message, debug_level, debug_time, log_obj)
{
	D2JSP_UTIL_LOG_SelectALog(log_obj).logAny(debug_message, debug_level,
		debug_time);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
// All logs are registered with a singleton. This function retrieves from that
// singleton a handle to the most-recently registered log object which is still
// open (if one exists).
// ////////////////////////////////////////////////////////////////////////////
function D2JSP_UTIL_LOG_GetLastLog()
{
	var last_log     = null;
	var last_log_key = "";
	var this_prop;

	for (this_prop in D2JSP_UTIL_LOG_RegistrationList) {
		if (this_prop > last_log_key) {
			last_log_key = this_prop;
			last_log     = D2JSP_UTIL_LOG_RegistrationList[this_prop];
		}
	}

	return(last_log);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
// All logs are registered with a singleton. This function retrieves from that
// singleton a handle to the most-recently registered log object if one exists.
// If one does not, it constructs a default log object which logs only to the
// screen.
// ////////////////////////////////////////////////////////////////////////////
function D2JSP_UTIL_LOG_GetALog()
{
	var out_log;

	return(((out_log = D2JSP_UTIL_LOG_GetLastLog()) != null) ? out_log :
		(new D2JSP_UTIL_Log()));
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function D2JSP_UTIL_LOG_SelectALog(log_obj)
{
	return((log_obj instanceof D2JSP_UTIL_Log) ? log_obj :
		D2JSP_UTIL_LOG_GetALog());
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function D2JSP_UTIL_GEN_Wait(iter_count, iter_time)
{
	D2JSP_UTIL_GEN_WaitForTrue(iter_count, iter_time, "false");
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function D2JSP_UTIL_GEN_WaitForTrue(iter_count, iter_time, cond_func,
	cond_param)
{
	return(D2JSP_UTIL_GEN_WaitForBooleanAction(true, iter_count, iter_time,
		cond_func, cond_param));
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function D2JSP_UTIL_GEN_WaitForFalse(iter_count, iter_time, cond_func,
	cond_param)
{
	return(D2JSP_UTIL_GEN_WaitForBooleanAction(false, iter_count, iter_time,
		cond_func, cond_param));
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function D2JSP_UTIL_GEN_WaitForTrueAction(iter_count, iter_time, cond_func,
	cond_param, action_func, action_param)
{
	return(D2JSP_UTIL_GEN_WaitForBooleanAction(true, iter_count, iter_time,
		cond_func, cond_param, action_func, action_param));
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function D2JSP_UTIL_GEN_WaitForFalseAction(iter_count, iter_time, cond_func,
	cond_param, action_func, action_param)
{
	return(D2JSP_UTIL_GEN_WaitForBooleanAction(false, iter_count, iter_time,
		cond_func, cond_param, action_func, action_param));
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function D2JSP_UTIL_GEN_WaitForBooleanAction(wait_bool, iter_count, iter_time,
	cond_func, cond_param, action_func, action_param)
{
	var return_code = false;
	var this_iter;
	var other_bool;

	wait_bool  = (wait_bool) ? true : false;
	other_bool = (wait_bool) ? true : false;
	iter_count = (iter_count >= 0) ? iter_count : 1;
	iter_time  = (iter_time  > 1) ? iter_time  : 10;
	this_iter  = 0;

	if (typeof(cond_func) == "function") {
		while ((!iter_count) || (this_iter < iter_count)) {
			if (((cond_func(cond_param)) ? true : false) == other_bool) {
				return_code = true;
				break;
			}
			delay(iter_time);
			this_iter++;
		}
	}
	else if (typeof(cond_func) == "string") {
		while ((!iter_count) || (this_iter < iter_count)) {
			if (((eval(cond_func)) ? true : false) == other_bool) {
				return_code = true;
				break;
			}
			delay(iter_time);
			this_iter++;
		}
	}
	else
		return(D2JSP_UTIL_GEN_WaitForBooleanAction(wait_bool, iter_count,
			iter_time, "\"" + cond_func + "\"", cond_param, action_func,
			action_param));

	if (typeof(action_func) == "function")
		action_func(wait_bool, return_code, action_param);
	else if (typeof(action_func) == "string")
		eval(action_func);

	return(return_code);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function D2JSP_UTIL_CTX_Context(context_name, basic_list, default_list,
	config_list, log_obj)
{
	// //////////////////////////////////////////////////////////////////////
	// The name of the context...
	this.__NAME__  = (D2JSP_UTIL_GEN_TypeOfStringNotEmpty(context_name)) ?
		context_name : "TDW Bot Configuration";
	// For the pushing/popping of properties...
	this.__STACK__ = new Array();
	// //////////////////////////////////////////////////////////////////////

	log_obj = D2JSP_UTIL_LOG_SelectALog(log_obj);

	// //////////////////////////////////////////////////////////////////////
	// Set all configuration properties to the basic configuration...
	if (D2JSP_UTIL_GEN_TypeOfArrayHashed(basic_list)) {
		for (var this_prop in basic_list) {
			if (!D2JSP_UTIL_CTX_IsPrivateName(this_prop))
				this[this_prop] = D2JSP_UTIL_GEN_CloneObject(basic_list[this_prop]);
		}
	}
	// //////////////////////////////////////////////////////////////////////

	// //////////////////////////////////////////////////////////////////////
	// Now add in any defaults specified...
	if (D2JSP_UTIL_GEN_TypeOfArrayHashed(default_list)) {
		for (var this_prop in default_list) {
			if (!D2JSP_UTIL_CTX_ContextCheckType(this_prop,
				basic_list[this_prop], default_list[this_prop], log_obj))
				this[this_prop] = D2JSP_UTIL_GEN_CloneObject(default_list[this_prop]);
		}
	}
	// //////////////////////////////////////////////////////////////////////

	// //////////////////////////////////////////////////////////////////////
	// Update for those properties specified by the user...
	if (D2JSP_UTIL_GEN_TypeOfArrayHashed(config_list)) {
		for (var this_prop in config_list) {
			if (!D2JSP_UTIL_CTX_ContextCheckType(this_prop,
				default_list[this_prop], config_list[this_prop], log_obj))
				this[this_prop] = D2JSP_UTIL_GEN_CloneObject(config_list[this_prop]);
		}
	}
	// //////////////////////////////////////////////////////////////////////

	// Once we clean-up, the object's construction is complete.
	runGC();

	// //////////////////////////////////////////////////////////////////////
	// Sets the context name.
	this.setContextName = function(context_name) {
		var old_name = this.__NAME__;

		this.__NAME__  = (D2JSP_UTIL_GEN_TypeOfStringNotEmpty(context_name)) ?
			context_name : "TDW Bot Configuration";

		return(old_name);
	}
	// //////////////////////////////////////////////////////////////////////

	// //////////////////////////////////////////////////////////////////////
	// Adds the specified property to the context.
	this.addProperty    = function(prop_name, prop_value) {
		var return_flag = false;
		var log_obj     = D2JSP_UTIL_LOG_GetALog();

		if (prop_name in this)
			log_obj.logWarning("The property name '" + prop_name +
				"' is already in this context.");
		else {
			log_obj.logDetail("CTX: Added property '" + prop_name +
				"': (Value = " + this.valueToString(prop_value) + ")");
			this[prop_name] = prop_value;
			return_flag     = true;
		}

		return(return_flag);
	}
	// //////////////////////////////////////////////////////////////////////

	// //////////////////////////////////////////////////////////////////////
	// Removes the specified property from the context.
	this.removeProperty = function(prop_name) {
		var return_flag = false;
		var log_obj     = D2JSP_UTIL_LOG_GetALog();

		if (!D2JSP_UTIL_GEN_TypeOfString(prop_name))
			log_obj.logWarning("Property name is not a string.");
		else if (D2JSP_UTIL_CTX_IsPrivateName(prop_name))
			log_obj.logWarning("The property name '" + prop_name +
				"' may not be removed.");
		else if (!(prop_name in this))
			log_obj.logWarning("The property name '" + prop_name +
				"' is not in this context.");
		else {
			log_obj.logDetail("CTX: Removed property '" + prop_name +
				"': (Value = " + this.valueToString(this[prop_name]) + ")");
			delete this[prop_name];
			return_flag = true;
		}

		return(return_flag);
	}
	// //////////////////////////////////////////////////////////////////////

	// //////////////////////////////////////////////////////////////////////
	// Pushes the specified property.
	this.pushProperty   = function(prop_name, prop_value) {
		var return_flag = false;
		var log_obj     = D2JSP_UTIL_LOG_GetALog();

		if (!D2JSP_UTIL_GEN_TypeOfString(prop_name))
			log_obj.logWarning("Property name is not a string.");
		else if (!D2JSP_UTIL_GEN_TypeOfStringNotEmpty(prop_name))
			log_obj.logWarning("Property name is an empty string.");
		else if (D2JSP_UTIL_CTX_IsPrivateName(prop_name))
			log_obj.logWarning("The property name '" + prop_name +
				"' may not be pushed.");
		else if (!(prop_name in this))
			log_obj.logWarning("The property name '" + prop_name +
				"' is not in this context.");
		else if (!D2JSP_UTIL_CTX_ContextCheckType(prop_name,
			this[prop_name], prop_value, log_obj)) {
			if (!(prop_name in this.__STACK__))
				this.__STACK__[prop_name] = new Array();
			log_obj.logDetail("CTX: Pushed a value for property '" +
				prop_name + "': (current stack depth = " +
				(this.__STACK__[prop_name].length + 1) + ")");
			log_obj.logDetail("CTX: Old value = {" +
				this.valueToString(this[prop_name]) + "}");
			this.__STACK__[prop_name].push(this[prop_name]);
			this[prop_name] = D2JSP_UTIL_GEN_CloneObject(prop_value);
			log_obj.logDetail("CTX: New value = {" +
				this.valueToString(prop_value) + "}");
			return_flag = true;
		}

		return(return_flag);
	}
	// //////////////////////////////////////////////////////////////////////

	// //////////////////////////////////////////////////////////////////////
	// Pops the specified property.
	this.popProperty    = function(prop_name) {
		var return_flag = false;
		var log_obj     = D2JSP_UTIL_LOG_GetALog();

		if (!D2JSP_UTIL_GEN_TypeOfString(prop_name))
			log_obj.logWarning("Property name is not a string.");
		else if (!D2JSP_UTIL_GEN_TypeOfStringNotEmpty(prop_name))
			log_obj.logWarning("Property name is an empty string.");
		else if (D2JSP_UTIL_CTX_IsPrivateName(prop_name))
			log_obj.logWarning("The property name '" + prop_name +
				"' may not be popped.");
		else if (!(prop_name in this.__STACK__))
			log_obj.logWarning("The property name '" + prop_name +
				"' has not been pushed.");
		else {
			log_obj.logDetail("CTX: Popped a value for property '" +
				prop_name + "': (current stack depth = " +
				(this.__STACK__[prop_name].length - 1) + ")");
			log_obj.logDetail("CTX: Old value = {" +
				this.valueToString(this[prop_name]) + "}");
			this[prop_name] = this.__STACK__[prop_name].pop();
			if (!this.__STACK__[prop_name].length)
				delete this.__STACK__[prop_name];
			log_obj.logDetail("CTX: New value = {" +
				this.valueToString(this[prop_name]) + "}");
			return_flag = true;
		}

		return(return_flag);
	}
	// //////////////////////////////////////////////////////////////////////

	// //////////////////////////////////////////////////////////////////////
	// Converts a property value to a human-readable string.
	this.valueToString  = function(prop_value) {
		if (D2JSP_UTIL_GEN_TypeOfFunction(prop_value))
			return(D2JSP_UTIL_FORMAT_FunctionToName(prop_value));
		else if (D2JSP_UTIL_GEN_TypeOfArrayIndexed(prop_value))
			return("[" + prop_value + "]");
		else if (D2JSP_UTIL_GEN_TypeOfArrayHashed(prop_value)) {
			var tmp_string = "";
			for (var this_prop in prop_value)
				tmp_string += ((tmp_string == "") ? "[" : ",") +
					"{" + this_prop + "=" + prop_value[this_prop] + "}";
			return(tmp_string + "]");
		}
		else
			return(prop_value + "");
	}
	// //////////////////////////////////////////////////////////////////////

	// //////////////////////////////////////////////////////////////////////
	// Emits the context properties to the specified log in quiet mode...
	this.toLog          = function(log_obj) {
		log_obj = D2JSP_UTIL_LOG_SelectALog(log_obj);

		// Setup for logging the config:
		//		1) Find the maximum property name length to be used.
		//		2) Accumulate a list of config param names for sorting.
		var max_length = 0;
		var name_list  = new Array();
		for (var this_prop in this) {
			if (!D2JSP_UTIL_CTX_IsPrivateName(this_prop)) {
				if (this_prop.length > max_length)
					max_length = this_prop.length;
				name_list.push(this_prop);
			}
		}
		name_list.sort(D2JSP_UTIL_GEN_CompareIgnoreCase);
		// Write the configuration to the log (but not the screen)...
		log_obj.logInfoQuiet(D2JSP_UTIL_FORMAT_RJust("", 75, "="));
		log_obj.logInfoQuiet(D2JSP_UTIL_FORMAT_RJust("", 75, "="));
		log_obj.logInfoQuiet(this.__NAME__);
		log_obj.logInfoQuiet(D2JSP_UTIL_FORMAT_RJust("", 75, "="));
		for (var count_1 = 0; count_1 < name_list.length; count_1++) {
			var this_prop = name_list[count_1];
			log_obj.logInfoQuiet(D2JSP_UTIL_FORMAT_LJust(this_prop, max_length) +
				": " + this.valueToString(this[this_prop]));
		}
		log_obj.logInfoQuiet(D2JSP_UTIL_FORMAT_RJust("", 75, "="));
		log_obj.flushLog();
	}
	// //////////////////////////////////////////////////////////////////////
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
// User not permitted to use any of the context private variable or method
//	names...
function D2JSP_UTIL_CTX_IsPrivateName(in_text)
{
	return(((in_text == "__NAME__")  || (in_text == "__STACK__")     ||
		(in_text == "setContextName") || (in_text == "addProperty")   ||
		(in_text == "removeProperty") || (in_text == "pushProperty")  ||
		(in_text == "popProperty")    || (in_text == "valueToString") ||
		(in_text == "toLog")) ? true : false);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function D2JSP_UTIL_CTX_ContextCheckType(prop_name, default_item, config_item,
	log_obj)
{
	var return_code = 0;

	log_obj = D2JSP_UTIL_LOG_SelectALog(log_obj);

	if (D2JSP_UTIL_CTX_IsPrivateName(prop_name)) {
		log_obj.logWarning("The property name '" + prop_name +
			"' may not be used.");
		return_code = -1;
	}
	else if (typeof(default_item) != "undefined") {
		if (typeof(config_item) != typeof(default_item)) {
			log_obj.logWarning("Configuration item name '" + prop_name +
				"' was ignored because its type (" + typeof(config_item) +
				") does not match that of the default configuration (" +
				typeof(default_item) + ").");
			return_code = -1;
		}
		else if (D2JSP_UTIL_GEN_TypeOfArray(default_item)) {
			if (D2JSP_UTIL_GEN_TypeOfArrayIndexed(default_item) &&
				(!D2JSP_UTIL_GEN_TypeOfArrayIndexed(config_item))) {
				log_obj.logWarning("Configuration item name '" + prop_name +
					"' was ignored because the its type does not match that of " +
					"the default configuration (indexed array).");
				return_code = -1;
			}
			if (D2JSP_UTIL_GEN_TypeOfArrayHashed(default_item) &&
				(!D2JSP_UTIL_GEN_TypeOfArrayHashed(config_item)) &&
				config_item.length) {
				log_obj.logWarning("Configuration item name '" + prop_name +
					"' was ignored because the its type does not match that of " +
					"the default configuration (hashed array).");
				return_code = -1;
			}
			else if (D2JSP_UTIL_GEN_TypeOfArrayIndexed(default_item) &&
				D2JSP_UTIL_GEN_TypeOfArrayIndexed(config_item)) {
				if (default_item.length && config_item.length &&
					(typeof(default_item[0]) != typeof(config_item[0]))) {
					log_obj.logWarning("Configuration item name '" + prop_name +
						"' was ignored because the type of the first element in " +
						"its indexed array (" + typeof(config_item[0]) +
						") does not match that of the default configuration (" +
						typeof(default_item[0]) + ").");
					return_code = -1;
				}
			}
		}
		else if (D2JSP_UTIL_GEN_TypeOfBoolean(default_item) &&
			(!D2JSP_UTIL_GEN_TypeOfBoolean(config_item))) {
			log_obj.logWarning("Configuration item name '" + prop_name +
				"' was ignored because its type does not match that of the " +
				"default configuration (boolean).");
			return_code = -1;
		}
		else if (D2JSP_UTIL_GEN_TypeOfNumber(default_item) &&
			(!D2JSP_UTIL_GEN_TypeOfNumber(config_item))) {
			log_obj.logWarning("Configuration item name '" + prop_name +
				"' was ignored because its type does not match that of the " +
				"default configuration (number).");
			return_code = -1;
		}
		else if (D2JSP_UTIL_GEN_TypeOfString(default_item) &&
			(!D2JSP_UTIL_GEN_TypeOfString(config_item))) {
			log_obj.logWarning("Configuration item name '" + prop_name +
				"' was ignored because its type does not match that of the " +
				"default configuration (string).");
			return_code = -1;
		}
		else if (D2JSP_UTIL_GEN_TypeOfFunction(default_item) &&
			(!D2JSP_UTIL_GEN_TypeOfFunction(config_item))) {
			log_obj.logWarning("Configuration item name '" + prop_name +
				"' was ignored because its type does not match that of the " +
				"default configuration (function).");
			return_code = -1;
		}
	}

	return(return_code);
}
// ////////////////////////////////////////////////////////////////////////////

/*
	CODE NOTE: To be removed,
// ////////////////////////////////////////////////////////////////////////////
function D2JSP_UTIL_CTX_ContextCreate(basic_list, default_list, config_list,
	context_name, log_obj)
{
	var context_list = D2JSP_UTIL_CTX_ContextCreateBasic(basic_list,
		default_list, config_list, context_name, log_obj);

	if (context_list["operation.log.configuration"])
		D2JSP_UTIL_CTX_ContextLog(context_list, context_name, log_obj);

	return(context_list);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function D2JSP_UTIL_CTX_ContextCreateBasic(basic_list, default_list,
	config_list, context_name, log_obj)
{
	log_obj = D2JSP_UTIL_LOG_SelectALog(log_obj);

	// Set all configuration properties to the basic configuration...
	var context_list = (D2JSP_UTIL_GEN_TypeOfArrayHashed(basic_list)) ?
		D2JSP_UTIL_GEN_CloneObject(basic_list) : (new Array());

	context_list.__STACK__ = new Array();

	// Now add in any defaults specified...
	if (D2JSP_UTIL_GEN_TypeOfArrayHashed(default_list)) {
		for (var this_prop in default_list) {
			if (!D2JSP_UTIL_CTX_ContextCheckType(this_prop,
				basic_list[this_prop], default_list[this_prop], log_obj))
				context_list[this_prop] =
					D2JSP_UTIL_GEN_CloneObject(default_list[this_prop]);
		}
	}

	// Update for those properties specified by the user...
	if (D2JSP_UTIL_GEN_TypeOfArrayHashed(config_list)) {
		for (var this_prop in config_list) {
			if (!D2JSP_UTIL_CTX_ContextCheckType(this_prop,
				default_list[this_prop], config_list[this_prop], log_obj))
				context_list[this_prop] =
					D2JSP_UTIL_GEN_CloneObject(config_list[this_prop]);
		}
	}

	runGC();

	return(context_list);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function D2JSP_UTIL_CTX_ContextLog(context_list, context_name, log_obj)
{
	if (D2JSP_UTIL_GEN_TypeOfArrayHashed(context_list)) {
		log_obj = D2JSP_UTIL_LOG_SelectALog(log_obj);
		// Setup for logging the config:
		//		1) Find the maximum property name length to be used.
		//		2) Accumulate a list of config param names for sorting.
		var max_length = 0;
		var name_list  = new Array();
		for (var this_prop in context_list) {
			if (this_prop != "__STACK__") {
				if (this_prop.length > max_length)
					max_length = this_prop.length;
				name_list.push(this_prop.toLowerCase());
			}
		}
		name_list.sort();
		// Write the configuration to the log (but not the screen)...
		log_obj.logInfoQuiet(D2JSP_UTIL_FORMAT_RJust("", 75, "="));
		log_obj.logInfoQuiet(D2JSP_UTIL_FORMAT_RJust("", 75, "="));
		log_obj.logInfoQuiet((D2JSP_UTIL_GEN_TypeOfStringNotEmpty(context_name)) ?
			context_name : "TDW Bot Configuration");
		log_obj.logInfoQuiet(D2JSP_UTIL_FORMAT_RJust("", 75, "="));
		for (var count_1 = 0; count_1 < name_list.length; count_1++) {
			var this_prop  = name_list[count_1];
			var this_value = context_list[this_prop];
			if (D2JSP_UTIL_GEN_TypeOfFunction(this_value))
				this_value = D2JSP_UTIL_FORMAT_FunctionToName(this_value);
			log_obj.logInfoQuiet(D2JSP_UTIL_FORMAT_LJust(this_prop, max_length) +
				": " + this_value);
		}
		log_obj.logInfoQuiet(D2JSP_UTIL_FORMAT_RJust("", 75, "="));
		log_obj.flushLog();
	}
}
// ////////////////////////////////////////////////////////////////////////////
*/

D2JSP_UTIL_IncludeOnceHash["TDW/_D2JSP_Utility.d2l"][1] = new Date();

} // if (typeof(D2JSP_INCLUDE_GUARD_Utility_d2l) == "undefined") {

// ////////////////////////////////////////////////////////////////////////////
// ////////////////////////////////////////////////////////////////////////////
//
//	Regression tests. Change the conditional to 'true' to run.
//
// ////////////////////////////////////////////////////////////////////////////
if (false) {
includeonce("TDW/_D2JSP_Areas.d2l");
includeonce("TDW/_D2JSP_Modes.d2l");
var TEST_FileHandle = null;
function main()
{
/*
Call_XXX(10);
print("STOPPING");
stop();
*/

	var file_name = "output/RegressionTest._D2JSP_Utility.d2l.txt";

	print("Writing '_D2JSP_Utility.d2l' regression test output file to '" +
		file_name + "'.");

	if ((TEST_FileHandle = fileOpen(file_name, 1)) != null) {
var test_list = ["A", " B", "C ", " D ", "ABCDEFGHIJ", "ABCDEFGHIJK"];
for (var count_1 = 0; count_1 < test_list.length; count_1++) {
	TEST_FileHandle.writeLine("LJUST : " + D2JSP_UTIL_FORMAT_LJust(test_list[count_1], 10, "-"));
	TEST_FileHandle.writeLine("RJUST : " + D2JSP_UTIL_FORMAT_RJust(test_list[count_1], 10, "-"));
	TEST_FileHandle.writeLine("LPAD  : " + D2JSP_UTIL_FORMAT_LPad(test_list[count_1], 10, "-"));
	TEST_FileHandle.writeLine("RPAD  : " + D2JSP_UTIL_FORMAT_RPad(test_list[count_1], 10, "-"));
	TEST_FileHandle.writeLine("CENTER: " + D2JSP_UTIL_FORMAT_Center(test_list[count_1], 10, "-"));
	TEST_FileHandle.writeLine("------- --------------------------------------");
}
print("STOPPING");
stop();

//		TEST_D2JSP_UTIL_GEN_WaitTest();
//		TEST_D2JSP_UTIL_LOG_LogTest();

		TEST_FileHandle.writeLine(D2JSP_UTIL_FORMAT_RepeatString("=", 78));
		TEST_FileHandle.writeLine(D2JSP_UTIL_FORMAT_RepeatString("=", 78));
		TEST_FileHandle.writeLine("CCITT Table:");
		TEST_FileHandle.writeLine(D2JSP_UTIL_FORMAT_RepeatString("=", 78));
		for (var count_1 = 0; count_1 < D2JSP_UTIL_CCITT_Table.length; count_1++)
			TEST_FileHandle.writeLine(D2JSP_UTIL_FORMAT_ZeroFill(count_1, 3) +
				" : 0x" + D2JSP_UTIL_FORMAT_ZeroFill(
				D2JSP_UTIL_CCITT_Table[count_1].toString(16), 4));
		TEST_FileHandle.writeLine(D2JSP_UTIL_FORMAT_RepeatString("=", 78));
		TEST_FileHandle.writeLine("");
		TEST_FileHandle.close();
	}
	else
		print("Unable to open file '" + file_name + "' for writing!");

	print("Stopping");
	stop();
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TEST_D2JSP_UTIL_GEN_WaitTest()
{
	print("Waiting until you're not standing around...");
	me.overhead("Waiting until you're not standing around...");
	D2JSP_UTIL_GEN_WaitForTrue(0, 10,
		"((me.mode != D2JSP_MODE_PLAYER_STANDING_OUTSIDE_TOWN) && " +
		"(me.mode != D2JSP_MODE_PLAYER_STANDING_IN_TOWN))");
	print(D2JSP_UTIL_COLOR_BLUE + "OK, you're active..");

	print("Waiting until you're not in town...");
	me.overhead("Waiting until you're not in town...");
	D2JSP_UTIL_GEN_WaitForFalseAction(0, 10, "D2JSP_AREA_IsTown()", null,
		"print(D2JSP_UTIL_COLOR_BLUE + \"Visting the hinterlands...\")");

	print("Waiting until you're back in town...");
	me.overhead("Waiting until you're back in town...");
	D2JSP_UTIL_GEN_WaitForTrueAction(0, 10, "D2JSP_AREA_IsTown()", null,
		"print(D2JSP_UTIL_COLOR_BLUE + \"Return to civilization...\")");
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TEST_D2JSP_UTIL_LOG_LogTest()
{
	var this_prop;
	var tmp_log;
	var my_log_1;
	var my_log_2;

	tmp_log = D2JSP_UTIL_LOG_GetALog();
	tmp_log.logInfo("D2JSP_UTIL_LOG_GetALog() test 1");

	my_log_1 =
		new D2JSP_UTIL_Log("output\\RegressionTest.D2JSP_Utility.LOG.1.log");

	tmp_log = D2JSP_UTIL_LOG_GetALog();
	tmp_log.logInfo("D2JSP_UTIL_LOG_GetALog() test 2");

	my_log_2 =
		new D2JSP_UTIL_Log("output\\RegressionTest.D2JSP_Utility.LOG.2.log");

	tmp_log = D2JSP_UTIL_LOG_GetALog();
	tmp_log.logInfo("D2JSP_UTIL_LOG_GetALog() test 3");

	my_log_1.logInfo("Line #1");
	my_log_1.logInfo("Line #2", new Date(0));
	my_log_1.logMinutiae("Line #3");
	my_log_1.closeLog();

	tmp_log = D2JSP_UTIL_LOG_GetALog();
	tmp_log.logInfo("D2JSP_UTIL_LOG_GetALog() test 4");

	my_log_2.closeLog();

	tmp_log = D2JSP_UTIL_LOG_GetALog();
	tmp_log.logInfo("D2JSP_UTIL_LOG_GetALog() test 5");
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TEST_CRC()
{
}
// ////////////////////////////////////////////////////////////////////////////

} // if (false) {
// ////////////////////////////////////////////////////////////////////////////

function Call_XXX(value)
{
	Call_YYY();
}

function Call_YYY()
{
	D2JSP_UTIL_LogCallStack();
}


