//var TDW_BOT_TestFlagNPCAvoid = true;
var TDW_BOT_TestFlagNPCAvoid = false;
var TDW_BOT_TestFlagNPCAvoid_2 = true;
//var TDW_BOT_TestFlagNPCAvoid_2 = false;

var TDW_BOT_ReportChangePosition = true;
/*
	Call Study:
	---- ------
	TDW_BOT_ATTACK_AttackCluster
		TDW_BOT_ATTACK_GetAndAttackCluster

	TDW_BOT_ATTACK_GetAndAttackCluster
		TDW_BOT_ATTACK_KillSpecifiedNPC_AttackCluster

	TDW_BOT_ATTACK_AttackNearbyMonstersCluster
		TDW_BOT_ATTACK_AttackCluster
		TDW_BOT_ATTACK_KillSpecifiedNPC

	TDW_BOT_ATTACK_AttackNearbyMonsters
		TDW_BOT_ATTACK_KillSpecifiedNPC
		TDW_BOT_MOVE_DoArrival
		TDW_BOT_MOVE_DoDeparture
		TDW_BOT_MOVE_DoManaRegen

	TDW_BOT_ATTACK_AttackNearbyMonstersForModeList
		TDW_BOT_ATTACK_KillSpecifiedNPC
		TDW_BOT_ATTACK_AttackNearbyMonsters
		TDW_BOT_ATTACK_AttackNearbyMonstersCluster
===============================================================================
	TDW_BOT_ATTACK_KillSpecifiedNPC functions of interest:
	------------------------------- --------- -- ---------
		unit  TDW_BOT_ATTACK_KillSpecifiedNPC_ReAcquire
		unit  TDW_BOT_ATTACK_KillSpecifiedNPC_ReAcquireName
		unit  TDW_BOT_ATTACK_KillSpecifiedNPC_ReAcquireBasic
		unit  TDW_BOT_ATTACK_KillSpecifiedNPC_GetUnitByGID
		unit  TDW_BOT_ATTACK_KillSpecifiedNPC_GetUnitByName
		bool  TDW_BOT_ATTACK_KillSpecifiedNPC_IsAlive
		int   TDW_BOT_ATTACK_KillSpecifiedNPC_CanAttack
		void  TDW_BOT_ATTACK_KillSpecifiedNPC_ShowHP
		unit  TDW_BOT_ATTACK_KillSpecifiedNPC_AttackNPC
		void  TDW_BOT_ATTACK_KillSpecifiedNPC_AttackCluster
		void  TDW_BOT_ATTACK_KillSpecifiedNPC_ShowStats
		void  TDW_BOT_ATTACK_KillSpecifiedNPC_ChangePosition
		coord TDW_BOT_ATTACK_KillSpecifiedNPC_FindPosition
===============================================================================
*/

/*
	Bounding box for killing Diablo:
	--------------------------------
	Upper-right corner: [7740 - 9, 5279 - 9]
	Lower-right corner: [7819 - 5, 5319 - 6]
*/

// ////////////////////////////////////////////////////////////////////////////
// ////////////////////////////////////////////////////////////////////////////
// TDW Bot Support Include File
// ////////////////////////////////////////////////////////////////////////////
//
// File Name       : TDW_BotSupport.d2l
//
// File Version    : 1.0.0
//
// File Description: Generalized TDW bot support library.
//
// Revison History : 2003-04-28 --- Creation.
//
//	Author          : Michael L. Brock (TheDesertWind)
//
//	Copyright       : (c) 2003 - 2004, Michael L. Brock. All rights reserved.
//
// ////////////////////////////////////////////////////////////////////////////

	// Include guard
if (typeof(TDW_INCLUDE_GUARD_BotSupport_d2l) == "undefined") {
	var TDW_INCLUDE_GUARD_BotSupport_d2l = true;

// ////////////////////////////////////////////////////////////////////////////
// ////////////////////////////////////////////////////////////////////////////
// Necessary include files...
// ////////////////////////////////////////////////////////////////////////////
include("TDW/_D2JSP_Utility.d2l");

includeonce("TDW/_D2JSP_Areas.d2l");
includeonce("TDW/_D2JSP_Enchants.d2l");
includeonce("TDW/_D2JSP_Common.d2l");
includeonce("TDW/_D2JSP_Items.d2l");
includeonce("TDW/_D2JSP_ItemFlags.d2l");
includeonce("TDW/_D2JSP_ItemTypes.d2l");
includeonce("TDW/_D2JSP_Modes.d2l");
includeonce("TDW/_D2JSP_Objects.d2l");
includeonce("TDW/_D2JSP_Skills.d2l");
includeonce("TDW/_D2JSP_Stats.d2l");
includeonce("TDW/_D2JSP_States.d2l");

includeonce("TDW/ISF.d2l");
includeonce("TDW/TDW_Attack.d2l");
includeonce("TDW/TDW_Threat.d2l");
includeonce("TDW/TDW_Cfg.d2l");
includeonce("TDW/TDW_Move.d2l");
includeonce("TDW/TDW_Path.d2l");
includeonce("TDW/TDW_PathLink.d2l");

// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
// ////////////////////////////////////////////////////////////////////////////
// Some values...
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
if (parseFloat(me.version) != 0.3518)
	var TDW_BOT_AttackSelector = new TDW_ATTACK_Attack();
else
	var TDW_BOT_AttackSelector = null;
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
var TDW_BOT_ATTACK_NPC_FLAG_NONE				    = 0x00000000;
var TDW_BOT_ATTACK_NPC_FLAG_ACTION			    = 0x00000001;
var TDW_BOT_ATTACK_NPC_FLAG_IS_RANDOM		    = 0x00000002;
var TDW_BOT_ATTACK_NPC_FLAG_NOT_NAMED		    = 0x00000004;
var TDW_BOT_ATTACK_NPC_FLAG_NO_INIT_MOVE	    = 0x00000008;
var TDW_BOT_ATTACK_NPC_FLAG_NO_MOVE			    = 0x00000010;
var TDW_BOT_ATTACK_NPC_FLAG_NO_FINALIZE	    = 0x00000020;
var TDW_BOT_ATTACK_NPC_FLAG_NO_RETURN	       = 0x00000040;
var TDW_BOT_ATTACK_NPC_FLAG_MUST_KILL         = 0x00000080;
var TDW_BOT_ATTACK_NPC_FLAG_NO_CLUSTER        = 0x00000100;
var TDW_BOT_ATTACK_NPC_FLAG_KILL_MINIONS_PRE  = 0x00000200;
var TDW_BOT_ATTACK_NPC_FLAG_KILL_MINIONS_POST = 0x00000400;
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
var TDW_BOT_SUPP_TP2DEST_FLAG_NONE				  = 0x00000000;
var TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_NONE		  = 0x00000000;
var TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_SPECIAL	  = 0x00000001;
var TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_FINAL	  = 0x00000002;
var TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_TARGET	  = 0x00000004;
var TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_INTER	  = 0x00000008;
var TDW_BOT_SUPP_TP2DEST_FLAG_PICKUP_ISF		  = 0x00000010;
var TDW_BOT_SUPP_TP2DEST_FLAG_OPEN_DOORS		  = 0x00000020;
var TDW_BOT_SUPP_TP2DEST_FLAG_QUIT_NO_CHANGE	  = 0x00000040;
var TDW_BOT_SUPP_TP2DEST_FLAG_QUIT_FINAL_DIST  = 0x00000080;
var TDW_BOT_SUPP_TP2DEST_FLAG_NO_AVOID_NPCS    = 0x00000100;
var TDW_BOT_SUPP_TP2DEST_FLAG_AVOID_NPCS_FINAL = 0x00000200;
var TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_ALL		=
	TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_SPECIAL |
	TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_FINAL   |
	TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_TARGET  |
	TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_INTER;
var TDW_BOT_SUPP_TP2DEST_FLAG_ACTIONS			=
	TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_SPECIAL |
	TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_FINAL   |
	TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_TARGET  |
	TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_INTER   |
	TDW_BOT_SUPP_TP2DEST_FLAG_PICKUP_ISF	  |
	TDW_BOT_SUPP_TP2DEST_FLAG_OPEN_DOORS;
var TDW_BOT_SUPP_TP2DEST_FLAG_MASK				=
	TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_SPECIAL |
	TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_FINAL   |
	TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_TARGET  |
	TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_INTER   |
	TDW_BOT_SUPP_TP2DEST_FLAG_PICKUP_ISF	  |
	TDW_BOT_SUPP_TP2DEST_FLAG_OPEN_DOORS;
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
var TDW_BOT_COLL_BLOCK_ATTACK =	D2JSP_UTIL_COLL_BLOCK_LOS |
											D2JSP_UTIL_COLL_BLOCK_JUMP;
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
var TDW_BOT_STATE_BadStatesAll = [
	D2JSP_STATE_FREEZE,
	D2JSP_STATE_POISON,
	D2JSP_STATE_AMPLIFYDAMAGE,
	D2JSP_STATE_WEAKEN,
	D2JSP_STATE_DIMVISION,
	D2JSP_STATE_SLOWED,
	D2JSP_STATE_CONVICTED,
	D2JSP_STATE_HOLYWINDCOLD,
	D2JSP_STATE_PREVENTHEAL,
	D2JSP_STATE_IRONMAIDEN,
	D2JSP_STATE_TERROR,
	D2JSP_STATE_ATTRACT,
	D2JSP_STATE_LIFETAP,
	D2JSP_STATE_CONFUSE,
	D2JSP_STATE_DECREPIFY,
	D2JSP_STATE_LOWERRESIST,
	D2JSP_STATE_OPENWOUNDS,
	D2JSP_STATE_FINGERMAGECURSE,
	D2JSP_STATE_NOMANAREGEN,
	D2JSP_STATE_DEFENSE_CURSE,
	D2JSP_STATE_BLOOD_MANA,
	D2JSP_STATE_BURNING
];
var TDW_BOT_STATE_BadStatesSerious = [
	D2JSP_STATE_FREEZE,
	D2JSP_STATE_POISON,
	D2JSP_STATE_AMPLIFYDAMAGE,
	D2JSP_STATE_WEAKEN,
	D2JSP_STATE_DIMVISION,
	D2JSP_STATE_SLOWED,
	D2JSP_STATE_CONVICTED,
	D2JSP_STATE_IRONMAIDEN,
//	D2JSP_STATE_DECREPIFY,
	D2JSP_STATE_NOMANAREGEN,
	D2JSP_STATE_DEFENSE_CURSE,
	D2JSP_STATE_BLOOD_MANA
];
var TDW_BOT_STATE_BadStatesDefault = [
//	D2JSP_STATE_POISON,
	D2JSP_STATE_AMPLIFYDAMAGE,
	D2JSP_STATE_WEAKEN,
	D2JSP_STATE_DIMVISION,
	D2JSP_STATE_CONVICTED,
	D2JSP_STATE_IRONMAIDEN,
	D2JSP_STATE_DEFENSE_CURSE,
	D2JSP_STATE_BLOOD_MANA
];
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
var TDW_BOT_MOVE_TOWN_FLAG_NONE				=	0x00000000;
var TDW_BOT_MOVE_TOWN_FLAG_FILL_TBK			=	0x00000001;
var TDW_BOT_MOVE_TOWN_FLAG_FILL_IBK			=	0x00000002;
var TDW_BOT_MOVE_TOWN_FLAG_FILL_KEY			=	0x00000004;
var TDW_BOT_MOVE_TOWN_FLAG_FILL_ALL			=	TDW_BOT_MOVE_TOWN_FLAG_FILL_TBK	|
															TDW_BOT_MOVE_TOWN_FLAG_FILL_IBK	|
															TDW_BOT_MOVE_TOWN_FLAG_FILL_KEY;
var TDW_BOT_MOVE_TOWN_FLAG_MERC_WANTED		=	0x00000010;
var TDW_BOT_MOVE_TOWN_FLAG_MERC_NEEDED		=	0x00000020								|
															TDW_BOT_MOVE_TOWN_FLAG_MERC_WANTED;
var TDW_BOT_MOVE_TOWN_FLAG_FORCE_ISF		=	0x00000040;
var TDW_BOT_MOVE_TOWN_FLAG_FORCE_ISF_SELL	=	0x00000080;
var TDW_BOT_MOVE_TOWN_FLAG_FORCE_GOLD		=	0x00000100;
var TDW_BOT_MOVE_TOWN_FLAG_ALL				=	0xFFFFFFFF;
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
// Tristram path from red portal to Wirt's body.
// ////////////////////////////////////////////////////////////////////////////
// ////////////////////////////////////////////////////////////////////////////
var TDW_BOT_PATH_TristramRedPortalToWirt = [
	[25178, 5088],
	[25145, 5091],
	[25104, 5099],
	[25069, 5110],
	[25045, 5126],
	[25046, 5177]
];
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
// ////////////////////////////////////////////////////////////////////////////
// Arcane Sanctuary quadrant paths.
// ////////////////////////////////////////////////////////////////////////////
var TDW_BOT_PATH_ArcaneMoveWayPoint = [25449,  5449];

var TDW_BOT_PATH_ArcaneMoveNameList = [
	"Intersection Link",
	"Corner 1",
	"Internal Link 1",
	"Internal Link 2",
	"Internal Link 1",
	"Corner 2",
	"Bonus Intersection",
	"Bonus Area",
	"Bonus Intersection",
	"Corner 3",
	"Internal Link 2",
	"Corner 4",
	"Intersection Link",
	"Arcane Waypoint",
];

var TDW_BOT_PATH_ArcaneMoveList_East = [
	[25327,  5437],
	[25330,  5382],
	[25207,  5402],
	[25207,  5517],
	[25207,  5402],
	[25082,  5381],
	[25078,  5447],
	[25022,  5451],
	[25078,  5447],
	[25086,  5496],
	[25207,  5517],
	[25326,  5507],
	[25327,  5437],
	[25449,  5449]
];

var TDW_BOT_PATH_ArcaneMoveList_South = [
	[25432,  5327],
	[25507,  5326],
	[25496,  5207],
	[25408,  5206],
	[25496,  5207],
	[25507,  5082],
	[25447,  5080],
	[25450,  5030],
	[25447,  5080],
	[25381,  5083],
	[25408,  5206],
	[25387,  5310],
	[25432,  5327],
	[25449,  5449]
];

var TDW_BOT_PATH_ArcaneMoveList_North = [
	[25448,  5562],
	[25382,  5562],
	[25411,  5687],
	[25498,  5687],
	[25411,  5687],
	[25407,  5807],
	[25448,  5823],
	[25440,  5864],
	[25448,  5823],
	[25487,  5807],
	[25498,  5687],
	[25506,  5561],
	[25448,  5562],
	[25449,  5449]
];

var TDW_BOT_PATH_ArcaneMoveList_West = [
	[25566,  5448],
	[25567,  5498],
	[25687,  5515],
	[25701,  5386],
	[25687,  5515],
	[25808,  5506],
	[25826,  5448],
	[25865,  5449],
	[25826,  5448],
	[25807,  5382],
	[25701,  5386],
	[25567,  5400],
	[25566,  5448],
	[25449,  5449]
];

// North -> East
// East -> South
// South -> West
// West -> North
var TDW_BOT_PATH_ArcaneMoveList_All = [
	["West",		TDW_BOT_PATH_ArcaneMoveList_West],
	["East",		TDW_BOT_PATH_ArcaneMoveList_East],
	["South",	TDW_BOT_PATH_ArcaneMoveList_South],
	["North",	TDW_BOT_PATH_ArcaneMoveList_North]
];
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
// ////////////////////////////////////////////////////////////////////////////
// Act 2 Tal Rasha tomb locations...
// ////////////////////////////////////////////////////////////////////////////
var TDW_BOT_PATH_TalRashaTombXY = new Array();
/*
	CODE NOTE: To be removed
TDW_BOT_PATH_TalRashaTombXY[D2JSP_AREA_TAL_RASHAS_TOMB1 + ""] = [[0x30fd, 0x13b0], null];
TDW_BOT_PATH_TalRashaTombXY[D2JSP_AREA_TAL_RASHAS_TOMB2 + ""] = [[0x30f6, 0x1407], null];
TDW_BOT_PATH_TalRashaTombXY[D2JSP_AREA_TAL_RASHAS_TOMB3 + ""] = [[0x30fa, 0x1458], null];
TDW_BOT_PATH_TalRashaTombXY[D2JSP_AREA_TAL_RASHAS_TOMB4 + ""] = [[0x30f3, 0x14a7], null];
TDW_BOT_PATH_TalRashaTombXY[D2JSP_AREA_TAL_RASHAS_TOMB5 + ""] = [[0x315e, 0x13af], null];
TDW_BOT_PATH_TalRashaTombXY[D2JSP_AREA_TAL_RASHAS_TOMB6 + ""] = [[0x31ad, 0x13ae], null];
TDW_BOT_PATH_TalRashaTombXY[D2JSP_AREA_TAL_RASHAS_TOMB7 + ""] = [[0x31fc, 0x13ac], null];
*/
TDW_BOT_PATH_TalRashaTombXY[D2JSP_AREA_TAL_RASHAS_TOMB1 + ""] = [[12536, 5037], 387, 38];
TDW_BOT_PATH_TalRashaTombXY[D2JSP_AREA_TAL_RASHAS_TOMB2 + ""] = [[12531, 5127], 385, 39];
TDW_BOT_PATH_TalRashaTombXY[D2JSP_AREA_TAL_RASHAS_TOMB3 + ""] = [[12534, 5209], 385, 40];
TDW_BOT_PATH_TalRashaTombXY[D2JSP_AREA_TAL_RASHAS_TOMB4 + ""] = [[12525, 5285], 385, 41];
TDW_BOT_PATH_TalRashaTombXY[D2JSP_AREA_TAL_RASHAS_TOMB5 + ""] = [[12636, 5034], 383, 42];
TDW_BOT_PATH_TalRashaTombXY[D2JSP_AREA_TAL_RASHAS_TOMB6 + ""] = [[12714, 5026], 383, 43];
TDW_BOT_PATH_TalRashaTombXY[D2JSP_AREA_TAL_RASHAS_TOMB7 + ""] = [[12796, 5035], 383, 44];
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
// ////////////////////////////////////////////////////////////////////////////
// Act 2 Path from Duriel's Lair to Tyrael's location...
// ////////////////////////////////////////////////////////////////////////////
var TDW_BOT_PATH_DurielToTyrael = [
	[22623, 15715],
	[22610, 15707],
	[22579, 15705],
	[22578, 15650],
	[22576, 15601]
];
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
// ////////////////////////////////////////////////////////////////////////////
// Bloody Foothills paths.
// ////////////////////////////////////////////////////////////////////////////
var TDW_BOT_PATH_BloodyShenkLocation    = [3906, 5115];

var TDW_BOT_PATH_ShenkSafeSpot = [3829, 5109];

var TDW_BOT_PATH_FrigidWPToSafeSpotList = [
// Area = 111 (Rigid Highlands)
	[3780, 5108],
// Area = 110 (Bloody Foothills)
	[3800, 5108],
	[3829, 5109],
];

var TDW_BOT_PATH_SafeSpotToShenkList     = [
	[3829, 5109],
	[3839, 5115],
	[3859, 5119],
	[3879, 5118],
	[3899, 5115]
];

var TDW_BOT_PATH_FrigidWPToShenkList     =
	TDW_BOT_PATH_BloodyShenkLocation.concat(TDW_BOT_PATH_SafeSpotToShenkList);

var TDW_BOT_PATH_ShenkToTownFast         = [
// Area = 110 (Bloody Foothills)
	[3906, 5113],
	[3983, 5109],
	[4070, 5039],
	[4203, 5087],
	[4285, 5088],
	[4361, 5106],
	[4385, 5110],
	[4415, 5111],
	[4461, 5105],
	[4538, 5106],
	[4608, 5119],
	[4675, 5120],
	[4739, 5115],
	[4842, 5107],
	[4921, 5093],
	[4921, 5093],
	[4940, 5086],
	[4974, 5083],
	[4999, 5088],
	[4991, 5086],
//	[5000, 5085],
//	[5012, 5091]
];

var TDW_BOT_PATH_ShenkToTownSlow         = [
	[3906, 5116],
	[3915, 5082],
	[3906, 5116],
	[3910, 5144],
	[3925, 5171],
	[3965, 5156],
	[3981, 5123],
	[3982, 5100],
	[3938, 5074],
	[3908, 5035],
	[3967, 5031],
	[3976, 5060],
	[4000, 5103],
	[4006, 5155],
	[4021, 5196],
	[4060, 5163],
	[4055, 5111],
	[4064, 5070],
	[4055, 5043],
	[4094, 5053],
	[4101, 5093],
	[4099, 5118],
	[4135, 5136],
	[4109, 5182],
	[4133, 5109],
	[4137, 5072],
	[4132, 5043],
	[4168, 5057],
	[4178, 5109],
	[4172, 5151],
	[4205, 5129],
	[4231, 5122],
	[4226, 5092],
	[4222, 5063],
	[4224, 5069],
	[4264, 5084],
	[4290, 5085],
	[4393, 5105],
	[4402, 5123],
	[4455, 5102],
	[4497, 5102],
	[4559, 5095],
	[4573, 5111],
	[4644, 5133],
	[4661, 5122],
	[4662, 5074],
	[4695, 5060],
	[4711, 5102],
	[4702, 5157],
	[4743, 5170],
	[4736, 5069],
	[4773, 5056],
	[4778, 5130],
	[4784, 5177],
	[4813, 5134],
	[4797, 5114],
	[4813, 5074],
	[4854, 5068],
	[4852, 5042],
	[4874, 5111],
	[4867, 5158],
	[4868, 5180],
	[4894, 5177],
	[4899, 5062],
	[4944, 5045],
	[4940, 5091],
	[4923, 5144]
];


var TDW_BOT_PATH_A5Q1_GateToBloody       = [
	[5012, 5091],
	[5000, 5085]
];
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
var TDW_BOT_GetUnitNPCCount = 0;
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
var TDW_BOT_ConfigureList                                 = new Array();
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
// This is a reference to the object used for logging.
var TDW_BOT_Log         = new D2JSP_UTIL_Log();

var TDW_ISF_Cfg         = null;

var TDW_BOT_ContextList = new Array();
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
var TDW_BOT_INIT_FLAG_NONE          = 0x0000;
var TDW_BOT_INIT_FLAG_NON_POWER_BOT = 0x0001;
var TDW_BOT_INIT_FLAG_ISF_NONE      = 0x0002;
var TDW_BOT_INIT_FLAG_ISF_TRIPLE    = 0x0004;
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TDW_BOT_Init(bot_name, log_file_name, config_list, init_flags,
	town_logic_flags, isf_prefix)
{
	me.overhead(D2JSP_UTIL_COLOR_YELLOW + "Initializing...");

	runGC();

	bot_name      = (D2JSP_UTIL_GEN_TypeOfStringNotEmpty(bot_name)) ?
		bot_name : "TDW_BotUnknown";
	log_file_name = (D2JSP_UTIL_GEN_TypeOfStringNotEmpty(log_file_name)) ?
		log_file_name : ("output/" + bot_name + "." + me.realm + "." + 
		me.account + "." + me.name + ".log");

//TDW_BOT_ConfigureList["operation.log.level.file"] = D2JSP_UTIL_LOG_Level_MINUTIAE;
//TDW_BOT_ConfigureList["operation.log.sync.mode"]  = true;

	TDW_BOT_ConfigureList["operation.bot.name"]       = bot_name;
	TDW_BOT_ConfigureList["operation.log.file.name"]  = log_file_name;

	TDW_BOT_Log = new D2JSP_UTIL_Log(log_file_name, bot_name);

	TDW_BOT_Log.setLevelFile(TDW_BOT_ConfigureList["operation.log.level.file"]);
	TDW_BOT_Log.setLevelScreen(TDW_BOT_ConfigureList["operation.log.level.screen"]);
	TDW_BOT_Log.setSyncMode(TDW_BOT_ConfigureList["operation.log.sync.mode"]);

	print("The " + D2JSP_UTIL_COLOR_GOLD + bot_name +
		D2JSP_UTIL_COLOR_WHITE + " is running");

	D2JSP_UTIL_GEN_CheckGameReady();

	TDW_BOT_ConfigureList["operation.bot.time.start"] = new Date();
	TDW_BOT_ConfigureList["operation.bot.time.end"]   = new Date();

	TDW_BOT_Log.logInfo("-----> Beginning " + bot_name + " run",
		TDW_BOT_ConfigureList["operation.bot.time.start"]);

	TDW_BOT_Log.logInfo("Last error reported: " + D2JSP_UTIL_LastError);

/*
	var bot_cfg_file_name = TDW_CFG_GetFileSpec("libs/TDW_BOT_CFG",
		bot_name, "d2i");
	TDW_BOT_ConfigureList["operation.bot.config.file.name"] = bot_cfg_file_name;
	if (bot_cfg_file_name) {
		TDW_BOT_Log.logInfo("Performing specialized " + bot_name +
			" configuration using file '" + bot_cfg_file_name + "'...");
		var error_list = new Array();
		var line_list  = TDW_CFG_ReadFileSimple(bot_cfg_file_name, error_list);
		if (line_list) {
			TDW_BOT_Log.logInfo("Interpreting specialized " + bot_name +
				" configuration using file '" + bot_cfg_file_name + "'...");
			if (!eval(line_list.join(" "))) {
				me.overhead("");
				return("Attempt to perform specialized " + bot_name +
					" configuration using file '" + bot_cfg_file_name + "' failed.");
			}
			print("Done");
		}
		else {
			me.overhead("");
			while (error_list.length)
				TDW_BOT_Log.logError(error_list.shift());
			return("Unable to perform specialized " + bot_name +
				" configuration using file '" + bot_cfg_file_name + "' failed" +
				" (see log file for details).");
		}
	}
*/

	var bot_cfg_file_name =
		(TDW_BOT_ConfigureList["operation.bot.config.file.name"]) ?
		TDW_BOT_ConfigureList["operation.bot.config.file.name"] :
		TDW_CFG_GetFileSpec("libs/TDW_BOT_CFG/TDW_BOT_CFG", bot_name, "d2l");

	TDW_BOT_ConfigureList["operation.bot.config.file.name"] = bot_cfg_file_name;

	if (bot_cfg_file_name) {
		bot_cfg_file_name = bot_cfg_file_name.replace(/^libs\//, "");
		TDW_BOT_Log.logInfo("Loading specialized " + bot_name +
			" configuration using file 'libs/" + bot_cfg_file_name + "'...");
		if (!include(bot_cfg_file_name)) {
			me.overhead("");
			return("Attempt to perform specialized " + bot_name +
				" configuration using file 'libs/" + bot_cfg_file_name +
				"' failed.");
		}
	}

	if ((parseFloat(me.version) >= 0.34) && (!D2JSP_NPC_GetMercObj())) {
		if (!me.mercrevive) {
			if (TDW_BOT_ConfigureList["mercernary.needed"] ||
				TDW_BOT_ConfigureList["mercernary.wanted"] ||
				TDW_BOT_ConfigureList["town.revive.mercenary"])
				TDW_BOT_Log.logWarning(D2JSP_UTIL_COLOR_YELLOW + "This bot was " +
					"configured for use of a mercenary, but the character does " +
					"not have one. All configuration settings pertinant to " +
					"mercenary use will be ignored.");
			TDW_BOT_ConfigureList["mercernary.needed"]                = false;
			TDW_BOT_ConfigureList["mercernary.wanted"]                = false;
			TDW_BOT_ConfigureList["town.revive.mercenary"]            = false;
			TDW_BOT_ConfigureList["chicken.mercenary.hp"]             = 0;
			TDW_BOT_ConfigureList["mercernary.needed"]                = 0;
			TDW_BOT_ConfigureList["mercernary.wanted"]                = 0;
			TDW_BOT_ConfigureList["town.revive.mercenary"]            = 0;
			TDW_BOT_ConfigureList["town.heal.mercenary.hp"]           = 0;
			TDW_BOT_ConfigureList["potion.mercenary.hp.health"]       = 0;
			TDW_BOT_ConfigureList["potion.mercenary.hp.rejuvenation"] = 0;
		}
	}

	TDW_BOT_CTX_ContextCreate(TDW_BOT_ConfigureList, config_list,
		bot_name + " Configuration");

	TDW_BOT_Log.setLevelFile(TDW_BOT_ContextList["operation.log.level.file"]);
	TDW_BOT_Log.setLevelScreen(TDW_BOT_ContextList["operation.log.level.screen"]);
	TDW_BOT_Log.setSyncMode(TDW_BOT_ContextList["operation.log.sync.mode"]);

	if (TDW_BOT_ContextList["operation.core.version.minimum"] &&
		(parseFloat(me.version) < 
		TDW_BOT_ContextList["operation.core.version.minimum"])) {
		var version_this = parseFloat(me.version) + "";
		var version_min  = TDW_BOT_ContextList["operation.core.version.minimum"] + "";
		version_this     = version_this.substr(0, version_this.length - 2) + "." +
			version_this.substr(version_this.length - 2);
		version_min      = version_min.substr(0, version_min.length - 2) + "." +
			version_min.substr(version_min.length - 2);
		me.overhead("");
		return("Current d2jsp core version is " + version_this +
			", but this bot requires a minimum of version " + version_min + ".");
	}
		
	if (TDW_BOT_ContextList["operation.core.version.maximum"] &&
		(parseFloat(me.version) > 
		TDW_BOT_ContextList["operation.core.version.maximum"])) {
		var version_this = parseFloat(me.version) + "";
		var version_max  = TDW_BOT_ContextList["operation.core.version.maximum"] + "";
		version_this     = version_this.substr(0, version_this.length - 2) + "." +
			version_this.substr(version_this.length - 2);
		version_max      = version_max.substr(0, version_max.length - 2) + "." +
			version_max.substr(version_max.length - 2);
		me.overhead("");
		return("Current d2jsp core version is " + version_this +
			", but this bot requires a maximum of version " + version_max + ".");
	}

	TDW_BOT_AttackSelector = new TDW_ATTACK_Attack();

	TDW_BOT_AttackSelector.
		removeAttack(TDW_BOT_ContextList["skill.attack.remove"]);

	TDW_BOT_Log.emitSep("=");

	TDW_BOT_Log.emitSep("=");
	TDW_BOT_Log.logInfoQuiet("Attack Ranking (assumes enemy has 0% resist all):");
	TDW_BOT_Log.emitSep("=");
	TDW_BOT_Log.logInfoQuiet(TDW_BOT_AttackSelector.
		analyzeAttack([0, 0, 0, 0, 0, 0], 1, 1, null));
	TDW_BOT_Log.emitSep("=");

	TDW_BOT_SKILL_SpellFixUp(init_flags);

	var isf_file_name = (TDW_BOT_ContextList["isf.configuration.file"]) ?
		TDW_BOT_ContextList["isf.configuration.file"] :
		TDW_CFG_GetFileSpec("settings/ISF", bot_name);

	TDW_BOT_ContextList["isf.configuration.file"] = isf_file_name;

	if (init_flags & TDW_BOT_INIT_FLAG_ISF_TRIPLE) {
		var isf_file_name_sell = (init_flags & TDW_BOT_INIT_FLAG_ISF_TRIPLE) ?
			((TDW_BOT_ContextList["isf.configuration.file.sell"]) ?
			TDW_BOT_ContextList["isf.configuration.file.sell"] :
			TDW_CFG_GetFileSpec("settings/ISF.SELL", bot_name)) : null;
		TDW_BOT_ContextList["isf.configuration.file.sell"] = isf_file_name_sell;
		if (!isf_file_name) {
			me.overhead("");
			return("No ISF configuration file was specified.");
		}
		if (!isf_file_name_sell) {
			me.overhead("");
			return("No ISF selling configuration file was specified.");
		}
		TDW_BOT_Log.logInfo("Creating a merged ISF configuration (from '" +
			TDW_BOT_ContextList["isf.configuration.file"] +
			"' and '" + TDW_BOT_ContextList["isf.configuration.file.sell"] +
			"') ...");
		if (!(TDW_ISF_Cfg =
			ISF_CreateTriple(TDW_BOT_ContextList["isf.configuration.file"],
			TDW_BOT_ContextList["isf.configuration.file.sell"], 0, error_list))) {
			while (error_list.length)
				TDW_BOT_Log.logError(error_list.shift());
			TDW_BOT_SUPP_DoExitWithMsg("Unable to create a ISF configuration " +
				"from '" + TDW_BOT_ContextList["isf.configuration.file"] +
				"' and " + TDW_BOT_ContextList["isf.configuration.file.sell"] +
				"' ... exiting");
		}
	}
	else if ((!(init_flags & TDW_BOT_INIT_FLAG_ISF_NONE)) && isf_file_name) {
		TDW_BOT_Log.logInfo("Loading ISF configuration file '" + isf_file_name +
			"'...");
		var error_list = new Array();
		if (!(TDW_ISF_Cfg = ISF_Create(isf_file_name, 0, error_list))) {
			me.overhead("");
			while (error_list.length)
				TDW_BOT_Log.logError(error_list.shift());
			return("Unable to load ISF configuration file '" + isf_file_name +
				"' (see log file for details).");
		}
	}

	if (TDW_BOT_MOVE_TownLogic(town_logic_flags |
		((TDW_BOT_ContextList["mercernary.needed"]) ?
		TDW_BOT_MOVE_TOWN_FLAG_MERC_NEEDED : TDW_BOT_MOVE_TOWN_FLAG_NONE) |
		((TDW_BOT_ContextList["mercernary.wanted"]) ?
		TDW_BOT_MOVE_TOWN_FLAG_MERC_WANTED : TDW_BOT_MOVE_TOWN_FLAG_NONE),
		TDW_ISF_Cfg))
		TDW_BOT_SUPP_DoExitWithMsg("Unable to complete town logic.");

	if (D2JSP_NPC_GetMercIsLiving()) {
		TDW_BOT_Log.logInfo("A mercenary by the name of " +
			D2JSP_NPC_GetMercName() + " has been located.");
		TDW_BOT_ContextList["mercernary.name"] = D2JSP_NPC_GetMercName();
	}

	me.randommove    = true;
	me.quitonerror   = TDW_BOT_ContextList["operation.quit.on.error"];
	me.quitonhostile = TDW_BOT_ContextList["operation.quit.on.hostile"];
	me.chickenhp     = D2JSP_COMM_GetMyMaxLife() *
		(TDW_BOT_ContextList["chicken.me.hp"] / 100);
	me.chickenmp     = D2JSP_COMM_GetMyMaxMana() *
		(TDW_BOT_ContextList["chicken.me.mp"] / 100);

	me.showcast      = (TDW_BOT_ContextList["operation.d2jsp.me.showcast"]) ?
		1 : 0;

	if (!TDW_BOT_SUPP_DoMessageDNDSpec(
		TDW_BOT_ContextList["operation.bnet.message.dnd"]))
		TDW_BOT_SUPP_DoMessageDNDSpec(
			TDW_BOT_ContextList["operation.bnet.message.away"]);

	TDW_BOT_Log.flushLog();

	runGC();

	me.overhead("");

	return(null);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TDW_BOT_FinalComplete()
{
	var time_end   = new Date();
	var time_total = time_end - TDW_BOT_ContextList["operation.bot.time.start"];

	TDW_BOT_Log.logInfo("-----> Ending " +
		TDW_BOT_ContextList["operation.bot.name"] + " run (" +
		(time_total / 1000.0).toFixed(2) + " seconds)", time_end);

	print("Script completed normally.");

	TDW_BOT_SUPP_DoQuit();
}
// ////////////////////////////////////////////////////////////////////////////

// A complete kludge. What should be built is a complete spell description
// facility...
// ////////////////////////////////////////////////////////////////////////////
function TDW_BOT_SKILL_SpellFixUp(init_flags)
{
	var fatal_code  = false;
/*
	var check_list  = ["skill.attack.ranged", "skill.attack.local",
								"skill.attack.arrive.local.once", "skill.precast"];
*/
	var check_list   = ["skill.attack.arrive.local.once", "skill.precast"];
	var precast_list = new Array();
	var count_1;
	var this_list;
	var this_skill;
	var state_name;
	var state_number;
	var this_type;

	precast_list["Energy Shield"]  = [ 144, 48];
	precast_list["Frozen Armor"]   = [ 120, 12];
	precast_list["Shiver Armor"]   = [ 120, 12];
	precast_list["Chilling Armor"] = [  44,  6];
	precast_list["Thunder Storm"]  = [  32,  8];

	for (count_1 = 0; count_1 < check_list.length; count_1++) {
		for (count_2 = 0; count_2 <
			TDW_BOT_ContextList[check_list[count_1]].length; ) {
			this_skill = TDW_BOT_ContextList[check_list[count_1]][count_2];
			if (!me.getSkill(this_skill)) {
				TDW_BOT_Log.logWarning("You don't have the " + this_skill +
					" skill: it has been removed from the '" + check_list[count_1] +
					"' list.");
				TDW_BOT_ContextList[check_list[count_1]].splice(count_2, 1);
			}
			else {
				if ((check_list[count_1] == "skill.precast") &&
					(!(this_skill in precast_list))) {
					TDW_BOT_Log.logError("The spell " + this_skill +
						" is not a valid pre-cast skill.");
					fatal_code = true;
				}
				count_2++;
			}
		}
		if (!TDW_BOT_ContextList[check_list[count_1]].length) {
			if ((check_list[count_1] == "skill.attack.arrive.local.once") ||
				(check_list[count_1] == "skill.attack.local"))
				TDW_BOT_Log.logWarning("You have no spells in the '" +
					check_list[count_1] + "' list.")
			else {
				if (init_flags & TDW_BOT_INIT_FLAG_NON_POWER_BOT)
					TDW_BOT_Log.logWarning("You have no spells in the '" +
						check_list[count_1] + "' list.");
				else {
					TDW_BOT_Log.logWarning("You have no spells in the '" +
						check_list[count_1] + "' list.");
//					fatal_code = true;
				}
			}
		}
	}

	if ((!me.getSkill("Teleport")) &&
		(!(init_flags & TDW_BOT_INIT_FLAG_NON_POWER_BOT))) {
		TDW_BOT_Log.logError("You are required to have Teleport.");
		fatal_code = true;
	}

	if (fatal_code == true)
		TDW_BOT_SUPP_DoExitWithMsg("Skill fix-up could not be completed.");
	else {
		if (!TDW_BOT_ContextList["skill.precast"].length) {
			var default_armors = ["Shiver Armor", "Frozen Armor", "Chilling Armor"];
			for (count_1 = 0; count_1 < default_armors.length; count_1++) {
				if (me.getSkill(default_armors[count_1])) {
					TDW_BOT_ContextList["skill.precast"].push(default_armors[count_1]);
               TDW_BOT_Log.logInfo(default_armors[count_1] + " has been " +
						"selected as your default cold armor.");
					break;
				}
			}
		}
		TDW_BOT_ContextList["skill.precast.data"]    = new Array();
		TDW_BOT_ContextList["skill.precast.data"][0] = new Array();
		TDW_BOT_ContextList["skill.precast.data"][1] = new Array();
		for (count_1 = 0; count_1 < TDW_BOT_ContextList["skill.precast"].length;
			count_1++) {
			this_skill   = TDW_BOT_ContextList["skill.precast"][count_1];
			state_name   = D2JSP_SKILL_SkillToStateName(this_skill);
			state_number = D2JSP_STATE_NameToState(state_name);
			this_type    = (D2JSP_SKILL_IsPreCastForClassInTown(this_skill)) ? 0 : 1;
			TDW_BOT_ContextList["skill.precast.data"][this_type].
				push([this_skill, state_name, state_number,
				precast_list[this_skill][0] +
				(precast_list[this_skill][1] * (me.getSkill(this_skill) - 1)), 0]);
			TDW_BOT_Log.logDetail("Will use precast skill " + this_skill +
				" (state name = " + state_name + ", state_number = " + state_number +
				") which will expire after " +
				(precast_list[this_skill][1] * (me.getSkill(this_skill) - 1)) +
				" seconds.");
		}
	}

	return((fatal_code) ? -1 : 0);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
var TDW_BOT_ATTACK_CLUSTER_MIN			= 0;
var TDW_BOT_ATTACK_CLUSTER_MAX			= 1;
var TDW_BOT_ATTACK_CLUSTER_TOTAL			= 2;
var TDW_BOT_ATTACK_CLUSTER_MEAN			= 3;
var TDW_BOT_ATTACK_CLUSTER_COUNT			= 4;

var TDW_BOT_ATTACK_ClusterNameList     = ["Minimum", "Maximum", "Total", "Mean"];
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TDW_BOT_ATTACK_GenericNPCs(npc_list, access_strategy, load_flags,
	attack_flag)
{
	var return_code     = 0;
	var need_preload    = true;
	var to_free_list    = new Array(D2JSP_AREA_COUNT);
	var tmp_attack_spec = TDW_BOT_AttackNPCSpec;

// CODE NOTE: Set to none because of core bug getting many collision tables.
//load_flags = TDW_PATHL_AREA_LOAD_FLAG_NONE;

	TDW_BOT_AttackNPCSpec = new TDW_BOT_ATTACK_SpecialNPCSpec();

	access_strategy = (access_strategy instanceof TDW_PATH_LinkAccessStrategy) ?
		access_strategy : TDW_BOT_MOVE_GetDefaultLinkAccessStrategy();

	for (var count_1 = 0; count_1 < to_free_list.length; count_1++) {
		if ((!TDW_PATH_MapGlobal.area_list[count_1]) &&
			(!D2JSP_AREA_IsTown(count_1)) &&
			(count_1 != D2JSP_AREA_SPIDER_FOREST) &&
			(count_1 != D2JSP_AREA_GREAT_MARSH) &&
			(count_1 != D2JSP_AREA_FLAYER_JUNGLE))
			to_free_list[count_1] = true;
		else
			to_free_list[count_1] = false;
	}

	for (var count_1 = 0; count_1 < npc_list.length; count_1++) {
		var this_npc = TDW_PATHL_EnemyList[npc_list[count_1]];
		var coord_list;
		if (this_npc) {
			if (me.act != D2JSP_AREA_GetAct(this_npc.dst_area)) {
				TDW_BOT_MOVE_RecoverInTown(false);
				TDW_MOVE_COMPAT_TownMove(D2JSP_AREA_GetAct(this_npc.dst_area),
					"waypoint");
				need_preload = true;
				for (var count_2 = 0; count_2 < to_free_list.length; count_2++) {
					if (to_free_list[count_2] &&
						TDW_PATH_MapGlobal.area_list[count_2]) {
						TDW_BOT_Log.logInfo("Freeing path information for area " +
							count_2 + " (" + D2JSP_AREA_AreaToName(count_2) + ").");
						TDW_PATH_ClearArea(count_2);
					}
				}
			}
			else if (TDW_BOT_STATE_IsBadStateUs(TDW_BOT_STATE_BadStatesDefault))
				TDW_BOT_MOVE_RecoverInTown(false);
			if ((need_preload == true) &&
				(load_flags & TDW_PATHL_AREA_LOAD_FLAG_MASK)) {
				var last_area = me.area;
				for (var count_2 = count_1; count_2 < npc_list.length; count_2++) {
					var tmp_npc = TDW_PATHL_EnemyList[npc_list[count_2]];
					if (tmp_npc != null) {
						if (D2JSP_AREA_GetAct(tmp_npc.dst_area) != me.act)
							break;
						TDW_BOT_Log.logInfo("Pre-calculating path to " +
							tmp_npc.npc_name + "...");
						tmp_npc.loadEnemyLinks(last_area, access_strategy,
							load_flags);
						last_area = tmp_npc.dst_area;
					}
				}
				need_preload = false;
			}
			TDW_BOT_CHECK_PrecastChecks(30000);
			if (!this_npc.gotoEnemy(access_strategy)) {
				if (attack_flag) {
					if (TDW_BOT_AttackNPCSpecData.findNPC(this_npc.npc_name))
						TDW_BOT_AttackNPCSpec.addNPC(D2JSP_UTIL_GEN_CloneObject(
							TDW_BOT_AttackNPCSpecData.findNPC(this_npc.npc_name)));
					else
						TDW_BOT_AttackNPCSpec.addNPC(
							new TDW_BOT_ATTACK_SpecialNPC(this_npc.npc_name,
							TDW_BOT_ATTACK_NPC_FLAG_NONE, 0, 0, 0));
					TDW_BOT_AttackNPCSpec.findNPC(this_npc.npc_name).flags |=
						TDW_BOT_ATTACK_NPC_FLAG_NO_RETURN;
					TDW_BOT_AttackNPCSpec.killAny();
					if (TDW_BOT_AttackNPCSpec.findNPC(this_npc.npc_name)) {
						access_strategy.callback_func(access_strategy,
							TDW_PATH_ASCB_MSG_ERROR, D2JSP_UTIL_COLOR_RED +
							"Unable to find enemy NPC " + this_npc.npc_name + "!!!");
						TDW_BOT_AttackNPCSpec.deleteNPC(this_npc.npc_name);
					}
				}
				else
{
					access_strategy.callback_func(access_strategy,
						TDW_PATH_ASCB_MSG_STATUS, D2JSP_UTIL_COLOR_GREEN +
						"Found enemy NPC " + this_npc.npc_name + "!!!");
var some_npc = getUnit(D2JSP_UTIL_GETUNIT_NPC, this_npc.npc_name);
TDW_BOT_ATTACK_KillSpecifiedNPC_ShowStats(
	new TDW_BOT_ATTACK_SpecialNPC(some_npc.name), some_npc);
TDW_BOT_Log.flushLog();
}
			}
			else
				access_strategy.callback_func(access_strategy,
					TDW_PATH_ASCB_MSG_ERROR, D2JSP_UTIL_COLOR_RED +
					"Unable to find enemy NPC " + this_npc.npc_name + "!!!");
		}
		else
			access_strategy.callback_func(access_strategy,
				TDW_PATH_ASCB_MSG_WARNING, "Unable to locate an entry for enemy " +
				"NPC " + npc_list[count_1] + ".");
		TDW_BOT_SUPP_MySnagIt();
		runGC();
	}

	TDW_BOT_AttackNPCSpec = tmp_attack_spec;

	TDW_BOT_MOVE_RecoverInTown(false);

	for (var count_1 = 0; count_1 < to_free_list.length; count_1++) {
		if (to_free_list[count_1] && TDW_PATH_MapGlobal.area_list[count_1]) {
			TDW_BOT_Log.logInfo("Freeing path information for area " +
				count_1 + " (" + D2JSP_AREA_AreaToName(count_1) + ").");
			TDW_PATH_ClearArea(count_1);
		}
	}

	return(return_code);
}
// ////////////////////////////////////////////////////////////////////////////

// Object TDW_BOT_ATTACK_MoveControl constructor
// ////////////////////////////////////////////////////////////////////////////
function TDW_BOT_ATTACK_MoveControl(action_flags, max_cycle_count,
	per_cycle_count, max_attack_all, max_attack_ms, max_distance, no_change_max)
{
	if ((arguments.length != 1) ||
		(!(arguments[0] instanceof TDW_BOT_ATTACK_MoveControl))) {
//print("***** CONSTRUCTING TDW_BOT_ATTACK_MoveControl() OBJECT");
		this.action_flags    = (arguments.length) ? action_flags :
			TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_ALL;
		this.max_cycle_count = ((max_cycle_count == null) || (max_cycle_count < 0)) ?
			5 : max_cycle_count;
		this.per_cycle_count = ((per_cycle_count == null) || (per_cycle_count < 0)) ?
			3 : per_cycle_count;
		this.max_attack_all  = ((max_attack_all == null) || (max_attack_all < 0)) ?
			999 : max_attack_all;
		this.max_attack_ms   = ((max_attack_ms == null) || (max_attack_ms < 1)) ?
			15000 : max_attack_ms;
		this.max_distance    = ((max_distance == null) || (max_distance < 0)) ?
			25 : max_distance;
		this.no_change_max   = ((no_change_max == null) || (no_change_max < 1)) ?
			30 : no_change_max;
		// ------------------------ - --------------------------------
		this.attack_end_cond_func   = null;
		this.threat_move_spec       = new TDW_THREAT_MoveSpec(0, 8);
		this.threat_avoid_spec      = new TDW_THREAT_MoveSpec(0, 8);
		this.threat_cluster_spec    = null;
		// ------------------------ - --------------------------------
		this.cluster_avoid_distance =
			TDW_BOT_ContextList["attack.cluster.avoid.distance"];
		// ------------------------ - --------------------------------
		this.avoid_action_count  = 3;
		this.avoid_action_dist   = 10;
		this.avoid_dist_circle   =  2;
		this.avoid_center_coord  = null;
		this.avoid_dist_min      = 10;
		this.avoid_dist_max      = 18;
	}
	else if ((arguments.length == 1) &&
		(arguments[0] instanceof TDW_BOT_ATTACK_MoveControl)) {
		this.action_flags        = arguments[0].action_flags;
		this.max_cycle_count     = arguments[0].max_cycle_count;
		this.per_cycle_count     = arguments[0].per_cycle_count;
		this.max_attack_all      = arguments[0].max_attack_all;
		this.max_attack_ms       = arguments[0].max_attack_ms;
		this.max_distance        = arguments[0].max_distance;
		this.no_change_max       = arguments[0].no_change_max;
		// ------------------------ - --------------------------------
		this.attack_end_cond_func   = arguments[0].attack_end_cond_func;
		this.threat_avoid_spec      = new TDW_THREAT_MoveSpec(0, 8);
		this.threat_cluster_spec    = null;
		// ------------------------ - --------------------------------
		this.cluster_avoid_distance = arguments[0].cluster_avoid_distance;
		// ------------------------ - --------------------------------
		this.avoid_action_count  = arguments[0].avoid_action_count;
		this.avoid_action_dist   = arguments[0].avoid_action_dist;
		this.avoid_dist_circle   = arguments[0].avoid_dist_circle;
		this.avoid_center_coord  = arguments[0].avoid_center_coord;
		this.avoid_dist_min      = arguments[0].avoid_dist_min;
		this.avoid_dist_max      = arguments[0].avoid_dist_max;
	}

	this.toString        = TDW_BOT_ATTACK_MoveControl_toString;

	function TDW_BOT_ATTACK_MoveControl_toString() {
		var out_string = "";

		for (var this_prop in this) {
			if (!D2JSP_UTIL_GEN_TypeOfFunction(this[this_prop]))
				out_string += ((out_string == "") ? "" : ", ") + this_prop + "=" +
					this[this_prop];
		}

		return(out_string);
	}
}
// ////////////////////////////////////////////////////////////////////////////

// Object TDW_BOT_ATTACK_MoveStatus constructor
// ////////////////////////////////////////////////////////////////////////////
function TDW_BOT_ATTACK_MoveStatus(max_attack_all, max_attack_ms)
{
	if (arguments.length && (arguments[0] instanceof TDW_BOT_ATTACK_MoveControl)) {
		max_attack_all = arguments[0].max_attack_all;
		max_attack_ms  = arguments[0].max_attack_ms;
	}

	this.max_attack_all    = ((max_attack_all == null) || (max_attack_all < 0)) ?
		999 : max_attack_all;
	this.max_attack_ms     = ((max_attack_ms == null) || (max_attack_ms < 0)) ?
		999999 : max_attack_ms;
	this.attack_time_start = new Date();
	this.attack_time_end   = this.attack_time_start + this.max_attack_ms;
	this.npc_attack_count  = 0;

	this.hasExpired        = TDW_BOT_ATTACK_MoveStatus_hasExpired;
	this.hasExpiredReason  = TDW_BOT_ATTACK_MoveStatus_hasExpiredReason;
	this.toString          = TDW_BOT_ATTACK_MoveStatus_toString;

	function TDW_BOT_ATTACK_MoveStatus_hasExpired() {
		if ((new Date()) >= this.attack_time_end)
			return(-1);
		else if (max_attack_all >= npc_attack_count)
			return(1);
		else
			return(0);
	}

	function TDW_BOT_ATTACK_MoveStatus_hasExpiredReason() {
		var return_code = this.hasExpired();

		return((return_code == -1) ? "Attack cycle has been cancelled because " +
			"the maximum number of milliseconds (" + this.max_attack_ms +
			") has expired." :
			((return_code == 0) ? "Attack cycle has been cancelled because the " +
			"maximum number of NPC attacks (" + this.max_attack_all + ") have " +
			"been performed." : null));
	}

	function TDW_BOT_ATTACK_MoveStatus_toString() {
		var out_string = "";

		for (var this_prop in this) {
			if (!D2JSP_UTIL_GEN_TypeOfFunction(this[this_prop]))
				out_string += ((out_string == "") ? "" : ", ") + this_prop + "=" +
					this[this_prop];
		}

		return(out_string);
	}
}
// ////////////////////////////////////////////////////////////////////////////

var TDW_BOT_ClusterLastCount        = 0;

var TDW_BOT_CLUSTER_DEFAULT_RADIUS	= 25;

var TDW_BOT_CLUSTER_FLAG_NONE       = 0x0000;
var TDW_BOT_CLUSTER_FLAG_NO_PRESETS = 0x0001;
// ////////////////////////////////////////////////////////////////////////////
// Object TDW_BOT_ATTACK_Cluster constructor...
function TDW_BOT_ATTACK_Cluster(center_coord, radius, mode_mask, coll_mask,
	npc_eval_func, flags, attr_single_obj, attr_multi_obj, exclude_hash)
{
	this.center_coord    = (D2JSP_UTIL_GEN_TypeOfCoord(center_coord)) ?
		center_coord : [me.x, me.y];
	this.radius           = (D2JSP_UTIL_GEN_TypeOfUInt(radius) && radius) ?
		radius : TDW_BOT_CLUSTER_DEFAULT_RADIUS;
	this.mode_mask       = (parseFloat(me.version) >= 0.3421) ?
		((D2JSP_UTIL_GEN_TypeOfNumber(mode_mask) && mode_mask) ?
		(D2JSP_MODE_FLAG_INDICATOR | (mode_mask | 0x4FFFFFFF)) :
		(D2JSP_MODE_FLAG_INDICATOR | D2JSP_MODE_NPC_FLAGS_ALL_BUT_DEAD)) : null;
	this.coll_mask       = (D2JSP_UTIL_GEN_TypeOfUInt(coll_mask) &&
		(coll_mask & D2JSP_UTIL_COLL_BLOCK_MASK)) ? coll_mask :
		TDW_BOT_COLL_BLOCK_ATTACK;
	this.npc_eval_func   = (D2JSP_UTIL_GEN_TypeOfFunction(npc_eval_func)) ?
		npc_eval_func : D2JSP_NPC_ShouldAttackEnemy;
	this.flags           = flags;
	this.attr_single_obj = ((attr_single_obj instanceof D2JSP_NPC_Attibutes) ||
		(attr_single_obj instanceof D2JSP_NPC_AttibutesList)) ? attr_single_obj :
		null;
	this.attr_multi_obj  = ((attr_multi_obj instanceof D2JSP_NPC_Attibutes) ||
		(attr_multi_obj instanceof D2JSP_NPC_AttibutesList)) ? attr_multi_obj :
		null;
	this.exclude_hash    = (D2JSP_UTIL_GEN_TypeOfArrayHashed(exclude_hash)) ?
		exclude_hash : (new Array());

	this.name            = "TDW_BOT_ATTACK_Cluster() [" +
		this.center_coord + "]" + this.radius;
	this.type            = -1;

/*
	this.count_all    = 0;
	this.count        = 0;
	this.dist         = [Number.MAX_VALUE, Number.MIN_VALUE, 0, 0];
	this.coord        = [[0, 0], [0, 0], [0, 0], [0, 0]];
	this.x            = [0, 0, 0, 0];
	this.y            = [0, 0, 0, 0];
	this.hp           = [Number.MAX_VALUE, Number.MIN_VALUE, 0, 0];
	this.hpmax        = [Number.MAX_VALUE, Number.MIN_VALUE, 0, 0];
	this.hp_percent   = [Number.MAX_VALUE, Number.MIN_VALUE, 0, 0];
	this.resist       = new Array(D2JSP_UTIL_DAMAGE_COUNT);

	this.toStringList = TDW_BOT_ATTACK_Cluster_toStringList;
	this.toLog        = TDW_BOT_ATTACK_Cluster_toLog;

	for (var count_1 = 0; count_1 < D2JSP_UTIL_DAMAGE_COUNT; count_1++)
		this.resist[count_1] = [Number.MAX_VALUE, Number.MIN_VALUE, 0, 0];
*/
	this.count_all         = 0;
	this.count_coll_all    = 0;
	this.count             = 0;
	this.dist              = [999999999, Number.MIN_VALUE, 0, 0];
	this.coord             = [[0, 0], [0, 0], [0, 0], [0, 0]];
	this.x                 = [0, 0, 0, 0];
	this.y                 = [0, 0, 0, 0];
	this.hp                = [999999999, Number.MIN_VALUE, 0, 0];
	this.hpmax             = [999999999, Number.MIN_VALUE, 0, 0];
	this.hp_percent        = [999999999, Number.MIN_VALUE, 0, 0];
	this.chilled           = [        0,                0, 0, 0];
	this.resist            = new Array(D2JSP_UTIL_DAMAGE_COUNT);
	this.stats             = new Array(D2JSP_STAT_COUNT);
	this.enchants          = new Array(D2JSP_ENCHANT_MAXIMUM);
	this.states            = new Array(D2JSP_STATE_COUNT);

	// This number of NPCs within distance 5, 10, 15, 20, 25, & 30.
	this.dist_circles       = [0, 0, 0, 0, 0, 0, 0];
	this.dist_circles_total = [0, 0, 0, 0, 0, 0, 0];

	this.dist_nearest_any  = 999999999;

	this.attr_single_found = null;
	this.attr_multi_found  = null;

/*
	this.checkAttr         = TDW_BOT_ATTACK_Cluster_checkAttr;
	this.getResistList     = TDW_BOT_ATTACK_Cluster_getResistList;
	this.toStringList      = TDW_BOT_ATTACK_Cluster_toStringList;
	this.toLog             = TDW_BOT_ATTACK_Cluster_toLog;
*/

	for (var count_1 = 0; count_1 < D2JSP_UTIL_DAMAGE_COUNT; count_1++)
		this.resist[count_1] = [999999999, Number.MIN_VALUE, 0, 0];

	var npc_obj   = null;
	if (parseFloat(me.version) < 0.3421)
		npc_obj = getUnit(D2JSP_UTIL_GETUNIT_NPC);
	else
		npc_obj   = getUnit(D2JSP_UTIL_GETUNIT_NPC, null, this.mode_mask);

	if (npc_obj) {
		var this_distance;
		var do_this_npc_flag;	// Hack because it's not in earlier versions.
		do {
			do_this_npc_flag = false;
			this.count_all++;
			if (++TDW_BOT_GetUnitNPCCount > 100) {
				runGC();
				TDW_BOT_GetUnitNPCCount = 0;
			}
/*
			if (this.npc_eval_func(npc_obj) && ((this_distance =
				Dist(this.center_coord[0], this.center_coord[1],
				npc_obj.x, npc_obj.y)) <= this.radius)) {
				this.count_coll_all++;
				if (!this.coll_mask)
					do_this_npc_flag = true;
				else
					do_this_npc_flag = (checkCollision(me, npc_obj, this.coll_mask)) ?
						false : true;
			}
*/
			if (this.npc_eval_func(npc_obj)) {
				this_distance = Dist(this.center_coord[0], this.center_coord[1],
					npc_obj.x, npc_obj.y);
				if ((this.flags & TDW_BOT_CLUSTER_FLAG_NO_PRESETS) &&
					npc_obj.getEnchant(D2JSP_ENCHANT_PRESET_BOSS))
					;
				else if (((npc_obj.gid + "") in this.exclude_hash) ||
					(npc_obj.name in this.exclude_hash))
					;
				else if (this_distance <= this.radius) {
					this.count_coll_all++;
					if (!this.coll_mask)
						do_this_npc_flag = true;
					else
						do_this_npc_flag = (checkCollision(me, npc_obj,
							this.coll_mask)) ? false : true;
				}
				else if ((!this.coll_mask) ||
					(!checkCollision(me, npc_obj, this.coll_mask)))
					this.dist_nearest_any = Math.min(this.dist_nearest_any,
						this_distance);
			}
			if (do_this_npc_flag) {
				this.dist_nearest_any = Math.min(this.dist_nearest_any,
					this_distance);
				if (this_distance < this.dist[TDW_BOT_ATTACK_CLUSTER_MIN]) {
					this.dist[TDW_BOT_ATTACK_CLUSTER_MIN]  = this_distance;
					this.coord[TDW_BOT_ATTACK_CLUSTER_MIN] = [npc_obj.x, npc_obj.y];
					this.x[TDW_BOT_ATTACK_CLUSTER_MIN]     = npc_obj.x;
					this.y[TDW_BOT_ATTACK_CLUSTER_MIN]     = npc_obj.y;
				}
				if (this_distance > this.dist[TDW_BOT_ATTACK_CLUSTER_MAX]) {
					this.dist[TDW_BOT_ATTACK_CLUSTER_MAX]  = this_distance;
					this.coord[TDW_BOT_ATTACK_CLUSTER_MAX] = [npc_obj.x, npc_obj.y];
					this.x[TDW_BOT_ATTACK_CLUSTER_MAX]     = npc_obj.x;
					this.y[TDW_BOT_ATTACK_CLUSTER_MAX]     = npc_obj.y;
				}
				var this_circle = Math.floor(this_distance / 5);
				if (this_circle < this.dist_circles.length)
					this.dist_circles[this_circle]++;
/*
				if (npc_obj.hp < this.hp[TDW_BOT_ATTACK_CLUSTER_MIN])
					this.hp[TDW_BOT_ATTACK_CLUSTER_MIN] = npc_obj.hp;
				else if (npc_obj.hp > this.hp[TDW_BOT_ATTACK_CLUSTER_MAX])
					this.hp[TDW_BOT_ATTACK_CLUSTER_MAX] = npc_obj.hp;
				if (npc_obj.hpmax < this.hpmax[TDW_BOT_ATTACK_CLUSTER_MIN])
					this.hpmax[TDW_BOT_ATTACK_CLUSTER_MIN] = npc_obj.hpmax;
				else if (npc_obj.hpmax > this.hpmax[TDW_BOT_ATTACK_CLUSTER_MAX])
					this.hpmax[TDW_BOT_ATTACK_CLUSTER_MAX] = npc_obj.hpmax;
*/
				var hp_percent = (npc_obj.hp / npc_obj.hpmax) * 100;
				this.hp[TDW_BOT_ATTACK_CLUSTER_MIN]    =
					Math.min(npc_obj.hp, this.hp[TDW_BOT_ATTACK_CLUSTER_MIN]);
				this.hp[TDW_BOT_ATTACK_CLUSTER_MAX]    =
					Math.max(npc_obj.hp, this.hp[TDW_BOT_ATTACK_CLUSTER_MAX]);
				this.hpmax[TDW_BOT_ATTACK_CLUSTER_MIN] =
					Math.min(npc_obj.hpmax, this.hpmax[TDW_BOT_ATTACK_CLUSTER_MIN]);
				this.hpmax[TDW_BOT_ATTACK_CLUSTER_MAX] =
					Math.max(npc_obj.hpmax, this.hpmax[TDW_BOT_ATTACK_CLUSTER_MAX]);
				this.hp_percent[TDW_BOT_ATTACK_CLUSTER_MIN] =
					Math.min(hp_percent, this.hp_percent[TDW_BOT_ATTACK_CLUSTER_MIN]);
				this.hp_percent[TDW_BOT_ATTACK_CLUSTER_MAX] =
					Math.max(hp_percent, this.hp_percent[TDW_BOT_ATTACK_CLUSTER_MAX]);
				var npc_resists = D2JSP_STAT_RESIST_GetResistsForUnit(npc_obj);
				for (var count_1 = 0; count_1 < D2JSP_UTIL_DAMAGE_COUNT; count_1++){
					this.resist[count_1][TDW_BOT_ATTACK_CLUSTER_MIN]    =
						Math.min(npc_resists[count_1],
						this.resist[count_1][TDW_BOT_ATTACK_CLUSTER_MIN]);
					this.resist[count_1][TDW_BOT_ATTACK_CLUSTER_MAX]    =
						Math.max(npc_resists[count_1],
						this.resist[count_1][TDW_BOT_ATTACK_CLUSTER_MAX]);
					this.resist[count_1][TDW_BOT_ATTACK_CLUSTER_TOTAL] +=
						npc_resists[count_1];
				}
				this.dist[TDW_BOT_ATTACK_CLUSTER_TOTAL]       += this_distance;
				this.coord[TDW_BOT_ATTACK_CLUSTER_TOTAL][0]   += npc_obj.x;
				this.coord[TDW_BOT_ATTACK_CLUSTER_TOTAL][1]   += npc_obj.y;
				this.x[TDW_BOT_ATTACK_CLUSTER_TOTAL]          += npc_obj.x;
				this.y[TDW_BOT_ATTACK_CLUSTER_TOTAL]          += npc_obj.y;
				this.hp[TDW_BOT_ATTACK_CLUSTER_TOTAL]         += npc_obj.hp;
				this.hpmax[TDW_BOT_ATTACK_CLUSTER_TOTAL]      += npc_obj.hpmax;
				this.hp_percent[TDW_BOT_ATTACK_CLUSTER_TOTAL] += hp_percent;
				this.chilled[TDW_BOT_ATTACK_CLUSTER_TOTAL]    +=
					(npc_obj.getState(D2JSP_STATE_FREEZE) ||
					npc_obj.getState(D2JSP_STATE_COLD)) ? 1 : 0;
/*
				for (var count_1 = 0; count_1 < D2JSP_STAT_COUNT; count_1++)
					this.stats[count_1] = (npc_obj.getStat(count_1)) ? true : false;
*/
/*
	ORIGINAL LOGIC
*/
if (true) {
				for (var count_1 = D2JSP_ENCHANT_MINIMUM;
					count_1 <= D2JSP_ENCHANT_MAXIMUM; count_1++)
					this.enchants[count_1] = (npc_obj.getEnchant(count_1)) ? true : false;
}
else {
				for (var count_1 = D2JSP_ENCHANT_MINIMUM;
					count_1 <= D2JSP_ENCHANT_MAXIMUM; count_1++) {
					if (npc_obj.getEnchant(count_1)) {
						this.enchants[count_1] = true;
						if (!D2JSP_ENCHANT_IsValid(count_1))
							TDW_BOT_Log.logInfo("INVALID ENCHANT ENCOUNTERED: (" +
								count_1 + "): " + "name = " + npc_obj.name +
								", classid = " + npc_obj.classid + ", x = " +
								npc_obj.x + ", y = " + npc_obj.y + ((count_1 == 20) ?
								("Velocity percent = " + npc_obj.getStat(67)) :""));
					}
				}
}
				for (var count_1 = 0; count_1 < D2JSP_STATE_COUNT; count_1++)
					this.states[count_1] = (npc_obj.getState(count_1)) ? true : false;
				if (this.attr_single_obj && (!this.attr_single_found))
					this.attr_single_found = this.attr_single_obj.checkNPC(npc_obj);
				this.count++;
			}
		} while (npc_obj && npc_obj.getNext(null, this.mode_mask));
		TDW_BOT_ClusterLastCount = this.count;
		if (this.count) {
			this.dist[TDW_BOT_ATTACK_CLUSTER_MEAN]       =
				this.dist[TDW_BOT_ATTACK_CLUSTER_TOTAL] / this.count;
			this.coord[TDW_BOT_ATTACK_CLUSTER_MEAN][0]   =
				Math.floor(this.coord[TDW_BOT_ATTACK_CLUSTER_TOTAL][0] / this.count);
			this.coord[TDW_BOT_ATTACK_CLUSTER_MEAN][1]   =
				Math.floor(this.coord[TDW_BOT_ATTACK_CLUSTER_TOTAL][1] / this.count);
			this.x[TDW_BOT_ATTACK_CLUSTER_MEAN]          =
				this.x[TDW_BOT_ATTACK_CLUSTER_TOTAL] / this.count;
			this.y[TDW_BOT_ATTACK_CLUSTER_MEAN]          =
				this.y[TDW_BOT_ATTACK_CLUSTER_TOTAL] / this.count;
			this.hp[TDW_BOT_ATTACK_CLUSTER_MEAN]         =
				this.hp[TDW_BOT_ATTACK_CLUSTER_TOTAL] / this.count;
			this.hpmax[TDW_BOT_ATTACK_CLUSTER_MEAN]      =
				this.hpmax[TDW_BOT_ATTACK_CLUSTER_TOTAL] / this.count;
			this.hp_percent[TDW_BOT_ATTACK_CLUSTER_MEAN] =
				this.hp_percent[TDW_BOT_ATTACK_CLUSTER_TOTAL] / this.count;
			this.chilled[TDW_BOT_ATTACK_CLUSTER_MEAN]    =
				(this.chilled[TDW_BOT_ATTACK_CLUSTER_TOTAL] / this.count) * 100;
			for (var count_1 = 0; count_1 < D2JSP_UTIL_DAMAGE_COUNT; count_1++)
				this.resist[count_1][TDW_BOT_ATTACK_CLUSTER_MEAN] =
					this.resist[count_1][TDW_BOT_ATTACK_CLUSTER_TOTAL] / this.count;
			if (this.attr_multi_obj)
				this.attr_multi_found = this.attr_multi_obj.checkCluster(this);
			this.dist_circles_total[0] = this.dist_circles[0];
			for (var count_1 = 1; count_1 < this.dist_circles.length; count_1++)
				this.dist_circles_total[count_1] =
					this.dist_circles_total[count_1 - 1] + this.dist_circles[count_1];
		}
/*
		else {
			this.dist       = [0, 0, 0, 0];
			this.hp         = [0, 0, 0, 0];
			this.hpmax      = [0, 0, 0, 0];
			this.hp_percent = [0, 0, 0, 0];
			for (var count_1 = 0; count_1 < D2JSP_UTIL_DAMAGE_COUNT; count_1++)
				this.resist[count_1] = [0, 0, 0, 0];
		}
*/
	}

	this.name += " = " + this.count;

//	runGC();

	this.checkAttr            = function() {
		return((this.attr_single_obj != null) ? this.attr_single_found :
			((this.attr_multi_obj != null) ? this.attr_multi_found : null));
	}

	this.getClusterAttackSpec = function() {
		var coord_bounds = TDW_BOT_ATTACK_DetermineDistances(this);
		return(new TDW_THREAT_MoveSpec(coord_bounds[0], coord_bounds[1]));
	}

	this.getResistList        = function() {
		var resist_list = new Array(D2JSP_UTIL_DAMAGE_COUNT);

		for (var count_1 = 0; count_1 < D2JSP_UTIL_DAMAGE_COUNT; count_1++)
			resist_list[count_1] =
				this.resist[count_1][TDW_BOT_ATTACK_CLUSTER_MEAN];
		return(resist_list);
	}

	this.toStringList         = function() {
		var tmp_list = new Array();

		tmp_list.push(["Center Coordinate", "[" + this.center_coord[0] + ", " +
			this.center_coord[1] + "]"]);
		tmp_list.push(["Radius", this.radius]);
		tmp_list.push(["NPC Count", this.count]);
		tmp_list.push(["Mode Mask",
			D2JSP_UTIL_FORMAT_RJust(D2JSP_UTIL_FORMAT_ZeroFill("0x" + 
			((this.mode_mask) ? this.mode_mask.toString(16) : 0), 8), 18) + " = " +
			D2JSP_MODE_UnitModeFlagsToNameString(D2JSP_UTIL_GETUNIT_NPC,
			this.mode_mask)]);
		tmp_list.push(["Collision Mask",
			"0x" + D2JSP_UTIL_FORMAT_ZeroFill(this.coll_mask.toString(2), 8)]);
		tmp_list.push(["Nearest Any NPC", this.dist_nearest_any]);
		for (var count_2 = 0; count_2 < this.dist_circles.length; count_2++)
			tmp_list.push(["NPCs In Radius / " +
				D2JSP_UTIL_FORMAT_RJust((count_2 + 1) * 5, 2) + " Per",
				D2JSP_UTIL_FORMAT_RJust(this.dist_circles[count_2], 3)]);
		for (var count_2 = 0; count_2 < this.dist_circles_total.length; count_2++)
			tmp_list.push(["NPCs In Radius / " +
				D2JSP_UTIL_FORMAT_RJust((count_2 + 1) * 5, 2) + " Total",
				D2JSP_UTIL_FORMAT_RJust(this.dist_circles_total[count_2], 3)]);

		var start_index = tmp_list.length;

		tmp_list[start_index]     = ["Distance"];
		tmp_list[start_index + 1] = ["Coordinates"];
		tmp_list[start_index + 2] = ["X-Coordinate"];
		tmp_list[start_index + 3] = ["Y-Coordinate"];
		tmp_list[start_index + 4] = ["Hit Points"];
		tmp_list[start_index + 5] = ["Hit Points Max"];
		tmp_list[start_index + 6] = ["Hit Points %"];
		tmp_list[start_index + 7] = ["Chilled/Frozen"];

		for (var count_2 = 0; count_2 < D2JSP_UTIL_DAMAGE_COUNT; count_2++)
			tmp_list[start_index + 8 + count_2] =
				[D2JSP_STAT_StatToName(D2JSP_STAT_RESIST_LinkageList[count_2])];

		for (var count_1 = 0;
			count_1 < TDW_BOT_ATTACK_ClusterNameList.length; count_1++) {
			tmp_list[start_index].push(this.dist[count_1]);
			tmp_list[start_index + 1].push("[" + this.coord[count_1][0] + ", " +
				this.coord[count_1][1] + "]");
			tmp_list[start_index + 2].push(this.x[count_1]);
			tmp_list[start_index + 3].push(this.y[count_1]);
			tmp_list[start_index + 4].push(this.hp[count_1]);
			tmp_list[start_index + 5].push(this.hpmax[count_1]);
			tmp_list[start_index + 6].push(this.hp_percent[count_1]);
			tmp_list[start_index + 7].push(this.chilled[count_1]);
			for (var count_2 = 0; count_2 < D2JSP_UTIL_DAMAGE_COUNT; count_2++)
				tmp_list[start_index + 8 + count_2].
					push(this.resist[count_2][count_1]);
		}

		var max_length = 0;
		for (var count_1 = 0; count_1 < tmp_list.length; count_1++)
			max_length = Math.max(max_length, tmp_list[count_1][0].length);

		var out_list = new Array();
		for (var count_1 = 0; count_1 < tmp_list.length; count_1++) {
			var tmp_string = D2JSP_UTIL_FORMAT_LJust(tmp_list[count_1][0],
				max_length) + ":";
			for (var count_2 = 1; count_2 < tmp_list[count_1].length; count_2++) {
				if (count_1 != 3) {
					if (D2JSP_UTIL_GEN_TypeOfNumber(tmp_list[count_1][count_2]))
						tmp_string += " " + D2JSP_UTIL_FORMAT_RJust(
							tmp_list[count_1][count_2].toFixed(2), 18);
					else
						tmp_string += " " + D2JSP_UTIL_FORMAT_RJust(
							tmp_list[count_1][count_2], 18);
				}
				else
				tmp_string += " " + tmp_list[count_1][count_2];
			}
			out_list.push(tmp_string);
		}

//		for (var count_1 = D2JSP_ENCHANT_MINIMUM;
		for (var count_1 = 0;
			count_1 <= D2JSP_ENCHANT_MAXIMUM; count_1++) {
			if (this.enchants[count_1])
				out_list.push(D2JSP_UTIL_FORMAT_LJust("Enchant", max_length) +
					": " + D2JSP_UTIL_FORMAT_RJust(count_1, 3) + " = " +
				D2JSP_ENCHANT_EnchantToName(count_1));
		}

		for (var count_1 = 0; count_1 < D2JSP_STATE_COUNT; count_1++) {
			if (this.states[count_1])
				out_list.push(D2JSP_UTIL_FORMAT_LJust("State", max_length) +
					": " + D2JSP_UTIL_FORMAT_RJust(count_1, 3) + " = " +
					D2JSP_STATE_StateToName(count_1));
		}

		return(out_list);
	}

	this.toLog                = function(log_obj) {
		log_obj = (log_obj instanceof D2JSP_UTIL_Log) ? log_obj :
			D2JSP_UTIL_LOG_GetALog();
		log_obj.emitSep();
		log_obj.logInfoQuiet(this.toStringList());
		log_obj.emitSep();
	}
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
// Object TDW_BOT_ATTACK_ClusterSimple constructor...
function TDW_BOT_ATTACK_ClusterSimple(center_coord, radius, flags, max_count)
{
	this.center_coord     = (D2JSP_UTIL_GEN_TypeOfArrayIndexed(center_coord) &&
		(center_coord.length > 1)) ? center_coord : [me.x, me.y];
	this.radius           = (D2JSP_UTIL_GEN_TypeOfUInt(radius) && radius) ?
		radius : TDW_BOT_CLUSTER_DEFAULT_RADIUS;
	this.mode_mask        =
		D2JSP_MODE_FLAG_INDICATOR | D2JSP_MODE_NPC_FLAGS_ALL_BUT_DEAD;
	this.coll_mask        = TDW_BOT_COLL_BLOCK_ATTACK;
//	this.npc_eval_func    = D2JSP_NPC_ShouldAttackEnemy;
	this.npc_eval_func    = D2JSP_NPC_ShouldAvoidEnemyHere;
	this.flags            = flags;
	this.max_count        = max_count;

	this.name             = "TDW_BOT_ATTACK_ClusterSimple() [" +
		this.center_coord + "]" + this.radius;
	this.type             = -1;

	this.count_all        = 0;
	this.count_coll_all   = 0;
	this.count            = 0;
	this.distance         = 0;
	this.hp_percent       = 0;

	// This number of NPCs within distance 5, 10, 15, 20, 25, & 30.
	this.dist_circles     = [0, 0, 0, 0, 0, 0, 0];

	this.dist_nearest_any = 999999999;

	var npc_obj = getUnit(D2JSP_UTIL_GETUNIT_NPC, null, this.mode_mask);

	if (npc_obj) {
		var this_distance;
		var do_this_npc_flag;	// Hack because it's not in earlier versions.
		do {
			do_this_npc_flag = false;
			this.count_all++;
			if (++TDW_BOT_GetUnitNPCCount > 100) {
				runGC();
				TDW_BOT_GetUnitNPCCount = 0;
			}
			if (this.npc_eval_func(npc_obj)) {
				this_distance = Dist(this.center_coord[0], this.center_coord[1],
					npc_obj.x, npc_obj.y);
				if ((this.flags & TDW_BOT_CLUSTER_FLAG_NO_PRESETS) &&
					npc_obj.getEnchant(D2JSP_ENCHANT_PRESET_BOSS))
					;
				else if (this_distance <= this.radius) {
					this.count_coll_all++;
					if (!this.coll_mask)
						do_this_npc_flag = true;
					else
						do_this_npc_flag = (checkCollision(me, npc_obj,
							this.coll_mask)) ? false : true;
				}
				else if ((!this.coll_mask) || (!checkCollision(me, npc_obj,
					this.coll_mask)))
					this.dist_nearest_any = Math.min(this.dist_nearest_any,
						this_distance);
			}
			if (do_this_npc_flag) {
				this.dist_nearest_any = Math.min(this.dist_nearest_any,
					this_distance);
				var this_circle = Math.floor(this_distance / 5);
				if (this_circle < this.dist_circles.length)
					this.dist_circles[this_circle]++;
				this.distance   += this_distance;
				this.hp_percent += (npc_obj.hp / npc_obj.hpmax) * 100;
				this.count++;
				if (this.max_count && (this.count >= this.max_count))
					break;
			}
		} while (npc_obj && npc_obj.getNext(null, this.mode_mask));
		if (this.count) {
			this.distance   /= this.count;
			this.hp_percent /= this.count;
		}
	}

	this.name += " = " + this.count;

//	runGC();

	this.toStringList = function() {
		var tmp_list = new Array();

		tmp_list.push(["Center Coordinate", "[" + this.center_coord[0] + ", " +
			this.center_coord[1] + "]"]);
		tmp_list.push(["Radius", this.radius]);
		tmp_list.push(["Maximum Count", this.max_count]);
		tmp_list.push(["NPC Count", this.count]);
		tmp_list.push(["Distance", this.distance]);
		tmp_list.push(["Hit Point %", this.hp_percent]);
		tmp_list.push(["Mode Mask",
			D2JSP_UTIL_FORMAT_RJust(D2JSP_UTIL_FORMAT_ZeroFill("0x" + 
			((this.mode_mask) ? this.mode_mask.toString(16) : 0), 8), 18) + " = " +
			D2JSP_MODE_UnitModeFlagsToNameString(D2JSP_UTIL_GETUNIT_NPC,
			this.mode_mask)]);
		tmp_list.push(["Collision Mask",
			"0x" + D2JSP_UTIL_FORMAT_ZeroFill(this.coll_mask.toString(2), 8)]);
		tmp_list.push(["Nearest Any NPC", this.dist_nearest_any]);
		for (var count_2 = 0; count_2 < this.dist_circles.length; count_2++)
			tmp_list.push(["NPCs In Radius / " +
				D2JSP_UTIL_FORMAT_RJust((count_2 + 1) * 5, 2) + " Per",
				D2JSP_UTIL_FORMAT_RJust(this.dist_circles[count_2], 3)]);
		for (var count_2 = 0; count_2 < this.dist_circles_total.length; count_2++)
			tmp_list.push(["NPCs In Radius / " +
				D2JSP_UTIL_FORMAT_RJust((count_2 + 1) * 5, 2) + " Total",
				D2JSP_UTIL_FORMAT_RJust(this.dist_circles_total[count_2], 3)]);

		var max_length = 0;
		for (var count_1 = 0; count_1 < tmp_list.length; count_1++)
			max_length = Math.max(max_length, tmp_list[count_1][0].length);

		var out_list = new Array();
		for (var count_1 = 0; count_1 < tmp_list.length; count_1++) {
			var tmp_string = D2JSP_UTIL_FORMAT_LJust(tmp_list[count_1][0],
				max_length) + ":";
			if (D2JSP_UTIL_GEN_TypeOfNumber(tmp_list[count_1][1]))
				tmp_string += " " + D2JSP_UTIL_FORMAT_RJust(
					tmp_list[count_1][1].toFixed(2), 18);
			else
				tmp_string += " " + D2JSP_UTIL_FORMAT_RJust(
					tmp_list[count_1][1], 18);
			out_list.push(tmp_string);
		}

		return(out_list);
	}

	this.toLog = function(log_obj) {
		log_obj = (log_obj instanceof D2JSP_UTIL_Log) ? log_obj :
			D2JSP_UTIL_LOG_GetALog();
		log_obj.emitSep();
		log_obj.logInfoQuiet(this.toStringList());
		log_obj.emitSep();
	}
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
// Object TDW_BOT_ATTACK_ClusterCount constructor...
function TDW_BOT_ATTACK_ClusterCount(center_coord, radius, npc_eval_func,
	flags, npc_id, max_count)
{
	this.center_coord    = (D2JSP_UTIL_GEN_TypeOfCoord(center_coord)) ?
		center_coord : [me.x, me.y];
	this.radius           = (D2JSP_UTIL_GEN_TypeOfUInt(radius) && radius) ?
		radius : TDW_BOT_CLUSTER_DEFAULT_RADIUS;
	this.mode_mask       =
		D2JSP_MODE_FLAG_INDICATOR | D2JSP_MODE_NPC_FLAGS_ALL_BUT_DEAD;
	this.coll_mask       = TDW_BOT_COLL_BLOCK_ATTACK;
	this.npc_eval_func   = (D2JSP_UTIL_GEN_TypeOfFunction(npc_eval_func)) ?
		npc_eval_func : D2JSP_NPC_ShouldAttackEnemy;
	this.flags           = flags;
	this.npc_id          = npc_id;
	this.max_count       = max_count;

	this.count           = 0;
	this.name_base       = "TDW_BOT_ATTACK_ClusterCount() [" +
		this.center_coord + "]" + this.radius;
	this.type            = -1;

	this.examineNPCs     = function(npc_id) {
		this.count = 0;

		var npc_obj = getUnit(D2JSP_UTIL_GETUNIT_NPC, npc_id, this.mode_mask);

		if (npc_obj) {
			do {
				if (++TDW_BOT_GetUnitNPCCount > 100) {
					runGC();
					TDW_BOT_GetUnitNPCCount = 0;
				}
				if (this.npc_eval_func(npc_obj)) {
					var this_distance = Dist(this.center_coord[0],
						this.center_coord[1], npc_obj.x, npc_obj.y);
					if ((this.flags & TDW_BOT_CLUSTER_FLAG_NO_PRESETS) &&
						npc_obj.getEnchant(D2JSP_ENCHANT_PRESET_BOSS))
						;
					else if ((this_distance <= this.radius) &&
						(!checkCollision(me, npc_obj, this.coll_mask))) {
						this.count++;
						if (this.max_count && (this.count >= this.max_count))
							break;
					}
				}
			} while (npc_obj && npc_obj.getNext(npc_id, this.mode_mask));
		}

		return(this.count);
	}

	this.examineNPCs(this.npc_id);

//	runGC();

	this.toString        = function() {
		return(this.name_base + " = " + this.count);
	}
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TDW_BOT_ATTACK_GetAndAttackCluster(min_count, center_coord, radius,
	mode_mask, cluster_flags, exclude_hash, move_control)
{
	min_count = (D2JSP_UTIL_GEN_TypeOfNumber(min_count) && (min_count > 0)) ?
		min_count : 1;

	var npc_cluster = new TDW_BOT_ATTACK_Cluster(center_coord, radius, mode_mask,
		TDW_BOT_COLL_BLOCK_ATTACK, null, cluster_flags, null, null, exclude_hash);

	return((npc_cluster.count >= min_count) ?
		TDW_BOT_ATTACK_AttackCluster(npc_cluster, move_control) : false);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TDW_BOT_ATTACK_AttackCluster(npc_cluster, in_move_control)
{
	if (!(npc_cluster instanceof TDW_BOT_ATTACK_Cluster))
		npc_cluster = new TDW_BOT_ATTACK_Cluster();

	var move_control;
	if (in_move_control instanceof TDW_BOT_ATTACK_MoveControl) {
		move_control                      = D2JSP_UTIL_GEN_CloneObject(in_move_control);
		move_control.action_flags        |= TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_ALL;
		move_control.threat_cluster_spec  =
			(in_move_control.threat_cluster_spec instanceof TDW_THREAT_MoveSpec) ?
			in_move_control.threat_cluster_spec : npc_cluster.getClusterAttackSpec();
		move_control.threat_avoid_spec    =
			(in_move_control.threat_avoid_spec instanceof TDW_THREAT_MoveSpec) ?
			in_move_control.threat_avoid_spec : move_control.threat_cluster_spec;
		move_control.max_attack_ms        = 1000;
	}
	else {
		move_control                     = 
			new TDW_BOT_ATTACK_MoveControl(TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_ALL,
			null, null, 10, 1000, npc_cluster.dist[TDW_BOT_ATTACK_CLUSTER_MAX]);
		move_control.threat_cluster_spec = npc_cluster.getClusterAttackSpec();
	}

	var action_count = TDW_BOT_ATTACK_AttackNearbyMonstersCluster(npc_cluster,
		move_control);

	return((action_count) ? true : false);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
var TDW_BOT_ATTACK_MAX_COORD_MAX        = 30;
var TDW_BOT_ATTACK_MAX_DISTANCE_MAX     =
	D2JSP_UTIL_PATH_CoordLengthToDistance(TDW_BOT_ATTACK_MAX_COORD_MAX);

var TDW_BOT_ATTACK_DEFAULT_COORD_MIN    = 11;
var TDW_BOT_ATTACK_DEFAULT_COORD_MAX    = 12;

var TDW_BOT_ATTACK_DEFAULT_DISTANCE_MIN =
	D2JSP_UTIL_PATH_CoordLengthToDistance(TDW_BOT_ATTACK_DEFAULT_COORD_MIN);
var TDW_BOT_ATTACK_DEFAULT_DISTANCE_MAX =
	D2JSP_UTIL_PATH_CoordLengthToDistance(TDW_BOT_ATTACK_DEFAULT_COORD_MAX);
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TDW_BOT_ATTACK_DetermineDistances(enemy_obj, attacks_npc)
{
	// //////////////////////////////////////////////////////////////////////
	// A minor optimization permits the caller to invoke this function
	// with a list of possible attacks for the enemy in question. If so,
	// use that list. Otherwise, get our own...
	attacks_npc = (D2JSP_UTIL_GEN_TypeOfArrayIndexed(attacks_npc)) ?
		attacks_npc : TDW_BOT_AttackSelector.getAttackListBasic(enemy_obj);
	// //////////////////////////////////////////////////////////////////////

	// //////////////////////////////////////////////////////////////////////
	// If there aren't any attacks for the enemy, return our basic heuristic
	//	min and max coordinate distances...
	if (!attacks_npc.length)
		return([8, 17]);
	// //////////////////////////////////////////////////////////////////////

	// //////////////////////////////////////////////////////////////////////
	// Get the effective resists (after application of Cold Mastery)...
	var resists = TDW_BOT_AttackSelector.getResists(enemy_obj);
	// //////////////////////////////////////////////////////////////////////

	// //////////////////////////////////////////////////////////////////////
	// Get the cold length percentage. For non-NPCs, we set this at a nominal
	//	value of 1. For NPCs, we get the actual data from the MPQ monstats.txt.
	// This is VERY important for use with Andariel in 1.10...
	var cold_length = ((enemy_obj instanceof TDW_BOT_ATTACK_Cluster) ||
		(enemy_obj.type == D2JSP_UTIL_GETUNIT_PLAYER)) ? 1 :
		D2JSP_NPC_GetColdLengthPercent(enemy_obj);
	// //////////////////////////////////////////////////////////////////////

	var index_list  = new Array();

	// //////////////////////////////////////////////////////////////////////
	// First attack in the list is the most damaging of any type or delay...
	index_list.push(0);
	// //////////////////////////////////////////////////////////////////////

	// //////////////////////////////////////////////////////////////////////
	// Find the most-damaging non-timered attack...
	//		1) First see if an already-selected attack meets the criterion.
	//		2) If not, examine all attacks.
	var done_flag = false;
	for (var count_1 = 0; count_1 < index_list.length; count_1++) {
		if (!attacks_npc[index_list[count_1]].delay) {
			done_flag = true;
			break;
		}
	}
	if (!done_flag) {
		for (var count_1 = 1; count_1 < attacks_npc.length; count_1++) {
			if (!attacks_npc[count_1].delay) {
				index_list.push(count_1);
				break;
			}
		}
	}
	// //////////////////////////////////////////////////////////////////////

	// //////////////////////////////////////////////////////////////////////
	// If the enemy has mastery-adjusted cold resistance of less than 100%
	//	and has a cold effect time greater that zero, we'll to be able to use
	//	cold attacks to slow that enemy down...
	if ((resists[D2JSP_UTIL_DAMAGE_COLD] < 100) && (cold_length > 0)) {
		// ////////////////////////////////////////////////////////////////
		// Find the most-damaging cold attack...
		//		1) First see if an already-selected attack meets the criterion.
		//		2) If not, examine all attacks.
		var done_flag = false;
		for (var count_1 = 0; count_1 < index_list.length; count_1++) {
			if (attacks_npc[index_list[count_1]].element_dmg ==
				D2JSP_UTIL_DAMAGE_COLD) {
				done_flag = true;
				break;
			}
		}
		if (!done_flag) {
			for (var count_1 = 1; count_1 < attacks_npc.length; count_1++) {
				if (attacks_npc[count_1].element_dmg == D2JSP_UTIL_DAMAGE_COLD) {
					index_list.push(count_1);
					break;
				}
			}
		}
		// ////////////////////////////////////////////////////////////////
		// If we found a cold attack, look now for an untimered cold attack...
		//		1) First see if an already-selected attack meets the criterion.
		//		2) If not, examine all attacks.
		if (done_flag) {
			done_flag = false;
			for (var count_1 = 0; count_1 < index_list.length; count_1++) {
				if ((!attacks_npc[index_list[count_1]].delay) &&
					(attacks_npc[index_list[count_1]].element_dmg ==
					D2JSP_UTIL_DAMAGE_COLD)) {
					done_flag = true;
					break;
				}
			}
			if (!done_flag) {
				for (var count_1 = 1; count_1 < attacks_npc.length; count_1++) {
					if ((!attacks_npc[count_1].delay) &&
						(attacks_npc[count_1].element_dmg == D2JSP_UTIL_DAMAGE_COLD)) {
						index_list.push(count_1);
						break;
					}
				}
			}
		}
		// ////////////////////////////////////////////////////////////////
	}
	// //////////////////////////////////////////////////////////////////////

/*
TDW_BOT_Log.logInfo(enemy_obj.name + " Attack Ranking (Preferred):");
for (var count_1 = 0; count_1 < index_list.length; count_1++)
	TDW_BOT_Log.logInfo(enemy_obj.name + " attack = [" +
		attacks_npc[index_list[count_1]] + "]");
*/

	// //////////////////////////////////////////////////////////////////////
	//	We now have a minimum list of attacks which we want to be able to use
	//	against the enemy in question. Find the minimum and maximum distances
	// of any of those attacks.
	var range = [
						TDW_BOT_ATTACK_DEFAULT_DISTANCE_MIN,
						TDW_BOT_ATTACK_DEFAULT_DISTANCE_MAX
					]

/*
TDW_BOT_Log.logInfo(enemy_obj.name + " Attack Distances Calculated Initial      = [" +
	D2JSP_UTIL_PATH_DistanceToCoordLength(range[0]).toFixed(4) + "," +
	D2JSP_UTIL_PATH_DistanceToCoordLength(range[1]).toFixed(4) + "] from (["
	+ range + "])");
*/

	for (var count_1 = 0; count_1 < index_list.length; count_1++) {
		range[0] = Math.min(range[0], attacks_npc[index_list[count_1]].distance);
		range[1] = Math.max(range[1], attacks_npc[index_list[count_1]].distance);
/*
TDW_BOT_Log.logInfo(enemy_obj.name + " Attack Distances Calculated Intermediate = [" +
	D2JSP_UTIL_PATH_DistanceToCoordLength(range[0]).toFixed(4) + "," +
	D2JSP_UTIL_PATH_DistanceToCoordLength(range[1]).toFixed(4) + "] from (["
	+ range + "])");
*/
	}

/*
TDW_BOT_Log.logInfo(enemy_obj.name + " Attack Distances Calculated Sub 1        = [" +
	D2JSP_UTIL_PATH_DistanceToCoordLength(range[0]).toFixed(4) + "," +
	D2JSP_UTIL_PATH_DistanceToCoordLength(range[1]).toFixed(4) + "] from (["
	+ range + "])");
*/
	// The ensure the maximum is within range of the most-damaging attack...
	range[1] = Math.min(range[1], attacks_npc[index_list[0]].distance);

/*
TDW_BOT_Log.logInfo(enemy_obj.name + " Attack Distances Calculated Sub 2        = [" +
	D2JSP_UTIL_PATH_DistanceToCoordLength(range[0]).toFixed(4) + "," +
	D2JSP_UTIL_PATH_DistanceToCoordLength(range[1]).toFixed(4) + "] from (["
	+ range + "])");
*/
	//	Apply the absolute maximum cap.
	range[1] = Math.min(range[1], TDW_BOT_ATTACK_MAX_DISTANCE_MAX);
	// //////////////////////////////////////////////////////////////////////

/*
TDW_BOT_Log.logInfo(enemy_obj.name + " Attack Distances Calculated Final        = [" +
	D2JSP_UTIL_PATH_DistanceToCoordLength(range[0]).toFixed(4) + "," +
	D2JSP_UTIL_PATH_DistanceToCoordLength(range[1]).toFixed(4) + "] from (["
	+ range + "])");
TDW_BOT_Log.logInfo(enemy_obj.name + " Final Coord Min/Max                    A = [" +
	range + "]");
*/

	range[0] = Math.floor(D2JSP_UTIL_PATH_DistanceToCoordLength(range[0]));
	range[1] = Math.floor(D2JSP_UTIL_PATH_DistanceToCoordLength(range[1]));

/*
TDW_BOT_Log.logInfo(enemy_obj.name + " Final Coord Min/Max                    B = [" +
	range + "]");
*/

	if ((range[1] - range[0]) < 5)
		range[0] -= 5 - (range[1] - range[0]);

/*
TDW_BOT_Log.logInfo(enemy_obj.name + " Final Coord Min/Max                    C = [" +
	range + "]");
*/

	return(range);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function D2JSP_STAT_RESIST_GetResistsForUnit(in_unit)
{
	var out_resists = new Array(D2JSP_UTIL_DAMAGE_COUNT);

	// //////////////////////////////////////////////////////////////////////
	// Get the resists...
	for (var count_1 = 0; count_1 < D2JSP_UTIL_DAMAGE_COUNT; count_1++)
		out_resists[count_1] =
			in_unit.getStat(D2JSP_STAT_RESIST_LinkageList[count_1]);
	// //////////////////////////////////////////////////////////////////////

	// //////////////////////////////////////////////////////////////////////
	// For non-mercenary NPCs, we done. But for players, a bit more complicated...
	if (in_unit.type == D2JSP_UTIL_GETUNIT_PLAYER) {
		for (var count_1 = 0; count_1 < D2JSP_UTIL_DAMAGE_COUNT; count_1++) {
			// Subtract the game difficulty penalty.
			out_resists[count_1] -=
				D2JSP_UTIL_DAMAGE_DiffAdjustmentList[me.diff][count_1];
			// Get the stat-based maximum resistance cap.
			var resist_cap = (D2JSP_STAT_RESIST_MAX_LinkageList[count_1] < 0) ?
				(0 - D2JSP_STAT_RESIST_MAX_LinkageList[count_1]) :
				in_unit.getStat(D2JSP_STAT_RESIST_MAX_LinkageList[count_1]);
			// Apply the stat-based maximum resistance cap.
			out_resists[count_1] = Math.min(out_resists[count_1], resist_cap);
			// Apply the global cap on player resistances...
			out_resists[count_1] = Math.min(out_resists[count_1], 95);
		}
	}
	// //////////////////////////////////////////////////////////////////////

	return(out_resists);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function D2JSP_STAT_RESIST_SortResistsList(resists_list)
{
	return(resists_list.sort(D2JSP_STAT_RESIST_SortResistsList_Compare));
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function D2JSP_STAT_RESIST_SortResistsList_Compare(item_1, item_2)
{
	return((item_1 < item_2) ? -1 : (item_1 > item_2) ? 1 : 0);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TDW_BOT_ATTACK_SelectForResists_NPC(npc_obj)
{
	var resist_list = D2JSP_STAT_RESIST_GetResistsForUnit(npc_obj);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TDW_BOT_ATTACK_SelectForResists_Cluster(cluster_obj)
{
	var resist_list = new Array(D2JSP_UTIL_DAMAGE_COUNT);

	for (var count_1 = 0; count_1 < D2JSP_UTIL_DAMAGE_COUNT; count_1++)
		resist_list[count_1] =
			cluster_obj.resist[count_1][TDW_BOT_ATTACK_CLUSTER_MEAN];
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TDW_BOT_ATTACK_SelectForResists_Basic(resists_list)
{
	var attack_list = new Array();

	resists_list = D2JSP_STAT_RESIST_SortResistsList(resists_list);

	for (var count_1 = 0; count_1 < D2JSP_UTIL_DAMAGE_COUNT; count_1++) {
		if (context_list["skill.attack.elemental.all"][count_1].length) {
			attack_list.push(context_list["skill.attack.elemental.all"][count_1]);
			break;
		}
	}

	return(attack_list);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
// Object TDW_BOT_ATTACK_SpecialNPC constructor
function TDW_BOT_ATTACK_SpecialNPC(npc_name, flags, loop_count, coord_min,
	coord_max, pre_func, attack_func, post_func, final_func)
{
	if (arguments.length && (arguments[0] instanceof TDW_BOT_ATTACK_SpecialNPC)) {
		this.name               = arguments[0].name;
		this.name_lc            = arguments[0].name_lc;
		this.flags              = arguments[0].flags;
		this.loop_count         = arguments[0].loop_count;
		this.coord_min          = arguments[0].coord_min;
		this.coord_max          = arguments[0].coord_max;
		this.pre_func           = arguments[0].pre_func;
		this.attack_func        = arguments[0].attack_func;
		this.post_func          = arguments[0].post_func;
		this.final_func         = arguments[0].final_func;
		this.gid                = arguments[0].gid;
		this.unit_type          = arguments[0].unit_type;
		this.interrupt_level    = arguments[0].interrupt_level;
		this.id_hash            = new Array();
		this.id_hash[npc_name]  = true;
		this.threat_attack_spec = arguments[0].threat_attack_spec;
		this.bounding_box                = D2JSP_UTIL_GEN_CloneObject(arguments[0].bounding_box);
		this.coord_min_min               = arguments[0].coord_min_min;
		this.coord_max_min               = arguments[0].coord_max_min;
		this.cluster_first_threshold_min = arguments[0].cluster_first_threshold_min;
		this.cluster_first_threshold_max = arguments[0].cluster_first_threshold_max;
		this.death_delay_distance        = arguments[0].death_delay_distance;
		this.death_delay_threshold       = arguments[0].death_delay_threshold;
		this.death_delay_time_min        = arguments[0].death_delay_time_min;
		this.death_delay_time_max        = arguments[0].death_delay_time_max;
		this.__CURRENT__                 = D2JSP_UTIL_GEN_CloneObject(arguments[0].__CURRENT__);
	}
	else if (arguments.length > 0) {
		this.name               = (D2JSP_UTIL_GEN_TypeOfStringNotEmpty(npc_name)) ?
			npc_name : "* INVALID NPC NAME *";
		this.name_lc            = this.name.toLowerCase();
		this.flags              = (D2JSP_UTIL_GEN_TypeOfUInt(flags)) ? flags :
			TDW_BOT_ATTACK_NPC_FLAG_NONE;
		this.loop_count         = (D2JSP_UTIL_GEN_TypeOfUInt(loop_count) &&
			loop_count) ? loop_count : 0;
		this.coord_min          = (D2JSP_UTIL_GEN_TypeOfUInt(coord_min)) ?
			coord_min : 0;
		this.coord_max          = (D2JSP_UTIL_GEN_TypeOfUInt(coord_max)) ?
			coord_max : 0;
		this.pre_func           = pre_func;
		this.attack_func        = attack_func;
		this.post_func          = post_func;
		this.final_func         = final_func;
		this.gid                = null;
		this.unit_type          = D2JSP_UTIL_GETUNIT_NPC;
		this.interrupt_level    = 0;
		this.id_hash            = new Array();
		this.id_hash[npc_name]  = true;
		this.threat_attack_spec = null;
		this.bounding_box                = null;
		this.coord_min_min               = 0;
		this.coord_max_min               = 0;
		this.cluster_first_threshold_min = TDW_BOT_ContextList["attack.special.npc.cluster.first.threshold.min"];
		this.cluster_first_threshold_max = TDW_BOT_ContextList["attack.special.npc.cluster.first.threshold.max"];
		this.death_delay_distance        = TDW_BOT_ContextList["attack.special.npc.death.delay.distance"];
		this.death_delay_threshold       = TDW_BOT_ContextList["attack.special.npc.death.delay.threshold"];
		this.death_delay_time_min        = TDW_BOT_ContextList["attack.special.npc.death.delay.time.min"];
		this.death_delay_time_max        = TDW_BOT_ContextList["attack.special.npc.death.delay.time.max"];
		this.__CURRENT__                 = new Array();
	}

	// Re-order min and max if necessary...
	if (this.coord_min > this.coord_max) {
		var coord_tmp = this.coord_min;
		this.coord_min = this.coord_max;
		this.coord_max = coord_tmp;
	}

	if (this.coord_min && this.coord_max) {
		// Difference between min and max must be at least 5 units...
		if ((this.coord_max - this.coord_min) < 3)
			this.coord_max += 5 - (this.coord_max - this.coord_min);
/*
		this.dist_min   = Math.max(this.coord_min - 1, 0);
		this.dist_max   = Math.floor(Math.sqrt((this.coord_max * this.coord_max) * 2)) + 1;
*/
		this.dist_min =
			Math.floor(D2JSP_UTIL_PATH_CoordLengthToDistance(this.coord_min));
		this.dist_max =
			Math.floor(D2JSP_UTIL_PATH_CoordLengthToDistance(this.coord_max));
	}

	this.toString = function() {
		return(
			"name = "                + this.name                + ", " +
			"name_lc = "             + this.name_lc             + ", " +
			"flags = "               + this.flags               + ", " +
			"loop_count = "          + this.loop_count          + ", " +
			"coord_min = "           + this.coord_min           + ", " +
			"coord_max = "           + this.coord_max           + ", " +
			"coord_min_min = "       + this.coord_min_min       + ", " +
			"coord_max_min = "       + this.coord_max_min       + ", " +
			"pre_func = "            + D2JSP_UTIL_FORMAT_FunctionToName(this.pre_func)            + ", " +
			"attack_func = "         + D2JSP_UTIL_FORMAT_FunctionToName(this.attack_func)         + ", " +
			"post_func = "           + D2JSP_UTIL_FORMAT_FunctionToName(this.post_func)           + ", " +
			"final_func = "          + D2JSP_UTIL_FORMAT_FunctionToName(this.final_func)          + ", " +
			"gid = "                 + this.gid                 + ", " +
			"unit_type = "           + this.unit_type           + ", " +
			"interrupt_level = "     + this.interrupt_level     + ", " +
			"id_hash = "             + this.id_hash             + ", " +
			"threat_attack_spec = "  + this.threat_attack_spec  + ", " +
			"bounding_box = "        + this.bounding_box        + ", " +
			"dist_min = "            + this.dist_min            + ", " +
			"dist_max = "            + this.dist_max);
	}
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
// Object TDW_BOT_ATTACK_SpecialNPCSpec constructor
function TDW_BOT_ATTACK_SpecialNPCSpec()
{
	this.is_busy         = false;
	this.do_attack       = true;
	this.npc_hash        = new Array();

	this.__CURRENT__     = new Array();

	this.copyFromMaster    = function(npc_name) {
		var this_npc = TDW_BOT_AttackNPCSpecData.findNPC(npc_name);

		if (this_npc) {
			this.addNPC(new TDW_BOT_ATTACK_SpecialNPC(this_npc));
			return(true);
		}

		return(false);
	}

	this.copyFromMasterAll = function() {
		for (var this_npc in TDW_BOT_AttackNPCSpecData.npc_hash)
			this.addNPC(new TDW_BOT_ATTACK_SpecialNPC(this_npc));
	}

	this.updatePlayers     = function() {
//		var party_obj  = getParty(me.gid);
		var party_obj  = getParty();
		var my_partyid = party_obj.partyid;

		if (party_obj) {
			do {
				if (getPlayerFlag(me.gid, party_obj.gid, 8) &&
					(!this.findNPC(party_obj.name)))
					this.addPlayer(party_obj.name);
			} while (party_obj && party_obj.getNext());
		}
	}

	this.addPlayer         = function(an_npc) {
		if (an_npc instanceof TDW_BOT_ATTACK_SpecialNPC) {
			an_npc.unit_type              = D2JSP_UTIL_GETUNIT_PLAYER;
			this.npc_hash[an_npc.name_lc] = an_npc;
		}
		else if (D2JSP_UTIL_GEN_TypeOfString(an_npc)) {
			var new_spec = new TDW_BOT_ATTACK_SpecialNPC(an_npc,
				TDW_BOT_ATTACK_NPC_FLAG_NONE, 1, 8, 25);
			new_spec.unit_type              = D2JSP_UTIL_GETUNIT_PLAYER;
			this.npc_hash[new_spec.name_lc] = new_spec;
		}
	}

	this.addNPC            = function(an_npc) {
		if (an_npc instanceof TDW_BOT_ATTACK_SpecialNPC)
			this.npc_hash[an_npc.name_lc] = an_npc;
	}

	this.findNPC           = function(npc_name) {
		return((npc_name.toLowerCase() in this.npc_hash) ?
			this.npc_hash[npc_name.toLowerCase()] : null);
	}

	this.deleteNPC         = function(npc_name) {
		var npc_obj = this.findNPC(npc_name);

		if (npc_obj)
			delete this.npc_hash[npc_name.toLowerCase()];

		return(npc_obj);
	}

	this.locateAny         = function() {
		var found_npc;

		return((!(found_npc = this.locateAnyBasic(D2JSP_UTIL_GETUNIT_PLAYER))) ?
			this.locateAnyBasic(D2JSP_UTIL_GETUNIT_NPC) : found_npc);
	}

	this.locateAnyBasic    = function(unit_type) {
		var located_npc;
		for (var this_prop in this.npc_hash) {
			if ((located_npc = getUnit(unit_type, this_prop)) != null) {
/*
				if (++TDW_BOT_GetUnitNPCCount > 100) {
					runGC();
					TDW_BOT_GetUnitNPCCount = 0;
				}
*/
				// NPCs are sometimes detectable from a different area. Ignore this.
				if (me.area != located_npc.area) {
					D2JSP_UTIL_LOG_GetALog().logWarning("NPC " + located_npc.name +
						" was located in area " + located_npc.area + " (" +
						D2JSP_AREA_AreaToName(located_npc.area) + ") when my area " +
						" is " + me.area + " (" + D2JSP_AREA_AreaToName() + ") --- " +
						"NPC was ignored.");
					continue;
				}
				else if ((located_npc.name == "Baal") &&
					(me.area != D2JSP_AREA_THE_WORLDSTONE_CHAMBER))
					continue;
				return(this.npc_hash[this_prop]);
			}
		}

		return(null);
	}

	this.killAny           = function() {
		var return_code = false;

		if ((!this.is_busy) && this.do_attack) {
			this.is_busy = true;
			var kill_npc = this.locateAny();
			if (kill_npc != null) {
				if (kill_npc.unit_type != D2JSP_UTIL_GETUNIT_PLAYER)
					this.deleteNPC(kill_npc.name);
				TDW_BOT_ATTACK_KillSpecifiedNPC(kill_npc);
			}
			this.is_busy = false;
		}

		return(return_code);
	}

	this.setIsBusy         = function(flag) {
		var old_value = this.is_busy;

		this.is_busy = (flag) ? true : false;

		return(old_value);
	}

	this.setIsBusyOn       = function() {
		return(this.setIsBusy(true));
	}

	this.setIsBusyOff      = function() {
		return(this.setIsBusy(false));
	}

	this.setDoAttack       = function(flag) {
		var old_value = this.do_attack;

		this.do_attack = (flag) ? true : false;

		return(old_value);
	}

	this.setDoAttackOn     = function() {
		return(this.setDoAttack(true));
	}

	this.setDoAttackOff    = function() {
		return(this.setDoAttack(false));
	}

	this.setMustKill       = function(npc_name, flag) {
		var found_npc = this.findNPC(npc_name);
		var old_flags = TDW_BOT_ATTACK_NPC_FLAG_NONE;

		if (found_npc) {
			old_flags       = found_npc.flags;
			found_npc.flags = (flag) ?
				(found_npc.flags | TDW_BOT_ATTACK_NPC_FLAG_MUST_KILL) :
				((found_npc.flags & TDW_BOT_ATTACK_NPC_FLAG_MUST_KILL) ?
				(found_npc.flags ^ TDW_BOT_ATTACK_NPC_FLAG_MUST_KILL) :
				found_npc.flags);
		}

		return(old_flags);
	}

	this.setMustKillOn     = function(npc_name) {
		return(this.setMustKill(npc_name, true));
	}

	this.setMustKillOff  = function(npc_name) {
		return(this.setMustKill(npc_name, false));
	}

	this.toString          = function() {
		var name_list  = new Array();
		var out_string = "";

		for (var this_prop in this.npc_hash)
			name_list.push(this.npc_hash[this_prop].name);

		return(name_list.join());
	}
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
var TDW_BOT_AttackNPCSpec = new TDW_BOT_ATTACK_SpecialNPCSpec();
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
// Contains all of the Act bosses and Super Uniques...
var TDW_BOT_AttackNPCSpecData = new TDW_BOT_ATTACK_SpecialNPCSpec();
// ----------------------------------------------------------------------------
// Location: D2JSP_AREA_DEN_OF_EVIL
TDW_BOT_AttackNPCSpecData.addNPC(new TDW_BOT_ATTACK_SpecialNPC("Corpsefire",
	TDW_BOT_ATTACK_NPC_FLAG_NONE, 0, 0, 0));
// Location: D2JSP_AREA_COLD_PLAINS
TDW_BOT_AttackNPCSpecData.addNPC(new TDW_BOT_ATTACK_SpecialNPC("Bishibosh",
	TDW_BOT_ATTACK_NPC_FLAG_NONE, 0, 0, 0));
// Location: D2JSP_AREA_CAVE_LEVEL_1
TDW_BOT_AttackNPCSpecData.addNPC(new TDW_BOT_ATTACK_SpecialNPC("Coldcrow",
	TDW_BOT_ATTACK_NPC_FLAG_NONE, 0, 0, 0));
// Location: D2JSP_AREA_BURIAL_GROUNDS
TDW_BOT_AttackNPCSpecData.addNPC(new TDW_BOT_ATTACK_SpecialNPC("Blood Raven",
	TDW_BOT_ATTACK_NPC_FLAG_NONE, 0, 0, 0));
// Location: D2JSP_AREA_CRYPT
TDW_BOT_AttackNPCSpecData.addNPC(new TDW_BOT_ATTACK_SpecialNPC("Bonebreaker",
	TDW_BOT_ATTACK_NPC_FLAG_NONE, 0, 0, 0));
// Location: D2JSP_AREA_STONY_FIELD
TDW_BOT_AttackNPCSpecData.addNPC(new TDW_BOT_ATTACK_SpecialNPC("Rakanishu",
	TDW_BOT_ATTACK_NPC_FLAG_NONE, 0, 0, 0));
// Location: D2JSP_AREA_TRISTRAM
TDW_BOT_AttackNPCSpecData.addNPC(new TDW_BOT_ATTACK_SpecialNPC("Griswold",
	TDW_BOT_ATTACK_NPC_FLAG_NONE, 0, 0, 0));
// Location: D2JSP_AREA_DARK_WOOD
// Class ID = 24 / Preset ID = 616
TDW_BOT_AttackNPCSpecData.addNPC(new TDW_BOT_ATTACK_SpecialNPC("Treehead Woodfist",
	TDW_BOT_ATTACK_NPC_FLAG_NONE, 0, 0, 0));
// Location: D2JSP_AREA_TOWER_CELLAR_LEVEL_5
// The Countess is classid 45
TDW_BOT_AttackNPCSpecData.addNPC(new TDW_BOT_ATTACK_SpecialNPC("The Countess",
	TDW_BOT_ATTACK_NPC_FLAG_NONE, 0, 0, 0));
// Location: D2JSP_AREA_CATHEDRAL
TDW_BOT_AttackNPCSpecData.addNPC(new TDW_BOT_ATTACK_SpecialNPC("Bone Ash",
	TDW_BOT_ATTACK_NPC_FLAG_NONE, 0, 0, 0));
// Location: D2JSP_AREA_BARRACKS
TDW_BOT_AttackNPCSpecData.addNPC(new TDW_BOT_ATTACK_SpecialNPC("The Smith",
	TDW_BOT_ATTACK_NPC_FLAG_NONE, 0, 0, 0));
// Location: D2JSP_AREA_JAIL_LEVEL_2
TDW_BOT_AttackNPCSpecData.addNPC(new TDW_BOT_ATTACK_SpecialNPC("Pitspawn Fouldog",
	TDW_BOT_ATTACK_NPC_FLAG_NONE, 0, 0, 0));
// Location: D2JSP_AREA_CATACOMBS_LEVEL_4
TDW_BOT_AttackNPCSpecData.addNPC(new TDW_BOT_ATTACK_SpecialNPC("Andariel",
	TDW_BOT_ATTACK_NPC_FLAG_NONE, 0, 0, 0));
// Location: D2JSP_AREA_MOO_MOO_FARM
TDW_BOT_AttackNPCSpecData.addNPC(new TDW_BOT_ATTACK_SpecialNPC("The Cow King",
	TDW_BOT_ATTACK_NPC_FLAG_NONE, 0, 0, 0));

// Location: D2JSP_AREA_A2_SEWERS_LEVEL_3
TDW_BOT_AttackNPCSpecData.addNPC(new TDW_BOT_ATTACK_SpecialNPC("Radament",
	TDW_BOT_ATTACK_NPC_FLAG_NONE, 0, 0, 0));
// Location: D2JSP_AREA_STONY_TOMB_LEVEL_2
TDW_BOT_AttackNPCSpecData.addNPC(new TDW_BOT_ATTACK_SpecialNPC("Creeping Feature",
	TDW_BOT_ATTACK_NPC_FLAG_NONE, 0, 0, 0));
// Location: D2JSP_AREA_HALLS_OF_THE_DEAD_LEVEL_3
TDW_BOT_AttackNPCSpecData.addNPC(new TDW_BOT_ATTACK_SpecialNPC("Bloodwitch the Wild",
	TDW_BOT_ATTACK_NPC_FLAG_NONE, 0, 0, 0));
// Location: D2JSP_AREA_FAR_OASIS
TDW_BOT_AttackNPCSpecData.addNPC(new TDW_BOT_ATTACK_SpecialNPC("Beetleburst",
	TDW_BOT_ATTACK_NPC_FLAG_NONE, 0, 0, 0));
// Location: D2JSP_AREA_MAGGOT_LAIR_LEVEL_3
TDW_BOT_AttackNPCSpecData.addNPC(new TDW_BOT_ATTACK_SpecialNPC("Coldworm the Burrower",
	TDW_BOT_ATTACK_NPC_FLAG_NONE, 0, 0, 0));
// Location: D2JSP_AREA_LOST_CITY
TDW_BOT_AttackNPCSpecData.addNPC(new TDW_BOT_ATTACK_SpecialNPC("Dark Elder",
	TDW_BOT_ATTACK_NPC_FLAG_NONE, 0, 0, 0));
// Location: D2JSP_AREA_CLAW_VIPER_TEMPLE_LEVEL_2
TDW_BOT_AttackNPCSpecData.addNPC(new TDW_BOT_ATTACK_SpecialNPC("Fangskin",
	TDW_BOT_ATTACK_NPC_FLAG_NONE, 0, 0, 0));
// Location: D2JSP_AREA_PALACE_CELLAR_LEVEL_3
TDW_BOT_AttackNPCSpecData.addNPC(new TDW_BOT_ATTACK_SpecialNPC("Fire Eye",
	TDW_BOT_ATTACK_NPC_FLAG_NONE, 0, 0, 0));
// Location: D2JSP_AREA_ARCANE_SANCTUARY
TDW_BOT_AttackNPCSpecData.addNPC(new TDW_BOT_ATTACK_SpecialNPC("The Summoner",
	TDW_BOT_ATTACK_NPC_FLAG_NONE, 0, 0, 0));
// Location: One of the seven tombs.
TDW_BOT_AttackNPCSpecData.addNPC(new TDW_BOT_ATTACK_SpecialNPC("Ancient Kaa the Soulless",
	TDW_BOT_ATTACK_NPC_FLAG_NONE, 0, 0, 0));
// Location: D2JSP_AREA_DURIELS_LAIR
TDW_BOT_AttackNPCSpecData.addNPC(new TDW_BOT_ATTACK_SpecialNPC("Duriel",
	TDW_BOT_ATTACK_NPC_FLAG_NONE, 0, 0, 0));

// Location: D2JSP_AREA_SPIDER_CAVERN
TDW_BOT_AttackNPCSpecData.addNPC(new TDW_BOT_ATTACK_SpecialNPC("Sszark the Burning",
	TDW_BOT_ATTACK_NPC_FLAG_NONE, 0, 0, 0));
// Location: D2JSP_AREA_FLAYER_DUNGEON_LEVEL_3
TDW_BOT_AttackNPCSpecData.addNPC(new TDW_BOT_ATTACK_SpecialNPC("Witch Doctor Endugu",
	TDW_BOT_ATTACK_NPC_FLAG_NONE, 0, 0, 0));
// Location: D2JSP_AREA_LOWER_KURAST
TDW_BOT_AttackNPCSpecData.addNPC(new TDW_BOT_ATTACK_SpecialNPC("Stormtree",
	TDW_BOT_ATTACK_NPC_FLAG_NONE, 0, 0, 0));
// Location: D2JSP_AREA_A3_SEWERS_LEVEL_1
TDW_BOT_AttackNPCSpecData.addNPC(new TDW_BOT_ATTACK_SpecialNPC("Icehawk Riftwing",
	TDW_BOT_ATTACK_NPC_FLAG_NONE, 0, 0, 0));
// Location: D2JSP_AREA_RUINED_TEMPLE
TDW_BOT_AttackNPCSpecData.addNPC(new TDW_BOT_ATTACK_SpecialNPC("Battlemaid Sarina",
	TDW_BOT_ATTACK_NPC_FLAG_NONE, 0, 0, 0));

// Location: D2JSP_AREA_TRAVINCAL
TDW_BOT_AttackNPCSpecData.addNPC(new TDW_BOT_ATTACK_SpecialNPC("Geleb Flamefinger",
	TDW_BOT_ATTACK_NPC_FLAG_NONE, 0, 0, 0));
// Location: D2JSP_AREA_TRAVINCAL
TDW_BOT_AttackNPCSpecData.addNPC(new TDW_BOT_ATTACK_SpecialNPC("Ismail Vilehand",
	TDW_BOT_ATTACK_NPC_FLAG_NONE, 0, 0, 0));
// Location: D2JSP_AREA_TRAVINCAL
TDW_BOT_AttackNPCSpecData.addNPC(new TDW_BOT_ATTACK_SpecialNPC("Toorc Icefist",
	TDW_BOT_ATTACK_NPC_FLAG_NONE, 0, 0, 0));

// Location: D2JSP_AREA_DURANCE_OF_HATE_LEVEL_3
TDW_BOT_AttackNPCSpecData.addNPC(new TDW_BOT_ATTACK_SpecialNPC("Wyand Voidbringer",
	TDW_BOT_ATTACK_NPC_FLAG_NONE, 0, 0, 0));
// Location: D2JSP_AREA_DURANCE_OF_HATE_LEVEL_3
TDW_BOT_AttackNPCSpecData.addNPC(new TDW_BOT_ATTACK_SpecialNPC("Maffer Dragonhand",
	TDW_BOT_ATTACK_NPC_FLAG_NONE, 0, 0, 0));
// Location: D2JSP_AREA_DURANCE_OF_HATE_LEVEL_3
TDW_BOT_AttackNPCSpecData.addNPC(new TDW_BOT_ATTACK_SpecialNPC("Bremm Sparkfist",
	TDW_BOT_ATTACK_NPC_FLAG_NONE, 0, 0, 0));
// Location: D2JSP_AREA_DURANCE_OF_HATE_LEVEL_3
TDW_BOT_AttackNPCSpecData.addNPC(new TDW_BOT_ATTACK_SpecialNPC("Mephisto",
	TDW_BOT_ATTACK_NPC_FLAG_NONE, 0, 0, 0));

// Location: D2JSP_AREA_PLAINS_OF_DESPAIR
TDW_BOT_AttackNPCSpecData.addNPC(new TDW_BOT_ATTACK_SpecialNPC("Izual",
	TDW_BOT_ATTACK_NPC_FLAG_NONE, 0, 0, 0));
// Location: D2JSP_AREA_RIVER_OF_FLAME
TDW_BOT_AttackNPCSpecData.addNPC(new TDW_BOT_ATTACK_SpecialNPC("Hephasto The Armorer",
	TDW_BOT_ATTACK_NPC_FLAG_NONE, 0, 0, 0));
// Location: D2JSP_AREA_CHAOS_SANCTUM
TDW_BOT_AttackNPCSpecData.addNPC(new TDW_BOT_ATTACK_SpecialNPC("Infector of Souls",
	TDW_BOT_ATTACK_NPC_FLAG_NONE, 0, 0, 0));
// Location: D2JSP_AREA_CHAOS_SANCTUM
TDW_BOT_AttackNPCSpecData.addNPC(new TDW_BOT_ATTACK_SpecialNPC("Lord De Seis",
	TDW_BOT_ATTACK_NPC_FLAG_NONE, 0, 0, 0));
// Location: D2JSP_AREA_CHAOS_SANCTUM
TDW_BOT_AttackNPCSpecData.addNPC(new TDW_BOT_ATTACK_SpecialNPC("Grand Vizier of Chaos",
	TDW_BOT_ATTACK_NPC_FLAG_NONE, 0, 0, 0));
// Location: D2JSP_AREA_CHAOS_SANCTUM
TDW_BOT_AttackNPCSpecData.addNPC(new TDW_BOT_ATTACK_SpecialNPC("Diablo",
	TDW_BOT_ATTACK_NPC_FLAG_NONE, 0, 0, 0));

// Diablo Clone
TDW_BOT_AttackNPCSpecData.addNPC(new TDW_BOT_ATTACK_SpecialNPC("Diablo",
	TDW_BOT_ATTACK_NPC_FLAG_NONE, 0, 0, 0));

// Location: D2JSP_AREA_BLOODY_FOOTHILLS
TDW_BOT_AttackNPCSpecData.addNPC(new TDW_BOT_ATTACK_SpecialNPC("Dac Farren",
	TDW_BOT_ATTACK_NPC_FLAG_NONE, 0, 0, 0));
// Location: D2JSP_AREA_BLOODY_FOOTHILLS
TDW_BOT_AttackNPCSpecData.addNPC(new TDW_BOT_ATTACK_SpecialNPC("Shenk the Overseer",
	TDW_BOT_ATTACK_NPC_FLAG_NONE, 0, 0, 0));
// Location: D2JSP_AREA_RIGID_HIGHLANDS
TDW_BOT_AttackNPCSpecData.addNPC(new TDW_BOT_ATTACK_SpecialNPC("Eldritch the Rectifier",
	TDW_BOT_ATTACK_NPC_FLAG_NONE, 0, 0, 0));
// Location: 1.09: D2JSP_AREA_ARREAT_PLATEAU / 1.10 D2JSP_AREA_RIGID_HIGHLANDS
TDW_BOT_AttackNPCSpecData.addNPC(new TDW_BOT_ATTACK_SpecialNPC("Sharptooth Slayer",
	TDW_BOT_ATTACK_NPC_FLAG_NONE, 0, 0, 0));
// Location: D2JSP_AREA_RIGID_HIGHLANDS
TDW_BOT_AttackNPCSpecData.addNPC(new TDW_BOT_ATTACK_SpecialNPC("Eyeback the Unleashed",
	TDW_BOT_ATTACK_NPC_FLAG_NONE, 0, 0, 0));
// Location: 1.09 D2JSP_AREA_RIGID_HIGHLANDS / 1.10 D2JSP_AREA_ARREAT_PLATEAU
TDW_BOT_AttackNPCSpecData.addNPC(new TDW_BOT_ATTACK_SpecialNPC("Thresh Socket",
	TDW_BOT_ATTACK_NPC_FLAG_NONE, 0, 0, 0));
// Location: D2JSP_AREA_CELLAR_OF_PITY
TDW_BOT_AttackNPCSpecData.addNPC(new TDW_BOT_ATTACK_SpecialNPC("Frozenstein",
	TDW_BOT_ATTACK_NPC_FLAG_NONE, 0, 0, 0));
// Location: D2JSP_AREA_CRYSTALIZED_CAVERN_LEVEL_2
TDW_BOT_AttackNPCSpecData.addNPC(new TDW_BOT_ATTACK_SpecialNPC("Bonesaw Breaker",
	TDW_BOT_ATTACK_NPC_FLAG_NONE, 0, 0, 0));
// Location: D2JSP_AREA_NIHLATHAKS_TEMPLE
TDW_BOT_AttackNPCSpecData.addNPC(new TDW_BOT_ATTACK_SpecialNPC("Pindleskin",
	TDW_BOT_ATTACK_NPC_FLAG_NONE, 0, 0, 0));
// Location: D2JSP_AREA_HALLS_OF_VAUGHT
TDW_BOT_AttackNPCSpecData.addNPC(new TDW_BOT_ATTACK_SpecialNPC("Nihlathak",
		TDW_BOT_ATTACK_NPC_FLAG_NONE, 0, 0, 0));
// Location: D2JSP_AREA_GLACIAL_CAVES_LEVEL_2
TDW_BOT_AttackNPCSpecData.addNPC(new TDW_BOT_ATTACK_SpecialNPC("Snapchip Shatter",
	TDW_BOT_ATTACK_NPC_FLAG_NONE, 0, 0, 0));
// Location: D2JSP_AREA_ROCKY_SUMMIT
TDW_BOT_AttackNPCSpecData.addNPC(new TDW_BOT_ATTACK_SpecialNPC("Talic",
	TDW_BOT_ATTACK_NPC_FLAG_NONE, 0, 0, 0));
// Location: D2JSP_AREA_ROCKY_SUMMIT
TDW_BOT_AttackNPCSpecData.addNPC(new TDW_BOT_ATTACK_SpecialNPC("Korlic",
	TDW_BOT_ATTACK_NPC_FLAG_NONE, 0, 0, 0));
// Location: D2JSP_AREA_ROCKY_SUMMIT
TDW_BOT_AttackNPCSpecData.addNPC(new TDW_BOT_ATTACK_SpecialNPC("Madawc",
	TDW_BOT_ATTACK_NPC_FLAG_NONE, 0, 0, 0));
// Location: D2JSP_AREA_THRONE_OF_DESTRUCTION
TDW_BOT_AttackNPCSpecData.addNPC(new TDW_BOT_ATTACK_SpecialNPC("Colenzo the Annihilator",
	TDW_BOT_ATTACK_NPC_FLAG_NONE, 0, 0, 0));
// Location: D2JSP_AREA_THRONE_OF_DESTRUCTION
TDW_BOT_AttackNPCSpecData.addNPC(new TDW_BOT_ATTACK_SpecialNPC("Achmel the Cursed",
	TDW_BOT_ATTACK_NPC_FLAG_NONE, 0, 0, 0));
// Location: D2JSP_AREA_THRONE_OF_DESTRUCTION
TDW_BOT_AttackNPCSpecData.addNPC(new TDW_BOT_ATTACK_SpecialNPC("Bartuc the Bloody",
	TDW_BOT_ATTACK_NPC_FLAG_NONE, 0, 0, 0));
// Location: D2JSP_AREA_THRONE_OF_DESTRUCTION
TDW_BOT_AttackNPCSpecData.addNPC(new TDW_BOT_ATTACK_SpecialNPC("Ventar the Unholy",
	TDW_BOT_ATTACK_NPC_FLAG_NONE, 0, 0, 0));
// Location: D2JSP_AREA_THRONE_OF_DESTRUCTION
TDW_BOT_AttackNPCSpecData.addNPC(new TDW_BOT_ATTACK_SpecialNPC("Lister the Tormentor",
	TDW_BOT_ATTACK_NPC_FLAG_NONE, 0, 0, 0));
// Location: D2JSP_AREA_THE_WORLDSTONE_CHAMBER
TDW_BOT_AttackNPCSpecData.addNPC(new TDW_BOT_ATTACK_SpecialNPC("Baal",
		TDW_BOT_ATTACK_NPC_FLAG_NONE, 0, 0, 0));
// ----------------------------------------------------------------------------
// Need a little extra room for the Infector and his boys...
if (me.diff == 2)
	TDW_BOT_AttackNPCSpecData.findNPC("Infector of Souls").coord_max_min = 30;
// ----------------------------------------------------------------------------
// CODE NOTE: To be removed when all code is converted.
for (var this_prop in TDW_BOT_AttackNPCSpecData.npc_hash) {
	TDW_BOT_AttackNPCSpecData.npc_hash[this_prop].loop_count      = 0;
	TDW_BOT_AttackNPCSpecData.npc_hash[this_prop].coord_min       = 0;
	TDW_BOT_AttackNPCSpecData.npc_hash[this_prop].coord_max       = 0;
	TDW_BOT_AttackNPCSpecData.npc_hash[this_prop].interrupt_level = 0xFFFF;
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TDW_BOT_ATTACK_KillSpecifiedNPC(this_npc)
{
	var npc_obj             = null;
	var npc_cluster         = null;
	var start_location      = [me.x, me.y];
	var count_1;
	var this_distance;
	var tmp_dest;
	var min_dist_info;
	var move_x;
	var move_y;

	// //////////////////////////////////////////////////////////////////////
	// Must be the right kind of object...
	if (!(this_npc instanceof TDW_BOT_ATTACK_SpecialNPC))
		return;
	// //////////////////////////////////////////////////////////////////////

	// //////////////////////////////////////////////////////////////////////
	// Store the current type and name...
	TDW_BOT_AttackNPCSpec.__CURRENT__.unit_type = this_npc.unit_type;
	TDW_BOT_AttackNPCSpec.__CURRENT__.name      = this_npc.name;
	// //////////////////////////////////////////////////////////////////////

	// //////////////////////////////////////////////////////////////////////
	// Functions used for reporting status, et cetera...
	var func_info    = (typeof(TDW_RS_SayStatus) == "function")  ?
		TDW_RS_SayStatus : D2JSP_UTIL_LogInfo;
	var func_warning = (typeof(TDW_RS_SayQarning) == "function") ?
		TDW_RS_SayWarning : D2JSP_UTIL_LogWarningColor;
	var func_error   = (typeof(TDW_RS_SayError) == "function")   ?
		TDW_RS_SayError : D2JSP_UTIL_LogErrorColor;
	// //////////////////////////////////////////////////////////////////////

	// //////////////////////////////////////////////////////////////////////
	// We'll store data particular to this NPC attack here...
	this_npc.__CURRENT__ = new Array();
	// //////////////////////////////////////////////////////////////////////

	// //////////////////////////////////////////////////////////////////////
	// Try to acquire the NPC...
	npc_obj = TDW_BOT_ATTACK_KillSpecifiedNPC_ReAcquireName(this_npc);
	if (!npc_obj) {
		func_warning("Expected special NPC " + this_npc.name +
			" not found... looking around...");
		var move_control = new TDW_BOT_ATTACK_MoveControl(
			TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_ALL, null, null, null, 1000);
		for (var count_1 = 0; count_1 < 10; count_1++) {
			if (!TDW_BOT_ATTACK_AttackNearbyMonstersCluster(null, move_control))
				break;
			if (npc_obj = TDW_BOT_ATTACK_KillSpecifiedNPC_ReAcquireName(this_npc))
				break;
			delay(50);
		}
		if (!npc_obj) {
			func_error("Unable to locate expected special NPC " + this_npc.name +
				" --- giving up.");
			// If the enemy to be killed is not a player, not an unnamed (random)
			// NPC, and not present in the global instance of the
			// TDW_BOT_ATTACK_SpecialNPCSpec object (TDW_BOT_AttackNPCSpec), then
			// it was removed by a method of that object before this function
			// was called. replace it before returning.
			if ((this_npc.unit_type != D2JSP_UTIL_GETUNIT_PLAYER) &&
				(!(this_npc.flags & TDW_BOT_ATTACK_NPC_FLAG_IS_RANDOM)) &&
				(!TDW_BOT_AttackNPCSpec.findNPC(this_npc.name)))
				TDW_BOT_AttackNPCSpec.addNPC(this_npc.name)
			return;
		}
	}
	// //////////////////////////////////////////////////////////////////////

/*
this_npc.coord_min = 0;
this_npc.coord_max = 0;

if ((TDW_BOT_TestFlagNPCAvoid || TDW_BOT_TestFlagNPCAvoid_2) &&
		(this_npc.name != "Mephisto"))
	this_npc.loop_count = 100;
else if ((TDW_BOT_TestFlagNPCAvoid || TDW_BOT_TestFlagNPCAvoid_2) &&
	(this_npc.unit_type == D2JSP_UTIL_GETUNIT_PLAYER))
	this_npc.loop_count = 1;
*/

	// //////////////////////////////////////////////////////////////////////
	this_npc.gid                          = npc_obj.gid;
	this_npc.classid                      = npc_obj.classid;
	this_npc.id_hash[npc_obj.gid + ""]    = true;
	this_npc.__CURRENT__.npc_obj          = npc_obj;
	this_npc.__CURRENT__.gid              = npc_obj.gid;
	this_npc.__CURRENT__.classid          = npc_obj.classid;
	this_npc.__CURRENT__.location         = [npc_obj.x, npc_obj.y];
	this_npc.__CURRENT__.loop_count       =
		(D2JSP_UTIL_GEN_TypeOfUInt(this_npc.loop_count) && this_npc.loop_count) ?
		this_npc.loop_count : 50;
	this_npc.__CURRENT__.coord_min        = this_npc.coord_min;
	this_npc.__CURRENT__.coord_max        = this_npc.coord_max;
	this_npc.__CURRENT__.dist_min         = this_npc.dist_min;
	this_npc.__CURRENT__.dist_max         = this_npc.dist_max;
	this_npc.__CURRENT__.enchant_cold     =
		npc_obj.getEnchant(D2JSP_ENCHANT_COLD_ENCHANTED);
	this_npc.__CURRENT__.cold_effect      =
		D2JSP_NPC_GetColdLengthPercent(npc_obj);
	this_npc.__CURRENT__.last_cold_attack = 0;
	// //////////////////////////////////////////////////////////////////////

	var attacks_npc = TDW_BOT_AttackSelector.getAttackListBasic(npc_obj);

/*
TDW_BOT_Log.logInfo(this_npc.name + " Attack Ranking (Any):");
for (var count_1 = 0; count_1 < attacks_npc.length; count_1++)
	TDW_BOT_Log.logInfo(this_npc.name + " attack = [" +
		attacks_npc[count_1] + "]");
TDW_BOT_Log.logInfo(this_npc.name + " Attack Ranking (Cold):");
for (var count_1 = 0; count_1 < attacks_npc.length; count_1++) {
	if (attacks_npc[count_1].element_dmg == D2JSP_UTIL_DAMAGE_COLD) {
		TDW_BOT_Log.logInfo(this_npc.name + " attack = [" +
			attacks_npc[count_1] + "]");
		break;
	}
}
TDW_BOT_ATTACK_DetermineDistances(npc_obj, attacks_npc)
TDW_MOVE_ReturnToTown();
print("STOPPING");
stop();
*/

	// //////////////////////////////////////////////////////////////////////
	if (!(this_npc.flags & TDW_BOT_ATTACK_NPC_FLAG_NOT_NAMED)) {
		if ((!this_npc.__CURRENT__.coord_min) &&
			(!this_npc.__CURRENT__.coord_max)) {
			var coord_bounds = TDW_BOT_ATTACK_DetermineDistances(npc_obj,
				attacks_npc);
			this_npc.__CURRENT__.coord_min              = coord_bounds[0];
			this_npc.__CURRENT__.coord_max              = coord_bounds[1];
			this_npc.__CURRENT__.coord_min              =
				(this_npc.coord_min_min <= 0) ? this_npc.__CURRENT__.coord_min :
				Math.max(this_npc.__CURRENT__.coord_min, this_npc.coord_min_min);
			this_npc.__CURRENT__.coord_max              =
				(this_npc.coord_max_min <= 0) ? this_npc.__CURRENT__.coord_max :
				Math.max(this_npc.__CURRENT__.coord_max, this_npc.coord_max_min);
			this_npc.__CURRENT__.dist_min               =
				Math.floor(D2JSP_UTIL_PATH_CoordLengthToDistance(coord_bounds[0]));
			this_npc.__CURRENT__.dist_max               =
				Math.floor(D2JSP_UTIL_PATH_CoordLengthToDistance(coord_bounds[1]));
TDW_BOT_Log.logInfo("***** SET COORD BOUNDS TO [" + coord_bounds + "]");
		}
		if (TDW_BOT_ContextList["operation.log.special.npc.stats"] ||
			(!attacks_npc.length))
			TDW_BOT_ATTACK_KillSpecifiedNPC_ShowStats(this_npc, npc_obj);
		var old_log_screen_flag = TDW_BOT_Log.screenOff();
		npc_cluster = new TDW_BOT_ATTACK_Cluster([npc_obj.x, npc_obj.y],
			null, null, null, null, TDW_BOT_CLUSTER_FLAG_NO_PRESETS);
		if (TDW_BOT_ContextList["operation.log.special.npc.cluster"] ||
			TDW_BOT_ContextList["operation.log.cluster"])
			npc_cluster.toLog(TDW_BOT_Log);
		if (old_log_screen_flag)
			TDW_BOT_Log.screenOn();
		if (typeof(this_npc.pre_func) == "function")
			this_npc.pre_func(this_npc, npc_obj);
		// ////////////////////////////////////////////////////////////////
		// ////////////////////////////////////////////////////////////////
		// Temporary logic to handle aborting on bad NPC mods...
		// ////////////////////////////////////////////////////////////////
		if ((me.diff == 2) && (this_npc.unit_type == D2JSP_UTIL_GETUNIT_NPC) &&
			(!(this_npc.flags & TDW_BOT_ATTACK_NPC_FLAG_MUST_KILL))) {
			var attack_cancelled = false;
			if (npc_obj.getEnchant(D2JSP_ENCHANT_LIGHTNING_ENCHANTED) &&
				npc_obj.getEnchant(D2JSP_ENCHANT_MULTIPLE_SHOTS)) {
				func_warning("NPC " + this_npc.name + " is MSLE --- " +
					"attack cancelled.");
				attack_cancelled = true;
			}
			if (npc_obj.getEnchant(D2JSP_ENCHANT_LIGHTNING_ENCHANTED) &&
				npc_obj.getState(D2JSP_STATE_CONVICTION)) {
				func_warning("NPC " + this_npc.name + " is Lightning " +
					"Enchanted and Convicted --- attack cancelled.");
				attack_cancelled = true;
			}
			if (npc_obj.getState(D2JSP_STATE_FANATICISM)) {
				func_warning("NPC " + this_npc.name + " is Fanatic --- " +
					"attack cancelled.");
				attack_cancelled = true;
			}
			if (attack_cancelled) {
				// If the enemy to be killed is not a player, not an unnamed (random)
				// NPC, and not present in the global instance of the
				// TDW_BOT_ATTACK_SpecialNPCSpec object (TDW_BOT_AttackNPCSpec), then
				// it was removed by a method of that object before this function
				// was called. replace it before returning.
				if ((this_npc.unit_type != D2JSP_UTIL_GETUNIT_PLAYER) &&
					(!(this_npc.flags & TDW_BOT_ATTACK_NPC_FLAG_IS_RANDOM)) &&
					(!TDW_BOT_AttackNPCSpec.findNPC(this_npc.name)))
					TDW_BOT_AttackNPCSpec.addNPC(this_npc.name)
				return;
			}
		}
		// ////////////////////////////////////////////////////////////////
		if (!attacks_npc.length)
			func_warning("NPC " + this_npc.name + " is immune to all " +
				"of your primary attacks. Proceeding to kill any nearby monsters, "+
				"but " + this_npc.name + " may not be killed.");
	}
	// //////////////////////////////////////////////////////////////////////

	if (TDW_BOT_ATTACK_KillSpecifiedNPC_IsAlive(this_npc, npc_obj)) {
		if (!(this_npc.flags & TDW_BOT_ATTACK_NPC_FLAG_NOT_NAMED)) {
			func_info(D2JSP_UTIL_COLOR_ORANGE + "Will now attempt to kill " +
				this_npc.name + ".");
			if (TDW_PATH_IsAreaCreated()) {
				var npc_room = TDW_PATH_FindRoomByObject(npc_obj);
				TDW_BOT_Log.logInfo(this_npc.name + " is in room " +
					((npc_room) ? npc_room.number : "*UNKNOWN*") + ".");
//				TDW_BOT_STUDY_ListPresetNPCsForRoomObj(npc_room);
			}
		}
		if ((!(this_npc.flags & TDW_BOT_ATTACK_NPC_FLAG_NO_INIT_MOVE)) &&
			(!TDW_BOT_ATTACK_KillSpecifiedNPC_CanAttack(this_npc, npc_obj))) {
			if (TDW_BOT_ReportChangePosition)
				TDW_BOT_Log.logInfoQuiet("Calling " +
					"TDW_BOT_ATTACK_KillSpecifiedNPC_ChangePosition() because " +
					"we are in our initial approach to " + this_npc.name + ".");
			TDW_BOT_ATTACK_KillSpecifiedNPC_ChangePosition(this_npc, npc_obj, true);
			TDW_BOT_ATTACK_KillSpecifiedNPC_AttackClusterFirst(this_npc)
		}
		else {
			move_x = me.x;
			move_y = me.y;
		}
		if ((Dist(me.x, me.y, npc_obj.x, npc_obj.y) <= 10) &&
			me.getSkill("Frost Nova"))
			D2JSP_SKILL_SetAndUseSkillBasic(false, "Frost Nova", 0);
		TDW_BOT_CHECK_HealthChecks();
		if (!attacks_npc.length) {
			npc_obj = TDW_BOT_ATTACK_KillSpecifiedNPC_ReAcquire(this_npc);
			if (!npc_obj)
				return;
			if (this_npc.flags & TDW_BOT_ATTACK_NPC_FLAG_NO_CLUSTER)
				return;
			TDW_BOT_ATTACK_KillSpecifiedNPC_AttackCluster(this_npc);
			npc_obj = TDW_BOT_ATTACK_KillSpecifiedNPC_ReAcquire(this_npc);
			if (!npc_obj)
				return;
//			TDW_BOT_ATTACK_KillSpecifiedNPC_AttackCluster(this_npc,
//				[npc_obj.x, npc_obj.y]);
			npc_obj = TDW_BOT_ATTACK_KillSpecifiedNPC_ReAcquire(this_npc);
			if (!npc_obj)
				return;
			TDW_BOT_ATTACK_KillSpecifiedNPC_AttackCluster(this_npc);
			return;
		}
		while (true) {
if (TDW_BOT_Log.getLevelFile() <= D2JSP_UTIL_LOG_Level_DEBUG)
	TDW_BOT_Log.logDebug("TDW_BOT_ATTACK_KillSpecifiedNPC() " +
		"Top of while() loop");
			if (npc_obj &&
				(!TDW_BOT_ATTACK_KillSpecifiedNPC_IsAlive(this_npc, npc_obj)))
				break;
			if ((this_distance =
				TDW_BOT_ATTACK_KillSpecifiedNPC_CanAttack(this_npc, npc_obj))) {
				for (count_1 = 0; count_1 < this_npc.__CURRENT__.loop_count;
					count_1++) {
if (TDW_BOT_Log.getLevelFile() <= D2JSP_UTIL_LOG_Level_DEBUG)
	TDW_BOT_Log.logDebug("TDW_BOT_ATTACK_KillSpecifiedNPC() " +
		"Top of for() loop");
					if ((!npc_obj) ||
						(!TDW_BOT_ATTACK_KillSpecifiedNPC_IsAlive(this_npc, npc_obj)))
						break;
					TDW_BOT_ATTACK_KillSpecifiedNPC_ShowHP(this_npc, npc_obj, "LOOP 1");
					if (!(this_distance =
						TDW_BOT_ATTACK_KillSpecifiedNPC_CanAttack(this_npc, npc_obj)))
						break;
					npc_obj = TDW_BOT_ATTACK_KillSpecifiedNPC_AttackNPC(this_npc,
						npc_obj, attacks_npc);
					if (!npc_obj)
						break;
					if (typeof(this_npc.attack_func) == "function")
						this_npc.attack_func(this_npc, npc_obj);
					if (!(this_distance =
						TDW_BOT_ATTACK_KillSpecifiedNPC_CanAttack(this_npc, npc_obj)))
						break;
					if (!(this_npc.flags & TDW_BOT_ATTACK_NPC_FLAG_NO_CLUSTER))
						TDW_BOT_ATTACK_KillSpecifiedNPC_AttackCluster(this_npc);
					if (TDW_BOT_CHECK_HealthChecks()) {
						npc_obj = TDW_BOT_ATTACK_KillSpecifiedNPC_ReAcquire(this_npc);
						if (!npc_obj)
							break;
					}
					TDW_BOT_ATTACK_KillSpecifiedNPC_ShowHP(this_npc, npc_obj, "LOOP 3");
					if (typeof(this_npc.attack_func) == "function")
						this_npc.attack_func(this_npc, npc_obj);
					if (TDW_BOT_CHECK_HealthChecks()) {
						npc_obj = TDW_BOT_ATTACK_KillSpecifiedNPC_ReAcquire(this_npc);
						if (!npc_obj)
							break;
					}
					npc_obj = TDW_BOT_ATTACK_KillSpecifiedNPC_ReAcquire(this_npc);
					if (npc_obj) {
						if (me.diff == 2) {
							if (getUnit(D2JSP_UTIL_GETUNIT_MISSILE, 180) != null) {
								TDW_BOT_Log.logInfo(D2JSP_UTIL_COLOR_RED +
									"Diablo Fire attack detected!");
								TDW_BOT_MOVE_RecoverInTown(true);
							}
							else if (getUnit(D2JSP_UTIL_GETUNIT_MISSILE, 169) != null) {
								TDW_BOT_Log.logInfo(D2JSP_UTIL_COLOR_RED +
									"Baal Inferno attack detected!");
								TDW_BOT_MOVE_RecoverInTown(true);
							}
						}
						TDW_BOT_ATTACK_KillSpecifiedNPC_ShowHP(this_npc, npc_obj, "LOOP 4");
					}
					else
						break;
					if (typeof(this_npc.attack_func) == "function")
						this_npc.attack_func(this_npc, npc_obj);
					if (!(this_distance =
						TDW_BOT_ATTACK_KillSpecifiedNPC_CanAttack(this_npc, npc_obj)))
						break;
if (TDW_BOT_TestFlagNPCAvoid && (!(this_npc.flags & TDW_BOT_ATTACK_NPC_FLAG_NO_MOVE))) {
	var this_cluster = new TDW_BOT_ATTACK_ClusterSimple(null, 5, null, 2);
	if (this_cluster.count) {
		if (TDW_BOT_ReportChangePosition)
			TDW_BOT_Log.logInfoQuiet("Calling " +
				"TDW_BOT_ATTACK_KillSpecifiedNPC_ChangePosition() because a " +
				"simple cluster has a count of " + this_cluster.count);
		TDW_BOT_ATTACK_KillSpecifiedNPC_ChangePosition(this_npc, npc_obj);
	}
}
else if (TDW_BOT_TestFlagNPCAvoid_2 && (!(this_npc.flags & TDW_BOT_ATTACK_NPC_FLAG_NO_MOVE))) {
	var this_cluster = new TDW_BOT_ATTACK_ClusterSimple(null, 5, null, 2);
	if (this_cluster.count) {
		if (TDW_BOT_ReportChangePosition)
			TDW_BOT_Log.logInfoQuiet("Calling " +
				"TDW_BOT_ATTACK_KillSpecifiedNPC_ChangePosition() because a " +
				"simple cluster has a count of " + this_cluster.count);
		TDW_BOT_ATTACK_KillSpecifiedNPC_ChangePosition(this_npc, npc_obj);
	}
}
				}
				npc_obj = TDW_BOT_ATTACK_KillSpecifiedNPC_ReAcquire(this_npc);
				if (npc_obj) {
					if (!TDW_BOT_ATTACK_KillSpecifiedNPC_IsAlive(this_npc, npc_obj))
						break;
					if (!(this_npc.flags & TDW_BOT_ATTACK_NPC_FLAG_NO_MOVE)) {
						if (TDW_BOT_ReportChangePosition)
							TDW_BOT_Log.logInfoQuiet("Calling " +
								"TDW_BOT_ATTACK_KillSpecifiedNPC_ChangePositionForce() " +
								"because our attack loop has completed (loop max = " +
								this_npc.__CURRENT__.loop_count + ", loop counter = " +
								count_1 + ").");
						TDW_BOT_ATTACK_KillSpecifiedNPC_ChangePositionForce(this_npc,
							npc_obj);
					}
				}
//				runGC();
if (TDW_BOT_Log.getLevelFile() <= D2JSP_UTIL_LOG_Level_DEBUG)
	TDW_BOT_Log.logDebug("TDW_BOT_ATTACK_KillSpecifiedNPC() " +
		"Bottom of for() loop");
			}
			else {
				if (npc_obj) {
					npc_obj = TDW_BOT_ATTACK_KillSpecifiedNPC_AttackNPC(this_npc,
						npc_obj, attacks_npc);
					if (!npc_obj)
						break;
					if (!(this_npc.flags & TDW_BOT_ATTACK_NPC_FLAG_NO_MOVE)) {
						if (TDW_BOT_ReportChangePosition)
							TDW_BOT_Log.logInfoQuiet("Calling " +
								"TDW_BOT_ATTACK_KillSpecifiedNPC_ChangePosition() " +
								"because TDW_BOT_ATTACK_KillSpecifiedNPC_CanAttack() " +
								"returned 0 (distance to NPC " + this_npc.name + " = " +
								Dist(me.x, me.y, npc_obj.x, npc_obj.y) + ")");
						TDW_BOT_ATTACK_KillSpecifiedNPC_ChangePosition(this_npc,
							npc_obj, false);
					}
					if (typeof(this_npc.attack_func) == "function")
						this_npc.attack_func(this_npc, npc_obj);
				}
				TDW_BOT_CHECK_HealthChecks();
				npc_obj = TDW_BOT_ATTACK_KillSpecifiedNPC_ReAcquire(this_npc);
				if (!npc_obj)
					break;
			}
			TDW_BOT_CHECK_DoChecks();
			npc_obj = TDW_BOT_ATTACK_KillSpecifiedNPC_ReAcquire(this_npc);
			if (!npc_obj)
				break;
//			runGC();
if (TDW_BOT_Log.getLevelFile() <= D2JSP_UTIL_LOG_Level_DEBUG)
	TDW_BOT_Log.logDebug("TDW_BOT_ATTACK_KillSpecifiedNPC() " +
		"Bottom of while() loop");
		}
		if (this_npc.flags & TDW_BOT_ATTACK_NPC_FLAG_NOT_NAMED)
			func_info(this_npc.name + " is now dead.");
	}
	else {
		if (!(this_npc.flags & TDW_BOT_ATTACK_NPC_FLAG_NOT_NAMED))
			func_info(this_npc.name + " is already dead.");
	}

	// //////////////////////////////////////////////////////////////////////
	TDW_BOT_CHECK_DoChecks();
	D2JSP_UTIL_BNET_OverheadSafe("");
	func_info(D2JSP_UTIL_COLOR_GREEN + this_npc.name + " is now dead!!!");
	TDW_BOT_Log.flushLog();
	if (typeof(this_npc.post_func) == "function")
		this_npc.post_func(this_npc, npc_obj);
	TDW_BOT_Log.flushLog();
	// //////////////////////////////////////////////////////////////////////

	// //////////////////////////////////////////////////////////////////////
	if (!(this_npc.flags & TDW_BOT_ATTACK_NPC_FLAG_NO_FINALIZE)) {
/*
		npc_obj = TDW_BOT_ATTACK_KillSpecifiedNPC_ReAcquire(this_npc);
		if (this_npc.flags & TDW_BOT_ATTACK_NPC_FLAG_KILL_MINIONS_PRE) {
			if (npc_obj) {
				TDW_BOT_ATTACK_KillSpecifiedNPC_AttackCluster(this_npc,
					[npc_obj.x, npc_obj.y], 20);
			}
			else {
				TDW_BOT_ATTACK_KillSpecifiedNPC_AttackCluster(this_npc, null, 20);
			}
		}
		if (npc_obj)
			D2JSP_SKILL_TeleportTo(npc_obj.x, npc_obj.y);
		if (this_npc.flags & TDW_BOT_ATTACK_NPC_FLAG_KILL_MINIONS_POST) {
			TDW_BOT_ATTACK_KillSpecifiedNPC_AttackCluster(this_npc, null, 20);
			TDW_BOT_ATTACK_AttackNearbyMonsters(true);
		}
		else {
			npc_cluster = new TDW_BOT_ATTACK_Cluster(null,
				TDW_BOT_CLUSTER_DEFAULT_RADIUS, null, TDW_BOT_COLL_BLOCK_ATTACK,
				null, TDW_BOT_CLUSTER_FLAG_NO_PRESETS);
			if (npc_cluster.count &&
				(npc_cluster.dist[TDW_BOT_ATTACK_CLUSTER_MIN] <= 10) &&
				(TDW_BOT_ContextList["skill.attack.arrive.local.once"] != ""))
				D2JSP_SKILL_SetAndUseSkillBasic(false, "Frost Nova", 0);
		}
*/
		TDW_BOT_CHECK_HealthChecks();
/*
		if (TDW_BOT_ContextList["attack.special.npc.death.delay.distance"] > 0) {
			var npc_cluster = new TDW_BOT_ATTACK_Cluster(
				this_npc.__CURRENT__.location,
				TDW_BOT_ContextList["attack.special.npc.death.delay.distance"],
				null, TDW_BOT_COLL_BLOCK_ATTACK, null,
				TDW_BOT_CLUSTER_FLAG_NO_PRESETS);
print("***** DEATH DELAY CLUSTER COUNT = " + npc_cluster.count);
			if (npc_cluster.count >=
				TDW_BOT_ContextList["attack.special.npc.death.delay.threshold"]) {
				var move_control                  = new TDW_BOT_ATTACK_MoveControl();
				move_control.max_attack_ms        =
					TDW_BOT_ContextList["attack.special.npc.death.delay.time.max"];
				move_control.threat_avoid_spec    =
					(new TDW_THREAT_MoveSpec(this_npc.__CURRENT__.coord_min,
					this_npc.__CURRENT__.coord_max, null, 0, this_npc.bounding_box));
				move_control.threat_cluster_spec  = npc_cluster.getClusterAttackSpec();
				move_control.attack_end_cond_func =
					TDW_BOT_ATTACK_KillSpecifiedNPC_DeathDelayFunc;
				move_control.__CURRENT__          = new Array();
				move_control.__CURRENT__.this_npc = this_npc;
				TDW_BOT_ATTACK_AttackNearbyMonstersCluster(npc_cluster, move_control);
			}
		}
		TDW_BOT_CHECK_HealthChecks();
*/
		TDW_BOT_ATTACK_KillSpecifiedNPC_DoDeath(this_npc);
		D2JSP_SKILL_TeleportToPair(this_npc.__CURRENT__.location);
		TDW_BOT_CHECK_HealthChecks();
		// Always snag drops if an ISF configuration has been loaded...
		if (TDW_ISF_Cfg != null) {
			TDW_BOT_SUPP_MySnagIt([me.x, me.y]);
			TDW_BOT_CHECK_HealthChecks();
			TDW_BOT_SUPP_MySnagIt([me.x, me.y]);
		}
		TDW_BOT_CHECK_HealthChecks();
	}
	// //////////////////////////////////////////////////////////////////////

	TDW_BOT_Log.flushLog();

	if (!(this_npc.flags & TDW_BOT_ATTACK_NPC_FLAG_NO_RETURN))
		TDW_BOT_MOVE_TeleportToDestination(start_location,
			TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_NONE);

	if (typeof(this_npc.final_func) == "function")
		this_npc.final_func(this_npc, npc_obj);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TDW_BOT_ATTACK_KillSpecifiedNPC_DoDeath(this_npc)
{
	var death_delay_time_min = (this_npc.death_delay_time_min > 0) ?
		this_npc.death_delay_time_min : 0;

	// Adjust the death delay minimum time for Pindleskin and cold
	//	enchanted NPCs.
	death_delay_time_min = ((this_npc.__CURRENT__.classid == 440) ||
		this_npc.__CURRENT__.enchant_cold) ?
		Math.max(this_npc.death_delay_time_min, 1000) : death_delay_time_min;

	//	May have no work to do...
	if ((death_delay_time_min <= 0) &&
		((this_npc.death_delay_distance <= 0) ||
		(this_npc.death_delay_threshold < 0)))
		return;

	// Otherwise, we've got to delay. Ensure our parameters are reasonable...
	var death_delay_distance  = (this_npc.death_delay_distance > 0) ?
		this_npc.death_delay_distance : 10;
	var death_delay_threshold = (this_npc.death_delay_threshold > 0) ?
		this_npc.death_delay_threshold : 3;

	// Check for enemies near the corpse...
	var npc_cluster = new TDW_BOT_ATTACK_Cluster(this_npc.__CURRENT__.location,
		death_delay_distance, null, TDW_BOT_COLL_BLOCK_ATTACK, null,
		TDW_BOT_CLUSTER_FLAG_NO_PRESETS);

	// If no minimum delay is necessary and there are no enemies near the
	//	corpse, we can return...
	if ((death_delay_time_min <= 0) &&
		(npc_cluster.count < death_delay_threshold))
		return;

	// Otherwise, we'll need to delay...
	var move_control                               = new TDW_BOT_ATTACK_MoveControl();
	move_control.max_attack_ms                     = Math.max(
		Math.max(this_npc.death_delay_time_max, this_npc.death_delay_time_min),
		500);
	move_control.threat_avoid_spec                 =
		(new TDW_THREAT_MoveSpec(this_npc.__CURRENT__.coord_min,
		this_npc.__CURRENT__.coord_max, null, 0, this_npc.bounding_box));
	move_control.threat_cluster_spec               = move_control.threat_avoid_spec;
	move_control.attack_end_cond_func              =
		TDW_BOT_ATTACK_KillSpecifiedNPC_DeathDelayFunc;
	move_control.__CURRENT__                       = new Object();
	move_control.__CURRENT__.this_npc              = this_npc;
	move_control.__CURRENT__.death_delay_distance  = death_delay_distance
	move_control.__CURRENT__.death_delay_threshold = death_delay_threshold;
	move_control.__CURRENT__.death_delay_time_min  = death_delay_time_min;
	move_control.__CURRENT__.death_delay_time_max  = this_npc.death_delay_time_max;
	move_control.__CURRENT__.start_time            = getTickCount();

/*
	while (TDW_BOT_ATTACK_KillSpecifiedNPC_DeathDelayFunc(move_control))
		TDW_BOT_ATTACK_AttackNearbyMonstersCluster(npc_cluster, move_control);
*/

	TDW_BOT_Log.logInfo("Delaying pickup from the corpse of " + this_npc.name +
		"...");

	while (true) {
		TDW_BOT_ATTACK_AttackNearbyMonstersCluster(npc_cluster, move_control);
		if (!TDW_BOT_ATTACK_KillSpecifiedNPC_DeathDelayFunc(move_control))
			break;
		if ((move_control.__CURRENT__.death_delay_time_max > 0) &&
			((getTickCount() - move_control.__CURRENT__.start_time) >=
			move_control.__CURRENT__.death_delay_time_max))
			break;
	}

	TDW_BOT_CHECK_HealthChecks();
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TDW_BOT_ATTACK_KillSpecifiedNPC_DeathDelayFunc(move_control)
{
/*
	var npc_cluster = new TDW_BOT_ATTACK_Cluster(this_npc.__CURRENT__.location,
		TDW_BOT_ContextList["attack.special.npc.death.delay.distance"],
		null, TDW_BOT_COLL_BLOCK_ATTACK, null, TDW_BOT_CLUSTER_FLAG_NO_PRESETS);
*/
	var npc_cluster = new TDW_BOT_ATTACK_ClusterCount(
		move_control.__CURRENT__.this_npc.__CURRENT__.location,
		move_control.__CURRENT__.death_delay_distance,
		null, TDW_BOT_CLUSTER_FLAG_NO_PRESETS, null,
		move_control.__CURRENT__.death_delay_threshold);

/*
	TDW_BOT_Log.logInfoQuiet("***** IN DEATH DELAY FUNC ***** (cluster count = " +
		npc_cluster.count + ", threshold = " +
		move_control.__CURRENT__.death_delay_threshold + ")");
*/

	return((((getTickCount() - move_control.__CURRENT__.start_time) <
		move_control.__CURRENT__.death_delay_time_min) ||
		(npc_cluster.count >= move_control.__CURRENT__.death_delay_threshold)) ?
		true : false);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TDW_BOT_ATTACK_KillSpecifiedNPC_AttackClusterFirst(this_npc)
{
	if ((this_npc.cluster_first_threshold_min < 2) &&
		(this_npc.cluster_first_threshold_max < 2))
		return;

	var npc_obj = TDW_BOT_ATTACK_KillSpecifiedNPC_ReAcquire(this_npc);
	if (!npc_obj)
		return;

	var center_coord = this_npc.__CURRENT__.location;
	var radius_min   = this_npc.__CURRENT__.dist_min;
	var radius_max   = this_npc.__CURRENT__.dist_max;
	var first_flag   = true;

	while (true) {
		var other_obj        = getUnit(D2JSP_UTIL_GETUNIT_NPC, null,
			D2JSP_MODE_FLAG_INDICATOR | D2JSP_MODE_NPC_FLAGS_ALL_BUT_DEAD);
		var radius_count_min = 0;
		var radius_count_max = 0;
		if (other_obj) {
			do {
				if (++TDW_BOT_GetUnitNPCCount > 100) {
					runGC();
					TDW_BOT_GetUnitNPCCount = 0;
				}
				if (D2JSP_NPC_ShouldAttackEnemy(other_obj) &&
					(!checkCollision(me, other_obj, TDW_BOT_COLL_BLOCK_ATTACK))) {
					this_distance = Dist(center_coord[0], center_coord[1],
						other_obj.x, other_obj.y);
					if (this_distance <= radius_max) {
						radius_count_max++;
						if (this_distance <= radius_min)
							radius_count_min++;
					}
				}
			} while (other_obj && other_obj.getNext(null,
				D2JSP_MODE_FLAG_INDICATOR | D2JSP_MODE_NPC_FLAGS_ALL_BUT_DEAD));
		}
		var attack_radius;
		if (radius_count_max >= this_npc.cluster_first_threshold_max) {
			if (first_flag)
				TDW_BOT_Log.logInfo("Attacking NPCs surrounding " + this_npc.name +
					" because their number is greater than or equal to " +
					this_npc.cluster_first_threshold_max + " and they are within " +
					"distance " + radius_max + " of the target.");
			attack_radius = this_npc.cluster_first_threshold_max;
		}
		else if (radius_count_min >= this_npc.cluster_first_threshold_min) {
			if (first_flag)
				TDW_BOT_Log.logInfo("Attacking NPCs surrounding " + this_npc.name +
					" because their number is greater than or equal to " +
					this_npc.cluster_first_threshold_min + " and they are within " +
					"distance " + radius_min + " of the target.");
			attack_radius = this_npc.cluster_first_threshold_min;
		}
		else
			return;
		first_flag = false;
		TDW_BOT_ATTACK_KillSpecifiedNPC_AttackCluster(this_npc, center_coord,
			attack_radius);
		npc_obj = TDW_BOT_ATTACK_KillSpecifiedNPC_ReAcquire(this_npc);
		if (!npc_obj)
			return;
		if (TDW_BOT_ReportChangePosition)
			TDW_BOT_Log.logInfoQuiet("Calling " +
				"TDW_BOT_ATTACK_KillSpecifiedNPC_ChangePosition() because " +
				"we have done a cluster first attack.");
		TDW_BOT_ATTACK_KillSpecifiedNPC_ChangePosition(this_npc, npc_obj, false);
	}
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
// Re-acquires by GID.
function TDW_BOT_ATTACK_KillSpecifiedNPC_ReAcquire(this_npc)
{
	return(TDW_BOT_ATTACK_KillSpecifiedNPC_ReAcquireBasic(this_npc,
		TDW_BOT_ATTACK_KillSpecifiedNPC_GetUnitByGID));
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TDW_BOT_ATTACK_KillSpecifiedNPC_ReAcquireName(this_npc)
{
	return(TDW_BOT_ATTACK_KillSpecifiedNPC_ReAcquireBasic(this_npc,
		TDW_BOT_ATTACK_KillSpecifiedNPC_GetUnitByName));
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TDW_BOT_ATTACK_KillSpecifiedNPC_ReAcquireBasic(this_npc, get_unit_func)
{
	var npc_obj;
	var count_1;

	if (TDW_BOT_Log.getLevelFile() <= D2JSP_UTIL_LOG_Level_DEBUG)
		TDW_BOT_Log.logDebug("TDW_BOT_ATTACK_KillSpecifiedNPC_ReAcquireBasic() " +
			"entry: ");

	for (count_1 = 0; count_1 < 10; count_1++) {
		npc_obj = get_unit_func(this_npc);
		if (npc_obj) {
			this_npc.__CURRENT__.npc_obj  = npc_obj;
			this_npc.__CURRENT__.location = [npc_obj.x, npc_obj.y];
			break;
		}
		if (count_1) {
			if ((count_1 == 1) && this_npc.__CURRENT__.location) {
				var access_strategy = TDW_BOT_MOVE_GetDefaultLinkAccessStrategy();
				access_strategy.callback_func(access_strategy,
					TDW_PATH_ASCB_GOTO_XYPAIR_LOCAL,
					this_npc.__CURRENT__.location);
				npc_obj = get_unit_func(this_npc);
				if (npc_obj) {
					this_npc.__CURRENT__.npc_obj  = npc_obj;
					this_npc.__CURRENT__.location = [npc_obj.x, npc_obj.y];
					break;
				}
			}
			TDW_BOT_ATTACK_KillSpecifiedNPC_AttackCluster(this_npc);
		}
		TDW_BOT_CHECK_HealthChecks();
		delay(1);
	}

	if (count_1)
		TDW_BOT_Log.logInfo(D2JSP_UTIL_COLOR_RED + "***** NPC " + this_npc.name +
			" NOT FOUND COUNT = " + count_1);

	if (TDW_BOT_Log.getLevelFile() <= D2JSP_UTIL_LOG_Level_DEBUG)
		TDW_BOT_Log.logDebug("TDW_BOT_ATTACK_KillSpecifiedNPC_ReAcquireBasic() " +
			"exit: (NPC " + this_npc.name + " object = " + npc_obj + ")");

	return(npc_obj);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TDW_BOT_ATTACK_KillSpecifiedNPC_GetUnitByGID(this_npc)
{
	return(getUnit(this_npc.unit_type, null, null, this_npc.gid));
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TDW_BOT_ATTACK_KillSpecifiedNPC_GetUnitByName(this_npc)
{
	return(getUnit(this_npc.unit_type, this_npc.name));
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TDW_BOT_ATTACK_KillSpecifiedNPC_IsAlive(this_npc, npc_obj)
{
	var return_code = false;

	if (TDW_BOT_Log.getLevelFile() <= D2JSP_UTIL_LOG_Level_DEBUG)
		TDW_BOT_Log.logDebug("TDW_BOT_ATTACK_KillSpecifiedNPC_IsAlive() " +
			"entry: ");

	if (this_npc.unit_type == D2JSP_UTIL_GETUNIT_NPC)
		return_code = ((npc_obj.mode != D2JSP_MODE_NPC_DEATH) &&
			(npc_obj.mode != D2JSP_MODE_NPC_DEAD) && npc_obj.hp) ?
			true : false;
	else if (this_npc.unit_type == D2JSP_UTIL_GETUNIT_PLAYER)
		return_code = ((npc_obj.mode != D2JSP_MODE_PLAYER_DEATH) &&
			(npc_obj.mode != D2JSP_MODE_PLAYER_DEAD) && npc_obj.hpmax) ?
			true : false;

	if (TDW_BOT_Log.getLevelFile() <= D2JSP_UTIL_LOG_Level_DEBUG)
		TDW_BOT_Log.logDebug("TDW_BOT_ATTACK_KillSpecifiedNPC_IsAlive() " +
			"exit : " + return_code);

	return(return_code);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TDW_BOT_ATTACK_KillSpecifiedNPC_CanAttack(this_npc, npc_obj)
{
	if (TDW_BOT_Log.getLevelFile() <= D2JSP_UTIL_LOG_Level_DEBUG)
		TDW_BOT_Log.logDebug("TDW_BOT_ATTACK_KillSpecifiedNPC_CanAttack() " +
			"entry: ");

	var out_distance  = 0;
	var this_distance = null;

	npc_obj = TDW_BOT_ATTACK_KillSpecifiedNPC_ReAcquire(this_npc);

	if (npc_obj) {
		this_distance = Dist(me.x, me.y, npc_obj.x, npc_obj.y);
		out_distance  = ((!D2JSP_AREA_IsTown(me.area)) &&
			(!D2JSP_AREA_IsTown(npc_obj.area)) &&
			(this_distance >= this_npc.__CURRENT__.dist_min) &&
			(this_distance <= this_npc.__CURRENT__.dist_max) &&
			(!checkCollision(me, npc_obj, TDW_BOT_COLL_BLOCK_ATTACK))) ?
			((!this_distance) ? 1 : this_distance) : 0;
	}

	if (TDW_BOT_Log.getLevelFile() <= D2JSP_UTIL_LOG_Level_DEBUG)
		TDW_BOT_Log.logDebug("TDW_BOT_ATTACK_KillSpecifiedNPC_CanAttack() " +
			"exit : " + out_distance + " (NPC object = " + npc_obj +
			", true distance = " + this_distance + ", boundary min = " +
			this_npc.dist_min + ", boundary max = " + this_npc.dist_max + ")");

	return(out_distance);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TDW_BOT_ATTACK_KillSpecifiedNPC_ShowHP(this_npc, npc_obj, in_text)
{
	if (TDW_BOT_Log.getLevelFile() <= D2JSP_UTIL_LOG_Level_DEBUG)
		TDW_BOT_Log.logDebug("TDW_BOT_ATTACK_KillSpecifiedNPC_ShowHP() " +
			"entry = " + in_text);

	if (npc_obj) {
/*
		D2JSP_UTIL_BNET_OverheadSafe(this_npc.name + " life = " +
			((npc_obj.hp / npc_obj.hpmax) * 100).toFixed(2) + "%");
		if (TDW_BOT_Log.getLevelFile() <= D2JSP_UTIL_LOG_Level_DETAIL)
			TDW_BOT_Log.logDetail("***** " + this_npc.name + ": Current HP: " +
				D2JSP_NPC_GetCurrentHPNominal(npc_obj) + " ---> " +
				((npc_obj.getStat(D2JSP_STAT_HITPOINTS) / 32768) *
				(npc_obj.getStat(D2JSP_STAT_MAXHP) / 256)));
*/
		var hp_nominal = (this_npc.unit_type == D2JSP_UTIL_GETUNIT_NPC) ?
			D2JSP_NPC_GetCurrentHPNominal(npc_obj) : "???";
if (TDW_BOT_Log.getLevelFile() <= D2JSP_UTIL_LOG_Level_DEBUG)
	TDW_BOT_Log.logDebug("TDW_BOT_ATTACK_KillSpecifiedNPC_ShowHP(): " +
	"Got NPC HP nominal (" + hp_nominal + ")");
		var hp_current = (this_npc.unit_type == D2JSP_UTIL_GETUNIT_NPC) ?
			((npc_obj.getStat(D2JSP_STAT_HITPOINTS) / 32768) *
			(npc_obj.getStat(D2JSP_STAT_MAXHP) / 256)) : "???";
if (TDW_BOT_Log.getLevelFile() <= D2JSP_UTIL_LOG_Level_DEBUG)
	TDW_BOT_Log.logDebug("TDW_BOT_ATTACK_KillSpecifiedNPC_ShowHP(): " +
	"Got NPC HP current (" + hp_current + ")");
		var hp_percent = (this_npc.unit_type == D2JSP_UTIL_GETUNIT_NPC) ?
			((npc_obj.hp / npc_obj.hpmax) * 100).toFixed(2) : "???";
if (TDW_BOT_Log.getLevelFile() <= D2JSP_UTIL_LOG_Level_DEBUG)
	TDW_BOT_Log.logDebug("TDW_BOT_ATTACK_KillSpecifiedNPC_ShowHP(): " +
	"Got NPC HP percentage (" + hp_percent + ")");
		D2JSP_UTIL_BNET_OverheadSafe(this_npc.name + " life = " +
			hp_percent + "%");
if (TDW_BOT_Log.getLevelFile() <= D2JSP_UTIL_LOG_Level_DEBUG)
	TDW_BOT_Log.logDebug("TDW_BOT_ATTACK_KillSpecifiedNPC_ShowHP(): " +
	"Did overhead NPC HP report");
		if (TDW_BOT_Log.getLevelFile() <= D2JSP_UTIL_LOG_Level_DETAIL)
			TDW_BOT_Log.logDetail("***** " + this_npc.name + ": Current HP: " +
				((in_text == null) ? "" : (in_text + ": ")) +
				hp_nominal + " ---> " + hp_current);
	}

	if (TDW_BOT_Log.getLevelFile() <= D2JSP_UTIL_LOG_Level_DEBUG)
		TDW_BOT_Log.logDebug("TDW_BOT_ATTACK_KillSpecifiedNPC_ShowHP() " +
			"exit : *NO-RETURN-VALUE*");
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TDW_BOT_ATTACK_KillSpecifiedNPC_AttackNPC(this_npc, npc_obj,
	attacks_npc)
{
	var attack_flag = false;
	var this_attack;

	if (TDW_BOT_Log.getLevelFile() <= D2JSP_UTIL_LOG_Level_DEBUG)
		TDW_BOT_Log.logDebug("TDW_BOT_ATTACK_KillSpecifiedNPC_AttackNPC() " +
			"entry: ");

	if (!npc_obj)
		npc_obj = TDW_BOT_ATTACK_KillSpecifiedNPC_ReAcquire(this_npc);

	if ((!npc_obj) || D2JSP_AREA_IsTown(me.area) ||
		D2JSP_AREA_IsTown(npc_obj.area))
		return(npc_obj);

	if ((this_npc.__CURRENT__.cold_effect > 0) &&
		((getTickCount() - this_npc.__CURRENT__.last_cold_attack) >= 1000) &&
		(npc_obj.getStat(D2JSP_STAT_COLDRESIST) < 100) &&
		(!npc_obj.getState(D2JSP_STATE_FREEZE)) &&
		(!npc_obj.getState(D2JSP_STATE_COLD))) {
		if (TDW_BOT_AttackSelector.performAttackElement(D2JSP_UTIL_DAMAGE_COLD,
			npc_obj)) {
			this_npc.__CURRENT__.last_cold_attack = getTickCount();
			attack_flag                           = true;
		}
	}

	if ((!attack_flag) && D2JSP_SKILL_StaticFieldIsReady(750)) {
		var this_distance = Dist(me.x, me.y, npc_obj.x, npc_obj.y);
		if ((npc_obj.getStat(D2JSP_STAT_LIGHTRESIST) <= 90) &&
			((npc_obj.hp / npc_obj.hpmax) >= .50) &&
			(this_distance <= D2JSP_SKILL_GetRadiusStaticField())) {
//			D2JSP_SKILL_SetAndUseSkillBasic(false, "Static Field", 0);
			if (D2JSP_SKILL_StaticField(false, 750))
				attack_flag = true;
		}
	}

	if (!attack_flag) {
		if (TDW_BOT_AttackSelector.performAttack(npc_obj))
			attack_flag = true;
	}

	if ((!attack_flag) &&
		(!(this_npc.flags & TDW_BOT_ATTACK_NPC_FLAG_NO_CLUSTER)))
		TDW_BOT_ATTACK_KillSpecifiedNPC_AttackCluster(this_npc);

	if (TDW_BOT_CHECK_HealthChecks())
		npc_obj = TDW_BOT_ATTACK_KillSpecifiedNPC_ReAcquire(this_npc);

	if (npc_obj)
		TDW_BOT_ATTACK_KillSpecifiedNPC_ShowHP(this_npc, npc_obj, "AttackNPC()");

	if (TDW_BOT_Log.getLevelFile() <= D2JSP_UTIL_LOG_Level_DEBUG)
		TDW_BOT_Log.logDebug("TDW_BOT_ATTACK_KillSpecifiedNPC_AttackNPC() " +
			"exit : " + npc_obj);

	return(npc_obj);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TDW_BOT_ATTACK_KillSpecifiedNPC_AttackCluster(this_npc, center_coord,
	radius, mode_mask)
{
	var min_count = (D2JSP_UTIL_GEN_TypeOfArrayIndexed(center_coord) &&
		(center_coord.length > 1)) ? 2 : 1;

	radius = (D2JSP_UTIL_GEN_TypeOfNumber(radius) && (radius > 0)) ? radius : 10;

	var move_control =
		new TDW_BOT_ATTACK_MoveControl(TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_ALL,
		null, null, 10, 1000, radius);

/*
	move_control.threat_avoid_spec   =
		(this_npc.threat_attack_spec instanceof TDW_THREAT_MoveSpec) ?
		this_npc.threat_attack_spec :
		(new TDW_THREAT_MoveSpec(this_npc.__CURRENT__.coord_min,
		this_npc.__CURRENT__.coord_max, null, 0, this_npc.bounding_box));
	move_control.threat_cluster_spec = move_control.threat_avoid_spec;
*/
	move_control.threat_avoid_spec   =
		(new TDW_THREAT_MoveSpec(this_npc.__CURRENT__.coord_min,
		this_npc.__CURRENT__.coord_max, null, 0, this_npc.bounding_box));
	move_control.threat_cluster_spec = move_control.threat_avoid_spec;

TDW_BOT_Log.logInfoQuiet("***** TDW_BOT_ATTACK_KillSpecifiedNPC_AttackCluster(): " +
	"threat_avoid_spec   = [" + move_control.threat_avoid_spec + "]");
TDW_BOT_Log.logInfoQuiet("***** TDW_BOT_ATTACK_KillSpecifiedNPC_AttackCluster(): " +
	"threat_cluster_spec = [" + move_control.threat_cluster_spec + "]");

	TDW_BOT_ATTACK_GetAndAttackCluster(min_count, center_coord, radius,
		mode_mask, TDW_BOT_CLUSTER_FLAG_NO_PRESETS, this_npc.id_hash,
		move_control);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TDW_BOT_ATTACK_KillSpecifiedNPC_ShowStats(this_npc, npc_obj)
{
	TDW_BOT_ATTACK_ShowStats(npc_obj, this_npc);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TDW_BOT_ATTACK_KillSpecifiedNPC_ChangePosition(this_npc, npc_obj,
	first_time_flag)
{
TDW_BOT_Log.logDebug("TDW_BOT_ATTACK_KillSpecifiedNPC_ChangePosition() " +
	"CALLER = " + D2JSP_UTIL_FORMAT_FunctionToName(
	TDW_BOT_ATTACK_KillSpecifiedNPC_ChangePosition.caller));

	if (TDW_BOT_TestFlagNPCAvoid_2)
		NEW_TDW_BOT_ATTACK_KillSpecifiedNPC_ChangePosition(this_npc, npc_obj,
			first_time_flag);
	else if (TDW_BOT_TestFlagNPCAvoid)
		OLD_001_TDW_BOT_ATTACK_KillSpecifiedNPC_ChangePosition(this_npc, npc_obj,
			first_time_flag);
	else
		OLD_002_TDW_BOT_ATTACK_KillSpecifiedNPC_ChangePosition(this_npc, npc_obj,
			first_time_flag);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function OLD_001_TDW_BOT_ATTACK_KillSpecifiedNPC_ChangePosition(this_npc, npc_obj,
	first_time_flag)
{
//TDW_BOT_Log.logInfoQuiet("XXXXX CHECK COLLISION START");
//TDW_BOT_Log.flushLog();

	if (TDW_BOT_Log.getLevelFile() <= D2JSP_UTIL_LOG_Level_DEBUG)
		TDW_BOT_Log.logDebug("TDW_BOT_ATTACK_KillSpecifiedNPC_ChangePosition() " +
			"ENTRY: ");

	if (!npc_obj) {
		if (TDW_BOT_Log.getLevelFile() <= D2JSP_UTIL_LOG_Level_DEBUG)
			TDW_BOT_Log.logDebug("TDW_BOT_ATTACK_KillSpecifiedNPC_ChangePosition() " +
				"EXIT : (NPC object is null)");
		return(0);
	}

	var move_pos     = TDW_BOT_ATTACK_KillSpecifiedNPC_FindPosition(this_npc,
		npc_obj);
	var move_control =
		new TDW_BOT_ATTACK_MoveControl(TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_NONE);
	var this_distance;

	move_control.no_change_max = 2;

//TDW_PATH_CreateArea(npc_obj.area);

	while (true) {
/*
TDW_BOT_Log.logInfo("TDW_BOT_ATTACK_KillSpecifiedNPC_ChangePosition(): START : "+
	"AREA = [" + TDW_PATH_MapGlobal.area_list[npc_obj.area].x_1 + ", " +
	TDW_PATH_MapGlobal.area_list[npc_obj.area].y_1 + ", " +
	TDW_PATH_MapGlobal.area_list[npc_obj.area].x_2 + ", " +
	TDW_PATH_MapGlobal.area_list[npc_obj.area].y_2 +
	"], MOVE COORDS = [" + move_pos + "] ---> " +
	(((move_pos[0] >= TDW_PATH_MapGlobal.area_list[npc_obj.area].x_1) &&
	 (move_pos[0] <= TDW_PATH_MapGlobal.area_list[npc_obj.area].x_2) &&
	 (move_pos[1] >= TDW_PATH_MapGlobal.area_list[npc_obj.area].y_1) &&
	 (move_pos[1] <= TDW_PATH_MapGlobal.area_list[npc_obj.area].y_2)) ?
	"VALID AREA COORD" : "INVALID AREA COORD"));
TDW_BOT_Log.flushLog();
		while (checkCollision(me.area, move_pos[0], move_pos[1], 2, npc_obj.x,
			npc_obj.y, 2, TDW_BOT_COLL_BLOCK_ATTACK))
			move_pos = TDW_BOT_ATTACK_KillSpecifiedNPC_FindPosition(this_npc,
				npc_obj);
TDW_BOT_Log.logInfo("TDW_BOT_ATTACK_KillSpecifiedNPC_ChangePosition(): FINISH: "+
	"AREA = [" + TDW_PATH_MapGlobal.area_list[npc_obj.area].x_1 + ", " +
	TDW_PATH_MapGlobal.area_list[npc_obj.area].y_1 + ", " +
	TDW_PATH_MapGlobal.area_list[npc_obj.area].x_2 + ", " +
	TDW_PATH_MapGlobal.area_list[npc_obj.area].y_2 +
	"], MOVE COORDS = [" + move_pos + "] ---> " +
	(((move_pos[0] >= TDW_PATH_MapGlobal.area_list[npc_obj.area].x_1) &&
	 (move_pos[0] <= TDW_PATH_MapGlobal.area_list[npc_obj.area].x_2) &&
	 (move_pos[1] >= TDW_PATH_MapGlobal.area_list[npc_obj.area].y_1) &&
	 (move_pos[1] <= TDW_PATH_MapGlobal.area_list[npc_obj.area].y_2)) ?
	"VALID AREA COORD" : "INVALID AREA COORD"));
TDW_BOT_Log.flushLog();
*/

/*
		//	CODE NOTE: Causes crashing in D2
		// --------------------------------
		//	Warning
		//	Location : D2Common\DRLG\Drlg.cpp, line #766
		//	Expression : ptDrlgLevel->ptRoomFirst
		// --------------------------------
//.killnpc rada creeping bloodwitch beetle coldworm elder fangskin eye summoner kaa duri
		for (var count_1 = 0; count_1 < 20; count_1++) {
			var npc_area   = npc_obj.area;
			var npc_coords = [npc_obj.x, npc_obj.y];
			if (TDW_PATH_IsInAreaPair(npc_area, npc_coords) &&
				TDW_PATH_IsInAreaPair(npc_area, move_pos) &&
				(!checkCollision(npc_area, move_pos[0], move_pos[1], 2,
				npc_coords[0], npc_coords[1], 2, TDW_BOT_COLL_BLOCK_ATTACK)))
				break;
			move_pos = TDW_BOT_ATTACK_KillSpecifiedNPC_FindPosition(this_npc,
				npc_obj);
		}
*/

		if ((Dist(me.x, me.y, move_pos[0], move_pos[1]) > 40) && first_time_flag){
			TDW_PATH_CreateArea(npc_obj.area);
			var access_strategy = TDW_BOT_MOVE_GetDefaultLinkAccessStrategy();
			access_strategy.callback_func(access_strategy,
				TDW_PATH_ASCB_GOTO_XYPAIR_LOCAL, move_pos);
			this_distance = Dist(me.x, me.y, npc_obj.x, npc_obj.y);
			if ((this_distance >= this_npc.dist_min) &&
				(this_distance <= this_npc.dist_max) &&
				(!checkCollision(me, npc_obj, TDW_BOT_COLL_BLOCK_ATTACK)))
				break;
		}
		if (Dist(me.x, me.y, move_pos[0], move_pos[1]) > 40) {
			TDW_BOT_MOVE_TeleportToPartial(move_pos, TDW_BOT_SUPP_TP2DEST_FLAG_NONE,
				10, move_control);
			this_distance = Dist(me.x, me.y, npc_obj.x, npc_obj.y);
			if ((this_distance >= this_npc.dist_min) &&
				(this_distance <= this_npc.dist_max) &&
				(!checkCollision(me, npc_obj, TDW_BOT_COLL_BLOCK_ATTACK)))
				break;
		}
/*
	APP NOTE: CRASHES
		var me_to_move = Dist(me.x, me.y, move_pos[0], move_pos[1]);
		var me_to_npc  = Dist(me.x, me.y, npc_obj.x, npc_obj.y);
		if ((me_to_move <= 40) && (me_to_npc <= 40)) {
TDW_BOT_Log.logInfoQuiet("ATTEMPT: checkCollision(" + me.area + ", " +
	move_pos[0] + ", " + move_pos[1] + ", 2, " + npc_obj.x + ", " + npc_obj.y +
	", 2, " + TDW_BOT_COLL_BLOCK_ATTACK + ") me,move distance = " + me_to_move +
	", me,npc distance = " + me_to_npc);
TDW_BOT_Log.flushLog();
			if (!checkCollision(me.area, move_pos[0], move_pos[1], 2, npc_obj.x,
				npc_obj.y, 2, TDW_BOT_COLL_BLOCK_ATTACK)) {
				D2JSP_SKILL_TeleportToPair(move_pos);
				break;
			}
*/
/*
		var me_to_move = Dist(me.x, me.y, move_pos[0], move_pos[1]);
		var me_to_npc  = Dist(me.x, me.y, npc_obj.x, npc_obj.y);
		if ((me_to_move <= 40) && (me_to_npc <= 40)) {
	APP NOTE: CRASHES
TDW_BOT_Log.logInfoQuiet("ATTEMPT: checkCollision(" + me.area + ", " +
	move_pos[0] + ", " + move_pos[1] + ", 2, " + TDW_BOT_COLL_BLOCK_ATTACK +
	") me,move distance = " + me_to_move + ", me,npc distance = " + me_to_npc);
TDW_BOT_Log.flushLog();
			if (!checkCollision(me.area, move_pos[0], move_pos[1], 2,
				TDW_BOT_COLL_BLOCK_ATTACK)) {
				D2JSP_SKILL_TeleportToPair(move_pos);
				break;
			}
*/
		else {
			D2JSP_SKILL_TeleportToPair(move_pos);
			this_distance = Dist(me.x, me.y, npc_obj.x, npc_obj.y);
			if ((this_distance >= this_npc.dist_min) &&
				(this_distance <= this_npc.dist_max) &&
				(!checkCollision(me, npc_obj, TDW_BOT_COLL_BLOCK_ATTACK)))
				break;
		}
		move_pos = TDW_BOT_ATTACK_KillSpecifiedNPC_FindPosition(this_npc,npc_obj);
	}
//TDW_BOT_Log.logInfoQuiet("XXXXX CHECK COLLISION DONE");
//TDW_BOT_Log.flushLog();

	if (TDW_BOT_Log.getLevelFile() <= D2JSP_UTIL_LOG_Level_DEBUG)
		TDW_BOT_Log.logDebug("TDW_BOT_ATTACK_KillSpecifiedNPC_ChangePosition() " +
			"EXIT : ");
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function OLD_002_TDW_BOT_ATTACK_KillSpecifiedNPC_ChangePosition(this_npc, npc_obj,
	first_time_flag)
{
	if (TDW_BOT_Log.getLevelFile() <= D2JSP_UTIL_LOG_Level_DEBUG)
		TDW_BOT_Log.logDebug("TDW_BOT_ATTACK_KillSpecifiedNPC_ChangePosition() " +
			"ENTRY: ");

	if (!npc_obj) {
		if (TDW_BOT_Log.getLevelFile() <= D2JSP_UTIL_LOG_Level_DEBUG)
			TDW_BOT_Log.logDebug("TDW_BOT_ATTACK_KillSpecifiedNPC_ChangePosition() " +
				"EXIT : (NPC object is null)");
		return(0);
	}

	var move_control   =
		new TDW_BOT_ATTACK_MoveControl(TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_NONE);
	var this_distance;

	move_control.no_change_max = 2;

	var best_move_count = 99999;
	var move_pos;
	for (var count_1 = 0; count_1 < (10 + 1); count_1++) {
		var this_move = TDW_BOT_ATTACK_KillSpecifiedNPC_FindPosition(this_npc,
			npc_obj);
		//	CODE NOTE: Causes crashing in D2
		// --------------------------------
		//	Warning
		//	Location : D2Common\DRLG\Drlg.cpp, line #766
		//	Expression : ptDrlgLevel->ptRoomFirst
		// --------------------------------
		for (var count_2 = 0; count_2 < 20; count_2++) {
			var npc_area   = npc_obj.area;
			var npc_coords = [npc_obj.x, npc_obj.y];
			if (TDW_PATH_IsInAreaPair(npc_area, npc_coords) &&
				TDW_PATH_IsInAreaPair(npc_area, this_move) &&
				(!checkCollision(npc_area, this_move[0], this_move[1], 2,
				npc_coords[0], npc_coords[1], 2, TDW_BOT_COLL_BLOCK_ATTACK)))
				break;
			this_move = TDW_BOT_ATTACK_KillSpecifiedNPC_FindPosition(this_npc,
				npc_obj);
		}
		TDW_BOT_CHECK_DoChecks();
		// --------------------------------
		var this_cluster = new TDW_BOT_ATTACK_ClusterSimple(this_move, 5);
//print("***** Change Position Try Count = " + count_1 + " / " + count_2 +
//	" = " + this_cluster.count);
		// We use less-than-or-equal because the most-recent cluster evaluation
		// should override move positions which were evaluated earlier.
		if (this_cluster.count <= best_move_count) {
			move_pos = this_move;
			if (!this_cluster.count)
				break;
		}
	}

var tmp_color = (!this_cluster.count) ? D2JSP_UTIL_COLOR_GREEN :
	((this_cluster.count < 10) ? D2JSP_UTIL_COLOR_YELLOW : D2JSP_UTIL_COLOR_RED);
TDW_BOT_Log.logInfo(tmp_color +"***** Change Position Final Count NPC = " +
	"[" + npc_obj.x + "," + npc_obj.y + "], " + this_npc.dist_min + ", " +
	this_npc.dist_max + ", | " +
	count_1 + " / " + count_2 + " = " + this_cluster.count);

	if ((Dist(me.x, me.y, move_pos[0], move_pos[1]) > 40) && first_time_flag) {
//print("***** Change Position Move Type A");
		TDW_PATH_CreateArea(npc_obj.area);
		var access_strategy = TDW_BOT_MOVE_GetDefaultLinkAccessStrategy();
		access_strategy.callback_func(access_strategy,
			TDW_PATH_ASCB_GOTO_XYPAIR_LOCAL, move_pos);
	}
	else if (Dist(me.x, me.y, move_pos[0], move_pos[1]) > 40)
{
//print("***** Change Position Move Type B");
		TDW_BOT_MOVE_TeleportToPartial(move_pos, TDW_BOT_SUPP_TP2DEST_FLAG_NONE,
			10, move_control);
}
	else
{
//print("***** Change Position Move Type C");
		D2JSP_SKILL_TeleportToPair(move_pos);
}

	if (TDW_BOT_Log.getLevelFile() <= D2JSP_UTIL_LOG_Level_DEBUG)
		TDW_BOT_Log.logDebug("TDW_BOT_ATTACK_KillSpecifiedNPC_ChangePosition() " +
			"EXIT : ");

	runGC();
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function NEW_TDW_BOT_ATTACK_KillSpecifiedNPC_ChangePosition(this_npc, npc_obj,
	first_time_flag)
{
	if (TDW_BOT_Log.getLevelFile() <= D2JSP_UTIL_LOG_Level_DEBUG)
		TDW_BOT_Log.logDebug("TDW_BOT_ATTACK_KillSpecifiedNPC_ChangePosition() " +
			"ENTRY: ");

	npc_obj = TDW_BOT_ATTACK_KillSpecifiedNPC_ReAcquire(this_npc);

	if (!npc_obj) {
		if (TDW_BOT_Log.getLevelFile() <= D2JSP_UTIL_LOG_Level_DEBUG)
			TDW_BOT_Log.logDebug("TDW_BOT_ATTACK_KillSpecifiedNPC_ChangePosition() " +
				"EXIT : (NPC object is null)");
		return(null);
	}

	var move_control   =
		new TDW_BOT_ATTACK_MoveControl(TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_NONE);

	move_control.threat_avoid_spec  =
		(this_npc.threat_attack_spec instanceof TDW_THREAT_MoveSpec) ?
		this_npc.threat_attack_spec :
		(new TDW_THREAT_MoveSpec(this_npc.__CURRENT__.coord_min,
		this_npc.__CURRENT__.coord_max, null, 0, this_npc.bounding_box));

if (false) {
	var step_size_list = [5, 2, 1];
	var move_cell      = null;
	var move_pos;

	var move_cell_list;
	for (var count_1 = 0; count_1 < step_size_list.length; count_1++) {
		move_cell_list =
			TDW_THREAT_FindSafestSpotList(this_npc.__CURRENT__.location,
			move_control.threat_avoid_spec,
			TDW_THREAT_AVOID_FLAG_CENTER_IS_ATTACKABLE, step_size_list[count_1]);
/*
//		if (move_cell_list.length)
//			break;
TDW_BOT_Log.emitSep("=");
TDW_BOT_Log.logInfoQuiet("WITH BOUNDING BOX");
TDW_BOT_Log.emitSep("-");
TDW_THREAT_FindSafestSpot_DebugToLog(this_npc.__CURRENT__.location,
	me.area, move_control.threat_avoid_spec, step_size_list[count_1],
	move_cell_list, TDW_BOT_Log);
TDW_BOT_Log.emitSep("=");
TDW_BOT_Log.emitSep("=");
TDW_BOT_Log.logInfoQuiet("WITHOUT BOUNDING BOX");
var tmp_spec = D2JSP_UTIL_GEN_CloneObject(move_control.threat_avoid_spec);
tmp_spec.bounding_box = null;
TDW_BOT_Log.logInfo("BOUNDING BOX OLD = [" + move_control.threat_avoid_spec + "]");
TDW_BOT_Log.logInfo("BOUNDING BOX NEW = [" + tmp_spec + "]");
move_cell_list =
	TDW_THREAT_FindSafestSpotList(this_npc.__CURRENT__.location,
		tmp_spec, TDW_THREAT_AVOID_FLAG_CENTER_IS_ATTACKABLE,
		step_size_list[count_1]);
TDW_THREAT_FindSafestSpot_DebugToLog(this_npc.__CURRENT__.location,
	me.area, tmp_spec, step_size_list[count_1], move_cell_list, TDW_BOT_Log);
TDW_BOT_Log.emitSep("-");
TDW_BOT_Log.emitSep("=");
*/
		if (move_cell_list.length)
			break;
	}

	if (move_cell_list.length)
		move_pos = [move_cell_list[0].x, move_cell_list[0].y];
	else {
		TDW_BOT_Log.logWarningColor("TDW_BOT_ATTACK_KillSpecifiedNPC_ChangePosition() " +
			"No move position found (NPC last coordinates = [" +
			npc_obj.x + "," + npc_obj.y + "])");
		move_pos = [this_npc.__CURRENT__.location[0],
			this_npc.__CURRENT__.location[1]];
	}
}

	var step_size_list = [5, 2, 1];
	var move_cell      = null;
	var move_pos;

	for (var count_1 = 0; count_1 < step_size_list.length; count_1++) {
		move_cell = TDW_THREAT_FindSafestSpot(this_npc.__CURRENT__.location,
			move_control.threat_avoid_spec,
			TDW_THREAT_AVOID_FLAG_CENTER_IS_ATTACKABLE, step_size_list[count_1]);
		if (move_cell)
			break;
	}

	if (move_cell)
		move_pos = [move_cell.x, move_cell.y];
	else {
		TDW_BOT_Log.logWarningColor("TDW_BOT_ATTACK_KillSpecifiedNPC_ChangePosition() " +
			"No move position found (NPC last coordinates = [" +
			npc_obj.x + "," + npc_obj.y + "])");
		move_pos = [this_npc.__CURRENT__.location[0],
			this_npc.__CURRENT__.location[1]];
	}

/*
	if (Dist(me.x, me.y, move_pos[0], move_pos[1]) < 5) {
		if (TDW_BOT_Log.getLevelFile() <= D2JSP_UTIL_LOG_Level_DEBUG)
			TDW_BOT_Log.logDebug("TDW_BOT_ATTACK_KillSpecifiedNPC_ChangePosition() " +
				"EXIT : (move position found is less than distance 5 from my " +
				"current position)");
		return(null);
	}
*/

	move_control.no_change_max = 2;

/*
var tmp_color = (!this_cluster.count) ? D2JSP_UTIL_COLOR_GREEN :
	((this_cluster.count < 10) ? D2JSP_UTIL_COLOR_YELLOW : D2JSP_UTIL_COLOR_RED);
TDW_BOT_Log.logInfo(tmp_color +"***** Change Position Final Count NPC = " +
	"[" + npc_obj.x + "," + npc_obj.y + "], " + this_npc.dist_min + ", " +
	this_npc.dist_max + ", | " +
	count_1 + " / " + count_2 + " = " + this_cluster.count);
*/

	if ((Dist(me.x, me.y, move_pos[0], move_pos[1]) > 40) && first_time_flag) {
//print("***** Change Position Move Type A");
		var access_strategy = TDW_BOT_MOVE_GetDefaultLinkAccessStrategy();
/*
		access_strategy.callback_func(access_strategy,
			TDW_PATH_ASCB_GOTO_XYPAIR_LOCAL, move_pos);
*/
		access_strategy.gotoXYPairLocal(move_pos,
			TDW_BOT_SUPP_TP2DEST_FLAG_NO_AVOID_NPCS);
	}
	else if (Dist(me.x, me.y, move_pos[0], move_pos[1]) > 40)
{
//print("***** Change Position Move Type B");
		TDW_BOT_MOVE_TeleportToPartial(move_pos, TDW_BOT_SUPP_TP2DEST_FLAG_NONE,
			10, move_control);
}
	else
{
//print("***** Change Position Move Type C");
		D2JSP_SKILL_TeleportToPair(move_pos);
}

	if (TDW_BOT_ReportChangePosition)
		TDW_BOT_Log.logInfoQuiet(
			"TDW_BOT_ATTACK_KillSpecifiedNPC_ChangePosition() " +
			"EXIT : New position = [" + me.x + "," + me.y + "], " +
			"NPC position = [" + this_npc.__CURRENT__.location +
			"], distance = " + myDist(this_npc.__CURRENT__.location[0],
			this_npc.__CURRENT__.location[1]));

	if (TDW_BOT_Log.getLevelFile() <= D2JSP_UTIL_LOG_Level_DEBUG)
		TDW_BOT_Log.logDebug("TDW_BOT_ATTACK_KillSpecifiedNPC_ChangePosition() " +
			"EXIT : New position = [" + me.x + "," + me.y + "], " +
			"NPC position = [" + this_npc.__CURRENT__.location +
			"], distance = " + myDist(this_npc.__CURRENT__.location[0],
			this_npc.__CURRENT__.location[1]));

	runGC();

	return(TDW_BOT_ATTACK_KillSpecifiedNPC_ReAcquire(this_npc));
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TDW_BOT_ATTACK_KillSpecifiedNPC_ChangePositionForce(this_npc, npc_obj)
{
	if (TDW_BOT_Log.getLevelFile() <= D2JSP_UTIL_LOG_Level_DEBUG)
		TDW_BOT_Log.logDebug("TDW_BOT_ATTACK_KillSpecifiedNPC_ChangePositionForce() " +
			"ENTRY: ");

	if (!npc_obj) {
		if (TDW_BOT_Log.getLevelFile() <= D2JSP_UTIL_LOG_Level_DEBUG)
			TDW_BOT_Log.logDebug("TDW_BOT_ATTACK_KillSpecifiedNPC_ChangePositionForce() " +
				"EXIT : (NPC object is null)");
		return(0);
	}

	var move_pos     = TDW_BOT_ATTACK_KillSpecifiedNPC_FindPosition(this_npc,
		npc_obj);
	var move_control =
		new TDW_BOT_ATTACK_MoveControl(TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_NONE);
	var this_distance;

	move_control.no_change_max = 2;

	while (true) {
		//	CODE NOTE: Causes crashing in D2
		// --------------------------------
		//	Warning
		//	Location : D2Common\DRLG\Drlg.cpp, line #766
		//	Expression : ptDrlgLevel->ptRoomFirst
		// --------------------------------
		for (var count_1 = 0; count_1 < 20; count_1++) {
			var npc_area   = npc_obj.area;
			var npc_coords = [npc_obj.x, npc_obj.y];
			if (TDW_PATH_IsInAreaPair(npc_area, npc_coords) &&
				TDW_PATH_IsInAreaPair(npc_area, move_pos) &&
				(!checkCollision(npc_area, move_pos[0], move_pos[1], 2,
				npc_coords[0], npc_coords[1], 2, TDW_BOT_COLL_BLOCK_ATTACK)))
				break;
			move_pos = TDW_BOT_ATTACK_KillSpecifiedNPC_FindPosition(this_npc,
				npc_obj);
		}
/*
		if ((Dist(me.x, me.y, move_pos[0], move_pos[1]) > 40) && first_time_flag){
			TDW_PATH_CreateArea(npc_obj.area);
			var access_strategy = TDW_BOT_MOVE_GetDefaultLinkAccessStrategy();
			access_strategy.callback_func(access_strategy,
				TDW_PATH_ASCB_GOTO_XYPAIR_LOCAL, move_pos);
			this_distance = Dist(me.x, me.y, npc_obj.x, npc_obj.y);
			if ((this_distance >= this_npc.dist_min) &&
				(this_distance <= this_npc.dist_max) &&
				(!checkCollision(me, npc_obj, TDW_BOT_COLL_BLOCK_ATTACK)))
				break;
		}
*/
		if (Dist(me.x, me.y, move_pos[0], move_pos[1]) > 40) {
			TDW_BOT_MOVE_TeleportToPartial(move_pos, TDW_BOT_SUPP_TP2DEST_FLAG_NONE,
				10, move_control);
			this_distance = Dist(me.x, me.y, npc_obj.x, npc_obj.y);
			if ((this_distance >= this_npc.__CURRENT__.dist_min) &&
				(this_distance <= this_npc.__CURRENT__.dist_max) &&
				(!checkCollision(me, npc_obj, TDW_BOT_COLL_BLOCK_ATTACK)))
				break;
		}
		else {
			D2JSP_SKILL_TeleportToPair(move_pos);
			this_distance = Dist(me.x, me.y, npc_obj.x, npc_obj.y);
			if ((this_distance >= this_npc.__CURRENT__.dist_min) &&
				(this_distance <= this_npc.__CURRENT__.dist_max) &&
				(!checkCollision(me, npc_obj, TDW_BOT_COLL_BLOCK_ATTACK)))
				break;
		}
		move_pos = TDW_BOT_ATTACK_KillSpecifiedNPC_FindPosition(this_npc,npc_obj);
	}

	if (TDW_BOT_Log.getLevelFile() <= D2JSP_UTIL_LOG_Level_DEBUG)
		TDW_BOT_Log.logDebug("TDW_BOT_ATTACK_KillSpecifiedNPC_ChangePositionForce() " +
			"EXIT : ");
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TDW_BOT_ATTACK_KillSpecifiedNPC_FindPosition(this_npc, npc_obj)
{
	if (TDW_BOT_Log.getLevelFile() <= D2JSP_UTIL_LOG_Level_DEBUG)
		TDW_BOT_Log.logDebug("TDW_BOT_ATTACK_KillSpecifiedNPC_FindPosition() " +
			"ENTRY: ");

	if (!npc_obj) {
		if (TDW_BOT_Log.getLevelFile() <= D2JSP_UTIL_LOG_Level_DEBUG)
			TDW_BOT_Log.logDebug("TDW_BOT_ATTACK_KillSpecifiedNPC_FindPosition() "+
				"EXIT : (NPC object is null)");
		return(null);
	}

/*
	var new_pos =
		[npc_obj.x + (D2JSP_UTIL_GEN_RandomRange(this_npc.min_x, this_npc.max_x) *
		((D2JSP_UTIL_GEN_RandomRange(0, 1)) ? 1 : -1)),
		npc_obj.y + (D2JSP_UTIL_GEN_RandomRange(this_npc.min_y, this_npc.max_y) *
		((D2JSP_UTIL_GEN_RandomRange(0, 1)) ? 1 : -1))];
*/

	var new_pos = [
		npc_obj.x + (rnd(this_npc.__CURRENT__.coord_min,
			this_npc.__CURRENT__.coord_max) * [-1, 1][rnd(0, 1)]),
		npc_obj.y + (rnd(this_npc.__CURRENT__.coord_min,
			this_npc.__CURRENT__.coord_max) * [-1, 1][rnd(0, 1)])];

	if (TDW_BOT_Log.getLevelFile() <= D2JSP_UTIL_LOG_Level_DEBUG)
		TDW_BOT_Log.logDebug("TDW_BOT_ATTACK_KillSpecifiedNPC_FindPosition() " +
			"EXIT = [" + new_pos + "]");

	return(new_pos);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function OLD_001_TDW_BOT_ATTACK_KillSpecifiedNPC_FindPosition(this_npc, npc_obj)
{
	if (TDW_BOT_Log.getLevelFile() <= D2JSP_UTIL_LOG_Level_DEBUG)
		TDW_BOT_Log.logDebug("TDW_BOT_ATTACK_KillSpecifiedNPC_FindPosition() " +
			"ENTRY: ");

	if (!npc_obj) {
		if (TDW_BOT_Log.getLevelFile() <= D2JSP_UTIL_LOG_Level_DEBUG)
			TDW_BOT_Log.logDebug("TDW_BOT_ATTACK_KillSpecifiedNPC_FindPosition() "+
				"EXIT : (NPC object is null)");
		return(null);
	}

	var new_pos =
		[npc_obj.x + (D2JSP_UTIL_GEN_RandomRange(this_npc.min_x, this_npc.max_x) *
		((D2JSP_UTIL_GEN_RandomRange(0, 1)) ? 1 : -1)),
		npc_obj.y + (D2JSP_UTIL_GEN_RandomRange(this_npc.min_y, this_npc.max_y) *
		((D2JSP_UTIL_GEN_RandomRange(0, 1)) ? 1 : -1))];

	if (TDW_BOT_Log.getLevelFile() <= D2JSP_UTIL_LOG_Level_DEBUG)
		TDW_BOT_Log.logDebug("TDW_BOT_ATTACK_KillSpecifiedNPC_FindPosition() " +
			"EXIT = [" + new_pos + "]");

	return(new_pos);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function OLD_002_TDW_BOT_ATTACK_KillSpecifiedNPC_FindPosition(this_npc, npc_obj)
{
	if (TDW_BOT_Log.getLevelFile() <= D2JSP_UTIL_LOG_Level_DEBUG)
		TDW_BOT_Log.logDebug("TDW_BOT_ATTACK_KillSpecifiedNPC_FindPosition() " +
			"ENTRY: ");

	if (!npc_obj) {
		if (TDW_BOT_Log.getLevelFile() <= D2JSP_UTIL_LOG_Level_DEBUG)
			TDW_BOT_Log.logDebug("TDW_BOT_ATTACK_KillSpecifiedNPC_FindPosition() "+
				"EXIT : (NPC object is null)");
		return(null);
	}

/*
	var new_pos =
		[npc_obj.x + (D2JSP_UTIL_GEN_RandomRange(this_npc.min_x, this_npc.max_x) *
		((D2JSP_UTIL_GEN_RandomRange(0, 1)) ? 1 : -1)),
		npc_obj.y + (D2JSP_UTIL_GEN_RandomRange(this_npc.min_y, this_npc.max_y) *
		((D2JSP_UTIL_GEN_RandomRange(0, 1)) ? 1 : -1))];
*/

	var new_pos = [
		npc_obj.x + (rnd(this_npc.__CURRENT__.coord_min,
			this_npc.__CURRENT__.coord_max) * [-1, 1][rnd(0, 1)]),
		npc_obj.y + (rnd(this_npc.__CURRENT__.coord_min,
			this_npc.__CURRENT__.coord_max) * [-1, 1][rnd(0, 1)])];

	if (TDW_BOT_Log.getLevelFile() <= D2JSP_UTIL_LOG_Level_DEBUG)
		TDW_BOT_Log.logDebug("TDW_BOT_ATTACK_KillSpecifiedNPC_FindPosition() " +
			"EXIT = [" + new_pos + "]");

	return(new_pos);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TDW_BOT_ATTACK_MoveToSafety(center_coord, min_linear_dist,
	max_linear_dist, max_tries)
{
	if (TDW_BOT_Log.getLevelFile() <= D2JSP_UTIL_LOG_Level_DEBUG)
		TDW_BOT_Log.logDebug("TDW_BOT_ATTACK_MoveToSafety() " +
			"ENTRY: ");

	var move_pos;

	if ((move_pos = TDW_BOT_ATTACK_FindSafestMove(center_coord, min_linear_dist,
		max_linear_dist, max_tries)) != null) {
		TDW_BOT_CHECK_DoChecks();
		var this_distance = Dist(me.x, me.y, move_pos[0], move_pos[1]);
/*
		if (this_distance > 40) {
//print("***** Change Position Move Type A");
			TDW_PATH_CreateArea(me.area);
			var access_strategy = TDW_BOT_MOVE_GetDefaultLinkAccessStrategy();
			access_strategy.callback_func(access_strategy,
				TDW_PATH_ASCB_GOTO_XYPAIR_LOCAL, move_pos);
		}
		else if (this_distance > 25) {
*/
		if (this_distance > 25) {
			var move_control   =
				new TDW_BOT_ATTACK_MoveControl(TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_NONE);
			move_control.no_change_max = 2;
//print("***** Change Position Move Type B");
			TDW_BOT_MOVE_TeleportToPartial(move_pos, TDW_BOT_SUPP_TP2DEST_FLAG_NONE,
				10, move_control);
		}
		else
{
//print("***** Change Position Move Type C");
			D2JSP_SKILL_TeleportToPair(move_pos);
}
	}

	if (TDW_BOT_Log.getLevelFile() <= D2JSP_UTIL_LOG_Level_DEBUG)
		TDW_BOT_Log.logDebug("TDW_BOT_ATTACK_MoveToSafety() " +
			"EXIT : (move_pos = [" + move_pos + "]");

	runGC();
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TDW_BOT_ATTACK_FindSafestMove(center_coord, min_linear_dist,
	max_linear_dist, max_tries)
{
	if (TDW_BOT_Log.getLevelFile() <= D2JSP_UTIL_LOG_Level_DEBUG)
		TDW_BOT_Log.logDebug("TDW_BOT_ATTACK_FindSafestMove() " +
			"ENTRY: ");
	center_coord    = (D2JSP_UTIL_GEN_TypeOfArrayIndexed(center_coord) &&
		(center_coord.length > 1)) ? center_coord : [me.x, me.y];
	min_linear_dist = (D2JSP_UTIL_GEN_TypeOfNumber(min_linear_dist) &&
		(min_linear_dist >= 0)) ? min_linear_dist : 10;
	max_linear_dist = (D2JSP_UTIL_GEN_TypeOfNumber(max_linear_dist) &&
		(max_linear_dist >= 0)) ? max_linear_dist : 20;
	max_tries       = (D2JSP_UTIL_GEN_TypeOfNumber(max_tries) &&
		(max_tries > 0)) ? max_tries : 10;

	if (min_linear_dist > max_linear_dist) {
		var tmp_linear_dist = min_linear_dist;
		min_linear_dist = max_linear_dist;
		max_linear_dist = tmp_linear_dist;
	}

	if ((max_linear_dist - min_linear_dist) < 5)
		max_linear_dist += 5 - (max_linear_dist - min_linear_dist);

	if (!TDW_PATH_IsInAreaPair(me.area, center_coord))
		return(null);

	var move_pos        = null;
	var best_move_count = 99999;
	for (var count_1 = 0; count_1 < (max_tries + 1); count_1++) {
		var this_move = (!count_1) ? center_coord :
			[center_coord[0] + (rnd(min_linear_dist, max_linear_dist) *
				[-1, 1][rnd(0, 1)]),
			center_coord[1] + (rnd(min_linear_dist, max_linear_dist) *
				[-1, 1][rnd(0, 1)])];
		//	CODE NOTE: Causes crashing in D2
		// --------------------------------
		//	Warning
		//	Location : D2Common\DRLG\Drlg.cpp, line #766
		//	Expression : ptDrlgLevel->ptRoomFirst
		// --------------------------------
		for (var count_2 = 0; count_2 < 20; count_2++) {
			if (TDW_PATH_IsInAreaPair(me.area, center_coord) &&
				TDW_PATH_IsInAreaPair(me.area, this_move) &&
				(!checkCollision(me.area, this_move[0], this_move[1], 2,
				center_coord[0], center_coord[1], 2, TDW_BOT_COLL_BLOCK_ATTACK)))
				break;
			this_move = [
				center_coord[0] + (rnd(min_linear_dist, max_linear_dist) *
					[-1, 1][rnd(0, 1)]),
				center_coord[1] + (rnd(min_linear_dist, max_linear_dist) *
					[-1, 1][rnd(0, 1)])];
		}
		// --------------------------------
		var this_cluster = new TDW_BOT_ATTACK_ClusterSimple(this_move, 5);
//print("***** Find Position Try Count = " + count_1 + " / " + count_2 +
//	" = " + this_cluster.count);
		// We use less-than-or-equal because the most-recent cluster evaluation
		// should override move positions which were evaluated earlier.
		if (this_cluster.count <= best_move_count) {
			move_pos = this_move;
			if (!this_cluster.count)
				break;
		}
	}

var tmp_color = (!this_cluster.count) ? D2JSP_UTIL_COLOR_GREEN :
	((this_cluster.count < 10) ? D2JSP_UTIL_COLOR_YELLOW : D2JSP_UTIL_COLOR_RED);
print(tmp_color +"***** Change Position Final Count = " +
	count_1 + " / " + count_2 + " = " + this_cluster.count);
	if (TDW_BOT_Log.getLevelFile() <= D2JSP_UTIL_LOG_Level_DEBUG)
		TDW_BOT_Log.logDebug("TDW_BOT_ATTACK_FindSafestMove() " +
			"EXIT : (return value = [" + move_pos + "])");

	return(move_pos);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TDW_BOT_ATTACK_ShowStats(npc_obj, this_npc)
{
	var old_log_screen_flag = TDW_BOT_Log.screenOff();

var TDW_BOT_ATTACK_SpecStats = [
	D2JSP_STAT_NORMAL_DAMAGE_REDUCTION,
	D2JSP_STAT_MAGIC_DAMAGE_REDUCTION,
	D2JSP_STAT_DAMAGERESIST,
	D2JSP_STAT_MAGICRESIST,
	D2JSP_STAT_FIRERESIST,
	D2JSP_STAT_LIGHTRESIST,
	D2JSP_STAT_COLDRESIST,
	D2JSP_STAT_POISONRESIST
];

	if (!npc_obj)
		return(0);

	var sep_length = npc_obj.name.length + 18 + 3 + 3 + 36 + 3 + 14 +
		((npc_obj.type == D2JSP_UTIL_GETUNIT_PLAYER) ? (3 + 14) : 0);

	TDW_BOT_Log.logInfo(D2JSP_UTIL_FORMAT_LJust("", sep_length, "="));
	TDW_BOT_Log.logInfo(D2JSP_UTIL_FORMAT_LJust("", sep_length, "="));
	TDW_BOT_Log.logInfo(((this_npc instanceof TDW_BOT_ATTACK_SpecialNPC) ?
			"Attack Specified " : "") + "NPC Analysis for " + npc_obj.name);
	TDW_BOT_Log.logInfo(D2JSP_UTIL_FORMAT_LJust("", sep_length, "="));
	TDW_BOT_Log.logInfo(npc_obj.name + ": Unit Type     : " + npc_obj.type);
	TDW_BOT_Log.logInfo(npc_obj.name + ": Class ID      : " + npc_obj.classid);
	TDW_BOT_Log.logInfo(npc_obj.name + ": ID            : " + npc_obj.id);
	TDW_BOT_Log.logInfo(npc_obj.name + ": GID           : " + npc_obj.gid);
	TDW_BOT_Log.logInfo(npc_obj.name + ": Area          : " +
		npc_obj.area + " (" + D2JSP_AREA_AreaToName(npc_obj.area) + ")");
	TDW_BOT_Log.logInfo(npc_obj.name + ": Location      : [" +
		npc_obj.x + ", " + npc_obj.y + "]");
	TDW_BOT_Log.logInfo(npc_obj.name + ": HP            : " + npc_obj.hp);
	TDW_BOT_Log.logInfo(npc_obj.name + ": HP Max        : " + npc_obj.hpmax);
	TDW_BOT_Log.logInfo(npc_obj.name + ": Current HP    : " +
		D2JSP_NPC_GetCurrentHPNominal(npc_obj));
	TDW_BOT_Log.logInfo(npc_obj.name + ": Stat HP       : " +
		npc_obj.getStat(D2JSP_STAT_HITPOINTS));
	TDW_BOT_Log.logInfo(npc_obj.name + ": Stat HP Max   : " +
		npc_obj.getStat(D2JSP_STAT_MAXHP));
	TDW_BOT_Log.logInfo(npc_obj.name + ": Final HP %    : " +
		((npc_obj.hp / npc_obj.hpmax) * 100).toFixed(2) + "%");
	TDW_BOT_Log.logInfo(npc_obj.name + ": Cold Effect   : " +
		D2JSP_NPC_GetColdLengthPercent(npc_obj) + "%");
	if (parseFloat(me.version) >= 0.3525)
		TDW_BOT_Log.logInfo(npc_obj.name + ": Spec Type     : " +
			((npc_obj.type != D2JSP_UTIL_GETUNIT_NPC) ? "N/A" :
			("0x" + D2JSP_UTIL_FORMAT_ZeroFill(npc_obj.spectype.toString(16), 4))));

	TDW_BOT_Log.logInfo(D2JSP_UTIL_FORMAT_LJust("", sep_length, "-"));

	if (this_npc instanceof TDW_BOT_ATTACK_SpecialNPC) {
		TDW_BOT_Log.logInfo(npc_obj.name + ": Spec Flags    : 0x" +
			D2JSP_UTIL_FORMAT_ZeroFill(this_npc.flags.toString(16), 4));
		TDW_BOT_Log.logInfo(npc_obj.name + ": Loop Count    : " +
			this_npc.loop_count + " (" + this_npc.__CURRENT__.loop_count + ")");
		TDW_BOT_Log.logInfo(npc_obj.name + ": Coord Min     : " +
			this_npc.coord_min + " (" + this_npc.__CURRENT__.coord_min + ")");
		TDW_BOT_Log.logInfo(npc_obj.name + ": Coord Max     : " +
			this_npc.coord_max + " (" + this_npc.__CURRENT__.coord_max + ")");
		TDW_BOT_Log.logInfo(npc_obj.name + ": Coord Min/Min : " +
			this_npc.coord_min_min);
		TDW_BOT_Log.logInfo(npc_obj.name + ": Coord Max/Min : " +
			this_npc.coord_max_min);
		TDW_BOT_Log.logInfo(npc_obj.name + ": Dist Min      : " +
			this_npc.dist_min + " (" + this_npc.__CURRENT__.dist_min + ")");
		TDW_BOT_Log.logInfo(npc_obj.name + ": Dist Max      : " +
			this_npc.dist_max + " (" + this_npc.__CURRENT__.dist_max + ")");
		TDW_BOT_Log.logInfo(npc_obj.name + ": Func Pre     : " +
			D2JSP_UTIL_FORMAT_FunctionToName(this_npc.pre_func));
		TDW_BOT_Log.logInfo(npc_obj.name + ": Func Attack   : " +
			D2JSP_UTIL_FORMAT_FunctionToName(this_npc.attack_func));
		TDW_BOT_Log.logInfo(npc_obj.name + ": Func Post     : " +
			D2JSP_UTIL_FORMAT_FunctionToName(this_npc.post_func));
		TDW_BOT_Log.logInfo(npc_obj.name + ": Func Final    : " +
			D2JSP_UTIL_FORMAT_FunctionToName(this_npc.final_func));
		TDW_BOT_Log.logInfo(npc_obj.name + ": Threat Spec   : [" +
			this_npc.threat_attack_spec + "]");
		TDW_BOT_Log.logInfo(D2JSP_UTIL_FORMAT_LJust("", sep_length, "-"));
	}

	for (var count_1 = 0; count_1 < TDW_BOT_ATTACK_SpecStats.length; count_1++)
		TDW_BOT_Log.logInfo(npc_obj.name + ": Stat          : " +
			D2JSP_UTIL_FORMAT_RJust(TDW_BOT_ATTACK_SpecStats[count_1], 3) +
			" : " + D2JSP_UTIL_FORMAT_LJust(D2JSP_STAT_StatToName(
			TDW_BOT_ATTACK_SpecStats[count_1]), 36) + " = " +
			D2JSP_UTIL_FORMAT_RJust(npc_obj.
				getStat(TDW_BOT_ATTACK_SpecStats[count_1]), 14));

/*
	for (var count_1 = 0; count_1 < D2JSP_ENCHANT_ValidList.length; count_1++) {
		if (npc_obj.getEnchant(D2JSP_ENCHANT_ValidList[count_1]))
			TDW_BOT_Log.logInfo(npc_obj.name + ": Enchant       : " +
				D2JSP_UTIL_FORMAT_RJust(D2JSP_ENCHANT_ValidList[count_1], 3) +
				" : " + D2JSP_UTIL_FORMAT_LJust(D2JSP_ENCHANT_EnchantToName(
				D2JSP_ENCHANT_ValidList[count_1]), 36) + " = " +
				D2JSP_UTIL_FORMAT_RJust(npc_obj.
				getEnchant(D2JSP_ENCHANT_ValidList[count_1]), 14));
	}
*/
	for (var count_1 = 0; count_1 < 63; count_1++) {
		if (npc_obj.getEnchant(count_1))
			TDW_BOT_Log.logInfo(npc_obj.name + ": Enchant       : " +
				D2JSP_UTIL_FORMAT_RJust(count_1, 3) +
				" : " + D2JSP_UTIL_FORMAT_LJust(D2JSP_ENCHANT_EnchantToName(
				count_1), 36) + " = " +
				D2JSP_UTIL_FORMAT_RJust(npc_obj.
				getEnchant(count_1), 14));
	}

	for (var count_1 = D2JSP_STATE_FREEZE; count_1 <= D2JSP_STATE_MAXIMUM;
		count_1++) {
		if (npc_obj.getState(count_1))
			TDW_BOT_Log.logInfo(npc_obj.name + ": State         : " +
				D2JSP_UTIL_FORMAT_RJust(count_1, 3) +
				" : " + D2JSP_UTIL_FORMAT_LJust(D2JSP_STATE_StateToName(
				count_1), 36) + " = " +
				D2JSP_UTIL_FORMAT_RJust(npc_obj.getState(count_1), 14));
	}

	TDW_BOT_Log.logInfo(D2JSP_UTIL_FORMAT_LJust("", sep_length, "-"));

	TDW_BOT_Log.logInfo("Attack Ranking for NPC " + npc_obj.name + ":");
	TDW_BOT_Log.logInfo("");

	var attack_report = TDW_BOT_AttackSelector.
		analyzeAttack(D2JSP_STAT_RESIST_GetResistsForUnit(npc_obj), 1);

	attack_report.shift();
	attack_report.shift();
	attack_report.shift();
	attack_report.pop();
	attack_report.pop();

	TDW_BOT_Log.logInfo(attack_report);

	TDW_BOT_Log.logInfo(D2JSP_UTIL_FORMAT_LJust("", sep_length, "="));

	if (old_log_screen_flag)
		TDW_BOT_Log.screenOn();
}
// ////////////////////////////////////////////////////////////////////////////

var TDW_BOT_ATTACK_AttackNearbyMonstersForModeList_StaticDoneCount = 0;

// ////////////////////////////////////////////////////////////////////////////
function TDW_BOT_ATTACK_AttackNearbyMonsters(arrival_flag, destination,
	move_control)
{
	var iterations        = 0;
	var original_location = new Array(2);
	var do_teleport       = false;
	var far_distance_tmp  = 10;
	var min_distance;

	destination  = D2JSP_UTIL_GEN_TypeOfCoord(destination) ? destination :
		[me.x, me.y];

	if (!(move_control instanceof TDW_BOT_ATTACK_MoveControl)) {
		move_control                   = new TDW_BOT_ATTACK_MoveControl();
		move_control.threat_avoid_spec = new TDW_THREAT_MoveSpec(0, 8);
	}

	original_location[0] = me.x;
	original_location[1] = me.y;

	var far_distance_tmp    = Math.min(10, move_control.max_distance);
	var start_time          = getTickCount();
	var end_time            = start_time + move_control.max_attack_ms;
	var town_time           = TDW_BOT_MOVE_RecoverInTown_TotalTime;
	var loop_count          = 0;
	var action_count        = 0;
	var obj_count           = 0;
	var static_field_radius = D2JSP_SKILL_GetRadiusStaticField();

	 while ((getTickCount() < end_time) &&
		((!(move_control.attack_end_cond_func)) ||
		move_control.attack_end_cond_func(move_control))) {
		loop_count++;
		var npc_cluster = new TDW_BOT_ATTACK_Cluster(null,
			move_control.max_distance, D2JSP_MODE_NPC_FLAGS_ALL_BUT_DEAD,
			TDW_BOT_COLL_BLOCK_ATTACK);
		if (npc_cluster.count || (loop_count > 1))
			D2JSP_UTIL_BNET_OverheadSafe("Cluster " + npc_cluster.count + " / " +
				npc_cluster.hp_percent[TDW_BOT_ATTACK_CLUSTER_MEAN].toFixed(2) + "%");
		if (!npc_cluster.count) {
			break;
		}
		if (npc_cluster.dist_circles[0])
			far_distance_tmp = 5;
		else if (npc_cluster.dist_circles[1] > 3)
			far_distance_tmp = 10;
		else if (npc_cluster.dist_circles[2] > 6)
			far_distance_tmp = 15;
		else
			far_distance_tmp = move_control.max_distance;
/*
		if (npc_cluster.dist[TDW_BOT_ATTACK_CLUSTER_MEAN] <= 15)
			far_distance_tmp = 15;
*/
		if (TDW_BOT_ContextList["operation.log.cluster"])
			npc_cluster.toLog(TDW_BOT_Log);
		if ((npc_cluster.resist[D2JSP_UTIL_DAMAGE_COLD]
			[TDW_BOT_ATTACK_CLUSTER_MEAN] < 100) &&
			(npc_cluster.chilled[TDW_BOT_ATTACK_CLUSTER_MEAN] <= 50)) {
			if (TDW_BOT_AttackSelector.performAttackElement(D2JSP_UTIL_DAMAGE_COLD,
				npc_cluster))
				TDW_BOT_CHECK_HealthChecks();
		}
		var threat_cluster_spec	=
			(move_control.threat_cluster_spec instanceof TDW_THREAT_MoveSpec) ?
			move_control.threat_cluster_spec : npc_cluster.getClusterAttackSpec();
		var static_field_count = 0;
		if (npc_cluster.count &&
			(npc_cluster.resist[D2JSP_UTIL_DAMAGE_LIGHT]
			[TDW_BOT_ATTACK_CLUSTER_MEAN] <= 90) &&
			(npc_cluster.hp_percent[TDW_BOT_ATTACK_CLUSTER_MEAN] >= 50) &&
			(npc_cluster.dist[TDW_BOT_ATTACK_CLUSTER_MIN] <= static_field_radius)) {
			if (npc_cluster.hp_percent[TDW_BOT_ATTACK_CLUSTER_MEAN] >= 80)
				static_field_count  = 3;
			else if (npc_cluster.hp_percent[TDW_BOT_ATTACK_CLUSTER_MEAN] >= 60)
				static_field_count  = 2;
			else
				static_field_count  = 1;
		}
		// If we've spent time recovering in town, we adjust the end time...
		end_time  += TDW_BOT_MOVE_RecoverInTown_TotalTime - town_time;
		town_time  = TDW_BOT_MOVE_RecoverInTown_TotalTime;
		for (count_1 = 0; (count_1 < 3) && (getTickCount() < end_time);
			count_1++) {
			obj_count     = TDW_BOT_ATTACK_AttackNearbyMonstersForModeList(
				move_control, threat_cluster_spec, D2JSP_MODE_NPC_FLAGS_ALL_BUT_DEAD,
				npc_cluster.center_coord, far_distance_tmp, 30,
				Math.min(end_time, getTickCount() + 1000),
				static_field_count);
			action_count += obj_count;
			if (!obj_count)
				break;
			if (static_field_count)
				static_field_count -=
					TDW_BOT_ATTACK_AttackNearbyMonstersForModeList_StaticDoneCount;
			// If we've spent time recovering in town, we adjust the end time...
			end_time  += TDW_BOT_MOVE_RecoverInTown_TotalTime - town_time;
			town_time  = TDW_BOT_MOVE_RecoverInTown_TotalTime;

		}
		// If we've spent time recovering in town, we adjust the end time...
		end_time  += TDW_BOT_MOVE_RecoverInTown_TotalTime - town_time;
		town_time  = TDW_BOT_MOVE_RecoverInTown_TotalTime;
		if ((getTickCount() >= end_time) ||
			((!obj_count) && (far_distance_tmp >= move_control.max_distance)))
			break;
	}

	if (do_teleport) {
		if (D2JSP_SYLIB_DistPair(original_location, destination) <=
			D2JSP_SYLIB_DistPair([me.x, me.y], destination)) {
			if (TDW_BOT_Log.getLevelFile() <= D2JSP_UTIL_LOG_Level_MINUTIAE)
				TDW_BOT_Log.logMinutiae("Teleporting back to original location at "+
					"[" + original_location[1] + ", " + original_location[2] +
					"] because that location is nearer to the destination then the "+
					"current location of [" + me.x + ", " + me.y + "].");
			D2JSP_SKILL_TeleportToPair(original_location);
		}
		else if (TDW_BOT_Log.getLevelFile() <= D2JSP_UTIL_LOG_Level_MINUTIAE)
			TDW_BOT_Log.logMinutiae("Not teleporting back to original location at "+
				"[" + original_location[1] + ", " + original_location[2] +
				"] because that location is further from the destination then the "+
				"current location of [" + me.x + ", " + me.y + "].");
	}

	return(action_count);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TDW_BOT_ATTACK_AttackNearbyMonstersCluster(in_npc_cluster,
	move_control)
{
	var npc_cluster  = (in_npc_cluster instanceof TDW_BOT_ATTACK_Cluster) ?
		 in_npc_cluster : (new TDW_BOT_ATTACK_Cluster());

	if (!(move_control instanceof TDW_BOT_ATTACK_MoveControl)) {
		move_control                     = new TDW_BOT_ATTACK_MoveControl();
		move_control.threat_avoid_spec   = new TDW_THREAT_MoveSpec(0, 8);
	}

	var threat_cluster_spec =
		(move_control.threat_cluster_spec instanceof TDW_THREAT_MoveSpec) ?
		move_control.threat_cluster_spec : npc_cluster.getClusterAttackSpec();

	var action_count        = 0;
	var obj_count           = 0;
	var start_time          = getTickCount();
	var end_time            = start_time + move_control.max_attack_ms;
	var town_time           = TDW_BOT_MOVE_RecoverInTown_TotalTime;
	var static_field_radius = D2JSP_SKILL_GetRadiusStaticField();

	while ((getTickCount() < end_time) &&
		((!(move_control.attack_end_cond_func)) ||
		move_control.attack_end_cond_func(move_control))) {
		D2JSP_UTIL_BNET_OverheadSafe("Cluster " + npc_cluster.count + " / " +
			npc_cluster.hp_percent[TDW_BOT_ATTACK_CLUSTER_MEAN].toFixed(2) + "%");
		if (!npc_cluster.count)
			break;
		if (TDW_BOT_ContextList["operation.log.cluster"])
			npc_cluster.toLog(TDW_BOT_Log);
		if ((npc_cluster.resist[D2JSP_UTIL_DAMAGE_COLD]
			[TDW_BOT_ATTACK_CLUSTER_MEAN] < 100) &&
			(npc_cluster.chilled[TDW_BOT_ATTACK_CLUSTER_MEAN] <= 50)) {
			if (TDW_BOT_AttackSelector.performAttackElement(D2JSP_UTIL_DAMAGE_COLD,
				npc_cluster))
				TDW_BOT_CHECK_HealthChecks();
		}
		var static_field_count = 0;
		if (npc_cluster.count &&
			(npc_cluster.resist[D2JSP_UTIL_DAMAGE_LIGHT]
			[TDW_BOT_ATTACK_CLUSTER_MEAN] <= 90) &&
			(npc_cluster.hp_percent[TDW_BOT_ATTACK_CLUSTER_MEAN] >= 50) &&
			(npc_cluster.dist[TDW_BOT_ATTACK_CLUSTER_MIN] <= static_field_radius)) {
			if (npc_cluster.hp_percent[TDW_BOT_ATTACK_CLUSTER_MEAN] >= 80)
				static_field_count  = 3;
			else if (npc_cluster.hp_percent[TDW_BOT_ATTACK_CLUSTER_MEAN] >= 60)
				static_field_count  = 2;
			else
				static_field_count  = 1;
		}
		obj_count     = TDW_BOT_ATTACK_AttackNearbyMonstersForModeList(
			move_control, threat_cluster_spec, npc_cluster.mode_mask,
			npc_cluster.center_coord, npc_cluster.radius, 30,
			Math.min(end_time, getTickCount() + 1000), static_field_count);
		if (!obj_count)
			break;
		action_count += obj_count;
		if (static_field_count)
			static_field_count -=
				TDW_BOT_ATTACK_AttackNearbyMonstersForModeList_StaticDoneCount;
		// If we've spent time recovering in town, we adjust the end time...
		end_time  += TDW_BOT_MOVE_RecoverInTown_TotalTime - town_time;
		town_time  = TDW_BOT_MOVE_RecoverInTown_TotalTime;
	}

	return(action_count);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TDW_BOT_ATTACK_AttackNearbyMonstersForModeList(move_control,
	threat_cluster_spec, mode_list, center_coord, far_distance, max_attacks,
	end_time, static_field_count)
{
	var action_count = 0;
	var npc_modes    = (parseFloat(me.version) < 0.3421) ? null :
		(D2JSP_MODE_FLAG_INDICATOR | mode_list);
	var this_obj;
	var last_checks  = 0;
	var town_time    = TDW_BOT_MOVE_RecoverInTown_TotalTime;

	center_coord    = (D2JSP_UTIL_GEN_TypeOfCoord(center_coord)) ?
		center_coord : [me.x, me.y];
	far_distance    = (D2JSP_UTIL_GEN_TypeOfNumber(far_distance) &&
		(far_distance > 0)) ? far_distance : 25;
	max_attacks     = (D2JSP_UTIL_GEN_TypeOfNumber(max_attacks) &&
		(max_attacks > 0)) ? max_attacks : 3;
	end_time        = (D2JSP_UTIL_GEN_TypeOfNumber(end_time) &&
		(end_time > 0)) ? end_time : (getTickCount() + 1000);

	TDW_BOT_ATTACK_AttackNearbyMonstersForModeList_StaticDoneCount = 0;
	
//var loop_count = 0;
	while ((action_count < max_attacks) && (getTickCount() < end_time) &&
		((!(move_control.attack_end_cond_func)) ||
		move_control.attack_end_cond_func(move_control))) {
		TDW_BOT_AttackNPCSpec.killAny();
		if (npc_modes == null)
			this_obj = getUnit(D2JSP_UTIL_GETUNIT_NPC);
		else
			this_obj = getUnit(D2JSP_UTIL_GETUNIT_NPC, null, npc_modes);
		if (this_obj) {
			var this_count = 0;
			do {
				if (++TDW_BOT_GetUnitNPCCount > 100) {
					runGC();
					TDW_BOT_GetUnitNPCCount = 0;
				}
				var my_dist     = myDist(this_obj.x, this_obj.y);
				var center_dist = Dist(center_coord[0], center_coord[1], this_obj.x,
					this_obj.y)
				//	If the enemy is very near, check to see whether we should
				//	avoid it by moving...
				if ((my_dist <= move_control.cluster_avoid_distance) &&
					D2JSP_NPC_ShouldAvoidEnemyHere(this_obj) &&
					(!D2JSP_NPC_IsEnemyStationary(this_obj))) {
/*
TDW_BOT_Log.logWarningColor("***** ENEMY " + this_obj.name +
	" TOO NEAR (" + my_dist + ")");
*/
//					var tmp_avoid_spec = new TDW_THREAT_MoveSpec(0, 20);
					var best_cell      = null;
					var step_size_list = [5, 2, 1];
					var this_spec      = threat_cluster_spec;
					for (var count_1 = 0; count_1 < 1; count_1++) {
						for (count_2 = 0; count_2 < step_size_list.length; count_2++) {
							best_cell = TDW_THREAT_FindSafestSpot(null, this_spec,
								TDW_THREAT_AVOID_FLAG_NONE, step_size_list[count_2]);
							if (best_cell)
								break;
						}
						if (best_cell)
							break;
						else if ((!count_1) &&
							((this_spec.coord_max - this_spec.coord_min) < 20)) {
							this_spec = D2JSP_UTIL_GEN_CloneObject(threat_cluster_spec);
							this_spec.coord_max +=
								20 - (threat_cluster_spec.coord_max -
								threat_cluster_spec.coord_min);
						}
					}
					if (best_cell && best_cell.distance_me) {
TDW_BOT_Log.logInfoQuiet("***** MOVING BECAUSE OF AVOID SPEC = [" +
	this_spec + "] in function " +
	"TDW_BOT_ATTACK_AttackNearbyMonstersForModeList()");
TDW_BOT_Log.logInfoQuiet("***** THREAT CLUSTER SPEC          = [" +
	threat_cluster_spec + "] in function " +
	"TDW_BOT_ATTACK_AttackNearbyMonstersForModeList()");
TDW_BOT_Log.logInfoQuiet("***** NEW LOCATION PLANNED         = [" +
	best_cell + "]");
/*
						TDW_BOT_MOVE_TeleportToPartial([best_cell.x, best_cell.y],
							TDW_BOT_SUPP_TP2DEST_FLAG_NONE);
*/
/*
						TDW_BOT_MOVE_TeleportToDestination([best_cell.x, best_cell.y],
							TDW_BOT_SUPP_TP2DEST_FLAG_NONE);
*/
/*
						TDW_BOT_MOVE_GotoXYPairAStar([best_cell.x, best_cell.y],
							TDW_PATH_MAP_BUILD_FLAG_NONE,
							TDW_BOT_SUPP_TP2DEST_FLAG_NO_AVOID_NPCS);
*/
/*
						TDW_BOT_MOVE_ScavTeleport_1_AStar(best_cell.x, best_cell.y,
							5, 5);
*/
						D2JSP_SKILL_TeleportTo(best_cell.x, best_cell.y);
TDW_BOT_Log.logInfoQuiet("***** NEW LOCATION ACTUAL          = [" +
	me.x + "," + me.y + "]");
						return(action_count + 1);
					}
					else
						TDW_BOT_Log.logInfoQuiet(
							"***** NOT MOVING BECAUSE OF AVOID SPEC = [" + this_spec +
							"] in function " +
							"TDW_BOT_ATTACK_AttackNearbyMonstersForModeList() " +
							"(best cell = [" + best_cell + "])");
				}
				if (D2JSP_NPC_ShouldAttackEnemy(this_obj) &&
					(!checkCollision(me, this_obj, TDW_BOT_COLL_BLOCK_ATTACK)) &&
					(center_dist <= far_distance)) {
if ((parseFloat(me.version) >= 0.3525) && true &&
	(this_obj.spectype &
	(D2JSP_NPC_SPEC_TYPE_SUPER_UNIQUE | D2JSP_NPC_SPEC_TYPE_BOSS)) &&

	(!(this_obj.spectype & D2JSP_NPC_SPEC_TYPE_CHAMPION)) &&
	(!(this_obj.spectype & D2JSP_NPC_SPEC_TYPE_MINION)) &&

	(!TDW_BOT_AttackNPCSpec.is_busy) && TDW_BOT_AttackNPCSpec.do_attack &&
	TDW_BOT_AttackSelector.checkForAttack(this_obj, 1)) {
	var npc_le      = this_obj.getEnchant(D2JSP_ENCHANT_LIGHTNING_ENCHANTED);
	var npc_ms      = this_obj.getEnchant(D2JSP_ENCHANT_MULTIPLE_SHOTS);
	var npc_convict = this_obj.getState(D2JSP_STATE_CONVICTION);
	var npc_fanat   = this_obj.getState(D2JSP_STATE_FANATICISM);
	if ((me.diff != 2) || ((!(npc_le && npc_ms)) && (!(npc_le && npc_convict)) &&
		(!npc_fanat))) {
		if (TDW_BOT_AttackNPCSpec.findNPC(this_obj.name))
			TDW_BOT_AttackNPCSpec.killAny();
		else {
			TDW_BOT_AttackNPCSpec.addNPC(new TDW_BOT_ATTACK_SpecialNPC(this_obj.name,
				TDW_BOT_ATTACK_NPC_FLAG_IS_RANDOM, 0, 0, 0));
			TDW_BOT_AttackNPCSpec.killAny();
			TDW_BOT_AttackNPCSpec.deleteNPC(this_obj.name);
		}
		// If we've spent time recovering in town, we adjust the end time...
		end_time  += TDW_BOT_MOVE_RecoverInTown_TotalTime - town_time;
		town_time  = TDW_BOT_MOVE_RecoverInTown_TotalTime;
		this_count++;
		action_count++;
		break;
	}
}
					if (TDW_BOT_Log.getLevelFile() <= D2JSP_UTIL_LOG_Level_MINUTIAE)
						TDW_BOT_Log.logMinutiae("*** ATTACK: Monster '" +
							this_obj.name + "' (classid = " + this_obj.classid +
							", level = " + this_obj.getStat(D2JSP_STAT_LEVEL) +
							", NPC coord = [" + this_obj.x + ", " + this_obj.y +
							"], center coord = [" + center_coord +
							"], my coord = [" + me.x + ", " + me.y +
							"], distance to center = " + center_dist +
							", distance to me = " + my_dist + ", mode = " +
							this_obj.mode + " (" +
							D2JSP_MODE_ModeToName(D2JSP_MODE_TYPE_NPC, this_obj.mode) +
							")");
if (this_obj.name.toLowerCase() in D2JSP_NPC_NotAttackableHashMode14)
	print("***** Attacking " + this_obj.name + ", mode = " + this_obj.mode);
//					if (static_field_count-- > 0)
//						D2JSP_SKILL_SetAndUseSkill("Static Field", 0);
					if ((static_field_count > 0) &&
						D2JSP_SKILL_StaticField(false, 750)) {
						static_field_count--;
						this_count++;
						action_count++;
						TDW_BOT_ATTACK_AttackNearbyMonstersForModeList_StaticDoneCount++;
					}
					else if (TDW_BOT_AttackSelector.performAttack(this_obj, 1)) {
						this_count++;
						action_count++;
					}
else
	TDW_BOT_Log.logInfo("***** NO ATTACK SELECTED: " + this_obj.name +
		", distance = " + my_dist);
				}
				if ((last_checks + 500) <= getTickCount()) {
					if (TDW_BOT_CHECK_HealthChecks())
						break;
					last_checks = getTickCount();
				}
				// If we've spent time recovering in town, we adjust the end time...
				end_time  += TDW_BOT_MOVE_RecoverInTown_TotalTime - town_time;
				town_time  = TDW_BOT_MOVE_RecoverInTown_TotalTime;
				if ((action_count >= max_attacks) ||
					(getTickCount() >= end_time))
					break;
			} while (this_obj && this_obj.getNext(null, npc_modes));
			if (!this_count)
				break;
		}
		else
			break;
		if (!action_count)
			break;
		// If we've spent time recovering in town, we adjust the end time...
		end_time  += TDW_BOT_MOVE_RecoverInTown_TotalTime - town_time;
		town_time  = TDW_BOT_MOVE_RecoverInTown_TotalTime;
	}

	TDW_BOT_CHECK_DoChecks();

/*
	TDW_BOT_Log.logDebug("TDW_BOT_ATTACK_AttackNearbyMonstersForModeList(" +
		mode_list + ", " + far_distance + ", " + max_attacks + ", " +
		end_time + ", " + static_field_count + ") EXIT = " + action_count);
*/

	 return(action_count);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TDW_BOT_ATTACK_DoAttackList_1(target_x, target_y, npc_obj)
{
	var this_attack =
		rnd(0, TDW_BOT_ContextList["skill.attack.ranged"].length - 1);

	// Work-around for 27 bug.
	this_attack = (this_attack != null) ? this_attack : 0;

/*
	Pre .33.02 logic.
	D2JSP_SKILL_SetAndUseSkill(TDW_BOT_ContextList["skill.attack.ranged"]
		[this_attack], 1, target_x, target_y);
*/

	var attack_hand = (TDW_BOT_ContextList["skill.attack.ranged"]
		[this_attack] == "Charged Bolt") ? 0 : 1;

	D2JSP_SKILL_SetAndUseSkill(TDW_BOT_ContextList["skill.attack.ranged"]
		[this_attack], attack_hand, npc_obj);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TDW_BOT_ATTACK_DoAttackList_2(target_x, target_y, npc_obj)
{
	if (TDW_BOT_ContextList["skill.attack.local"].length) {
		var this_attack =
			rnd(0, TDW_BOT_ContextList["skill.attack.local"].length - 1);
		// Work-around for 27 bug.
		this_attack = (this_attack != null) ? this_attack : 0;
		D2JSP_SKILL_SetAndUseSkill(TDW_BOT_ContextList["skill.attack.local"]
			[this_attack], 0);
	}
	else
		TDW_BOT_ATTACK_DoAttackList_1(target_x, target_y, npc_obj);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TDW_BOT_ATTACK_DoAttack_ChargedBolt(target_x, target_y, npc_obj)
{
	if (me.getSkill("Charged Bolt"))
		D2JSP_SKILL_SetAndUseSkill("Charged Bolt", 0, npc_obj);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TDW_BOT_ATTACK_DoAttack_FrozenOrb(target_x, target_y, npc_obj)
{
	if (me.getSkill("Frozen Orb"))
		D2JSP_SKILL_SetAndUseSkill("Frozen Orb", 1, npc_obj);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TDW_BOT_PATH_ROOM_GetSummonerRoom()
{
/*
	if (me.area == D2JSP_AREA_ARCANE_SANCTUARY) {
		var this_room = getRoom();
		if (this_room) {
			do {
				if ((this_room.number >= 525) && (this_room.number <= 528))
					return(this_room.number);
			} while (this_room && this_room.getNext());
		}
	}

	return(0);
*/
	TDW_PATH_CreateArea(D2JSP_AREA_ARCANE_SANCTUARY);
	if (TDW_PATH_IsAreaCreated(D2JSP_AREA_ARCANE_SANCTUARY)) {
		var the_room = TDW_PATH_MapGlobal.area_list[D2JSP_AREA_ARCANE_SANCTUARY].
			findRoomByNumberSpec([525, 526, 527, 528]);
		if (the_room.length)
			return(the_room[0].number);
	}

	return(0);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TDW_BOT_PATH_ROOM_GetNonSummonerBonusRoomList()
{
	TDW_PATH_CreateArea(D2JSP_AREA_ARCANE_SANCTUARY);
	if (TDW_PATH_IsAreaCreated(D2JSP_AREA_ARCANE_SANCTUARY)) {
		var room_list = TDW_PATH_MapGlobal.area_list[D2JSP_AREA_ARCANE_SANCTUARY].
			findRoomByNumberSpec([510, 511, 513, 517]);
		if (room_list.length == 3)
			return([room_list[0].number, room_list[3].number, room_list[2].number]);
	}

	return(0);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TDW_BOT_PATH_ROOM_GetSummonerPath()
{
	var summoner_path = null;
	var summoner_room;

	if (summoner_room = TDW_BOT_PATH_ROOM_GetSummonerRoom()) {
		summoner_path = D2JSP_UTIL_GEN_CloneObject(
			TDW_BOT_PATH_ArcaneMoveList_All[summoner_room - 525]);
		summoner_path[1] = summoner_path[1].slice(0, 8);
		summoner_path[1].splice(3, 2);
	}

	return(summoner_path);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TDW_BOT_PATH_GetTrueTalRashaTombArea()
{
/*
	var tal_tomb_area = 0;
	var tmp_room;

	if (me.act != 2)
		D2JSP_UTIL_LOG_GetALog().logError("Unable to determine the true Tomb " +
			"Tal Rasha --- you are not in Act 2.");
	else if (!(tmp_room = getRoom()))
		D2JSP_UTIL_LOG_GetALog().logError("Unable to determine the true Tomb " +
			"Tal Rasha --- getRoom() returned 'null'.");
	else if (!tmp_room.correcttomb)
		D2JSP_UTIL_LOG_GetALog().logError("Unable to determine the true Tomb " +
			"Tal Rasha --- getRoom().correcttomb is '0'.");
	else if (!((tmp_room.correcttomb + "") in TDW_BOT_PATH_TalRashaTombXY))
		D2JSP_UTIL_LOG_GetALog().logError("Unable to determine the true Tomb " +
			"Tal Rasha --- the area specified by getRoom().correcttomb is " +
			tmp_room.correcttomb + " (" +
			D2JSP_AREA_AreaToName(tmp_room.correcttomb) + "), but that area is " +
			"not one of the specified seven valid Tal Rasha Tomb areas.");
	else
		tal_tomb_area = tmp_room.correcttomb;

	return(tal_tomb_area);
*/
	var tal_tomb_area = 0;

	if (me.act != 2)
		D2JSP_UTIL_LOG_GetALog().logError("Unable to determine the true Tomb " +
			"Tal Rasha --- you are not in Act 2.");
	else {
		TDW_PATH_FixUpAct();
		if (TDW_PATH_AreaLink[D2JSP_AREA_DURIELS_LAIR] instanceof
			TDW_PATH_LinkArea)
		tal_tomb_area =
			TDW_PATH_AreaLink[D2JSP_AREA_DURIELS_LAIR].getLinkedArea(0);
	}

	return(tal_tomb_area);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TDW_BOT_PATH_GetTrueTalRashaTombXY()
{
	var tal_tomb_area;

	return(((tal_tomb_area = TDW_BOT_PATH_GetTrueTalRashaTombArea()) != 0) ?
		TDW_BOT_PATH_TalRashaTombXY[tal_tomb_area][0] : null);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TDW_BOT_STATE_IsPoisonedMe()
{
	return(TDW_BOT_STATE_IsBadState(me, D2JSP_STATE_POISON));
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TDW_BOT_STATE_IsPoisonedMerc()
{
	return(TDW_BOT_STATE_IsBadStateMerc(D2JSP_STATE_POISON));
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TDW_BOT_STATE_IsPoisonedUs()
{
	return(TDW_BOT_STATE_IsBadStateUs(D2JSP_STATE_POISON));
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TDW_BOT_STATE_IsPoisoned(the_obj)
{
	return(TDW_BOT_STATE_IsBadState(the_obj, D2JSP_STATE_POISON));
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TDW_BOT_STATE_IsBadStateMe(the_state)
{
	return(TDW_BOT_STATE_IsBadState(me, the_state));
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TDW_BOT_STATE_IsBadStateMerc(the_state)
{
	return(TDW_BOT_STATE_IsBadState(D2JSP_NPC_GetMercObj(), the_state));
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TDW_BOT_STATE_IsBadStateUs(the_state)
{
	var return_code;

	if ((return_code = TDW_BOT_STATE_IsBadStateMe(the_state)) ==
		D2JSP_STATE_NONE)
		return_code = TDW_BOT_STATE_IsBadStateMerc(the_state);

	return(return_code);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TDW_BOT_STATE_IsBadState(the_obj, the_state)
{
	if (arguments.length && 
		((the_obj == null) || (typeof(the_obj) == "undefined") ||
		(!D2JSP_UTIL_GEN_TypeOfObject(the_obj))))
		return(D2JSP_STATE_NONE);
	else if (!arguments.length)
		return(TDW_BOT_STATE_IsBadStateMe(TDW_BOT_STATE_BadStatesDefault));
	else if ((arguments.length == 1) || (the_state == null) ||
		(typeof(the_state) == "undefined"))
		return(TDW_BOT_STATE_IsBadState(the_obj, TDW_BOT_STATE_BadStatesDefault));
	else if ((arguments.length == 2) && D2JSP_UTIL_GEN_TypeOfNumber(the_state))
		return((the_obj.getState(the_state)) ? the_state : D2JSP_STATE_NONE);
	else if ((arguments.length == 2) &&
		D2JSP_UTIL_GEN_TypeOfArrayIndexed(the_state)) {
		for (count_1 = 0; count_1 < the_state.length; count_1++) {
			if (TDW_BOT_STATE_IsBadState(the_obj, the_state[count_1]))
				return(the_state[count_1]);
		}
	}
	else {
		var return_code;
		for (count_1 = 0; count_1 < arguments.length; count_1++) {
			if ((return_code =
				TDW_BOT_STATE_IsBadState(the_obj, arguments[count_1 + 1])))
				return(return_code);
		}
	}

	return(D2JSP_STATE_NONE);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TDW_BOT_STATE_FixBadStatesMe(the_state)
{
	return(TDW_BOT_STATE_FixBadStates(me, the_state));
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TDW_BOT_STATE_FixBadStatesMerc(the_state)
{
	return(TDW_BOT_STATE_FixBadStates(D2JSP_NPC_GetMercObj(), the_state));
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TDW_BOT_STATE_FixBadStatesUs(the_state)
{
	var return_code = 0;
	var bad_state;

	if ((bad_state = TDW_BOT_STATE_IsBadStateMe(the_state)) != D2JSP_STATE_NONE)
		return_code = TDW_BOT_STATE_FixBadStates_Basic(me, bad_state);
	else if ((bad_state = TDW_BOT_STATE_IsBadStateMerc(the_state)) !=
		D2JSP_STATE_NONE)
		return_code = TDW_BOT_STATE_FixBadStates_Basic(
			D2JSP_NPC_GetMercObj(), bad_state);

	return(return_code);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TDW_BOT_STATE_FixBadStates(the_obj, the_state)
{
	var return_code = 0;
	var bad_state;

	if ((bad_state = TDW_BOT_STATE_IsBadState(the_obj, the_state)) !=
		D2JSP_STATE_NONE)
		return_code = TDW_BOT_STATE_FixBadStates_Basic(the_obj, bad_state);

	return(return_code);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TDW_BOT_STATE_FixBadStates_Basic(the_obj, the_state)
{
	var start_area = me.area;
	var obj_name   = the_obj.name;
	var log_obj    = D2JSP_UTIL_LOG_GetALog();

	if (!D2JSP_AREA_IsTown(start_area)) {
		log_obj.logInfo("Returning to " +
			D2JSP_AREA_AreaToName(D2JSP_AREA_AreaToTown()) + " to cure " +
			the_obj.name + "'s " + D2JSP_STATE_StateToName(the_state) + ".");
	}

	return(TDW_BOT_MOVE_RecoverInTown(true));
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TDW_BOT_CHECK_DoChecksReturnZero()
{
	TDW_BOT_CHECK_DoChecks();

	return(0);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TDW_BOT_CHECK_DoChecks()
{
	var move_flag = 0;

	move_flag  = TDW_BOT_CHECK_HealthChecks();
	move_flag |= TDW_BOT_CHECK_PrecastChecks();
//	move_flag |= TDW_BOT_CHECK_HealthChecks();

	return(move_flag);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TDW_BOT_CHECK_HealthChecks()
{
	var move_flag = 0;

	move_flag  = TDW_BOT_CHECK_ChickenChecks();
	move_flag |= TDW_BOT_CHECK_TownHealChecks();
	move_flag |= TDW_BOT_CHECK_ChickenChecks();

	return(move_flag);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TDW_BOT_CHECK_ChickenChecks()
{
/*
	var move_flag      = 0;
	var chicken_reason = "";
	var start_area     = me.area;
	var merc_flag      = false;
	var log_text;

	if (TDW_BOT_Log.getLevelFile() <= D2JSP_UTIL_LOG_Level_MINUTIAE)
		TDW_BOT_Log.logMinutiae("Performing chicken checks.");

	merc_flag = TDW_BOT_CHECK_ChickenChecksBasic();

	if (merc_flag) {
		TDW_BOT_Log.logInfo("Returning to town.");
		if (TDW_MOVE_PortalToTown(TDW_BOT_CHECK_ChickenChecksBasic, null))
			TDW_BOT_CHECK_PerformChicken("Unable to return to town.");
		D2JSP_NPC_Heal();
		if (merc_flag && (!D2JSP_NPC_GetMercIsLiving())) {
			D2JSP_NPC_ReviveMercenary();
			if (D2JSP_NPC_GetMercIsLiving())
				TDW_BOT_Log.logInfo("The mercenary " + D2JSP_NPC_GetMercName() +
					" has been resurrected.");
			  else if (TDW_BOT_ContextList["mercernary.needed"])
					TDW_BOT_SUPP_DoExitWithMsg("Unable to locate or revive a mercenary.");
		}
		if (D2JSP_COMM_CountTomesLessThan("tbk", 10))
			D2JSP_NPC_FillTomesAll();
		TDW_MOVE_COMPAT_TownMove("portalspot");
		TDW_BOT_CHECK_PrecastChecks(30000);
		runGC();
		TDW_MOVE_LookForAndTakePortal(start_area, me.name, 20, 50, false);
	}
*/
	if (TDW_BOT_Log.getLevelFile() <= D2JSP_UTIL_LOG_Level_MINUTIAE)
		TDW_BOT_Log.logMinutiae("Performing chicken checks.");

	var townheal_reason = TDW_BOT_CHECK_ChickenChecksBasic();

	if (townheal_reason != "") {
		TDW_BOT_Log.logWarningColor("Returning for town healing: " +
			townheal_reason);
		if (TDW_BOT_MOVE_RecoverInTown(true))
			TDW_BOT_CHECK_PerformChicken("Attempt to return to town for " +
				"emergency healing, recovery or mercenary ressurection failed.");
	}

	if (TDW_BOT_Log.getLevelFile() <= D2JSP_UTIL_LOG_Level_MINUTIAE) {
		var merc_obj = D2JSP_NPC_GetMercObj();
		var log_text = "My life is at " +
			((me.hp / TDW_BOT_ContextList["me.max.hp"]) * 100.0).toFixed(2) +
			"%, my mana is at " +
			((me.mp / TDW_BOT_ContextList["me.max.mp"]) * 100.0).toFixed(2) + "%";
		if (merc_obj)
			log_text += ", mercenary's life is at " +
				((D2JSP_NPC_GetCurrentHPNominal(merc_obj) /
				TDW_BOT_ContextList["mercenary.max.hp"]) * 100.0).toFixed(2) + "%";
		TDW_BOT_Log.logMinutiae("Chicken checks passed: " + log_text);
	}

	return((townheal_reason != "") ? 1 : 0);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TDW_BOT_CHECK_ChickenChecksBasic()
{
/*
	var chicken_reason = "";
	var merc_flag      = false;

	if (me.hp <= TDW_BOT_ContextList["chicken.me.hp.actual"])
		chicken_reason = "My life is " + me.hp + " of a maximum of " +
			TDW_BOT_ContextList["me.max.hp"] + " (" +
			((me.hp / TDW_BOT_ContextList["me.max.hp"]) * 100.0).toFixed(2) +
			"%) --- life chickening is specified at " +
			TDW_BOT_ContextList["chicken.me.hp"] + "%.";
	else if (me.mp <= TDW_BOT_ContextList["chicken.me.mp.actual"])
		chicken_reason = "My mana is " + me.mp + " of a maximum of " +
			TDW_BOT_ContextList["me.max.mp"] + " (" +
			((me.mp / TDW_BOT_ContextList["me.max.mp"]) * 100.0).toFixed(2) +
			"%) --- mana chickening is specified at " +
			TDW_BOT_ContextList["chicken.me.mp"] + "%.";
	else if (TDW_BOT_ContextList["mercernary.needed"] == true) {
		var merc_obj = D2JSP_NPC_GetMercObj();
		var merc_hp_nominal;
		if (!merc_obj)
			chicken_reason = "Mercenary cannot be located, but is required.";
		else if ((!merc_obj.hp) || (merc_obj.mode == D2JSP_MODE_NPC_DEATH) ||
			(merc_obj.mode == D2JSP_MODE_NPC_DEAD))
			chicken_reason = "Mercenary is dead, but is required.";
		else if (merc_obj.hp <=
			TDW_BOT_ContextList["chicken.mercenary.hp.actual"]) {
			merc_hp_nominal = D2JSP_NPC_GetCurrentHPNominal(merc_obj);
			chicken_reason = "Mercenary life is " + merc_hp_nominal +
				" of a maximum of " + TDW_BOT_ContextList["mercenary.max.hp"] + " ("+
				((merc_hp_nominal / TDW_BOT_ContextList["mercenary.max.hp"]) *
				100.0).toFixed(2) + "%) --- mercenary life chickening is " +
				"specified at " + TDW_BOT_ContextList["chicken.mercenary.hp"] + "%.";
		}
		if ((chicken_reason != "") &&
			TDW_BOT_ContextList["town.revive.mercenary"]) {
			merc_flag      = true;
			chicken_reason = "";
		}
	}
*/
	var chicken_reason = "";

	TDW_BOT_CHECK_ChickenChecksBasicMe();

	if (TDW_BOT_ContextList["mercernary.needed"] == true) {
		var merc_obj = D2JSP_NPC_GetMercObj();
		var merc_hp_nominal;
		if (!merc_obj)
			chicken_reason = "Mercenary cannot be located, but is required.";
		else if ((!merc_obj.hp) || (merc_obj.mode == D2JSP_MODE_NPC_DEATH) ||
			(merc_obj.mode == D2JSP_MODE_NPC_DEAD))
			chicken_reason = "Mercenary is dead, but is required.";
		else if (merc_obj.hp <=
			TDW_BOT_ContextList["chicken.mercenary.hp.actual"]) {
			merc_hp_nominal = D2JSP_NPC_GetCurrentHPNominal(merc_obj);
			chicken_reason  = "Mercenary life is " + merc_hp_nominal +
				" of a maximum of " + TDW_BOT_ContextList["mercenary.max.hp"] +
				" ("+ ((merc_hp_nominal / TDW_BOT_ContextList["mercenary.max.hp"]) *
				100.0).toFixed(2) + "%) --- mercenary life chickening is " +
				"specified at " + TDW_BOT_ContextList["chicken.mercenary.hp"] +
				"%.";
		}
		if ((chicken_reason != "") &&
			TDW_BOT_ContextList["town.revive.mercenary"])
			return(chicken_reason);
	}

	if (chicken_reason != "") {
		TDW_BOT_CHECK_PerformChicken(chicken_reason);
		quit();									// One likes to be sure...
	}

	return(chicken_reason);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TDW_BOT_CHECK_ChickenChecksBasicMe()
{
	var chicken_reason;

	if (me.hp <= TDW_BOT_ContextList["chicken.me.hp.actual"])
		chicken_reason = "My life is " + me.hp + " of a maximum of " +
			TDW_BOT_ContextList["me.max.hp"] + " (" +
			((me.hp / TDW_BOT_ContextList["me.max.hp"]) * 100.0).toFixed(2) +
			"%) --- life chickening is specified at " +
			TDW_BOT_ContextList["chicken.me.hp"] + "%.";
	else if (me.mp <= TDW_BOT_ContextList["chicken.me.mp.actual"])
		chicken_reason = "My mana is " + me.mp + " of a maximum of " +
			TDW_BOT_ContextList["me.max.mp"] + " (" +
			((me.mp / TDW_BOT_ContextList["me.max.mp"]) * 100.0).toFixed(2) +
			"%) --- mana chickening is specified at " +
			TDW_BOT_ContextList["chicken.me.mp"] + "%.";
	else
		chicken_reason = "";

	if (chicken_reason != "") {
		TDW_BOT_CHECK_PerformChicken(chicken_reason);
		quit();									// One likes to be sure...
	}

	return("");
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TDW_BOT_CHECK_TownHealChecks()
{
/*
	var move_flag       = 0;
	var townheal_reason = "";
	var start_area      = me.area;
	var heal_flag       = false;
	var merc_flag       = false;
	var log_text;

	if (TDW_BOT_Log.getLevelFile() <= D2JSP_UTIL_LOG_Level_MINUTIAE)
		TDW_BOT_Log.logMinutiae("Performing town heal checks.");

	if (me.hp <= TDW_BOT_ContextList["town.heal.me.hp.actual"])
		townheal_reason = "My life is " + me.hp + " of a maximum of " +
			TDW_BOT_ContextList["me.max.hp"] + " (" +
			((me.hp / TDW_BOT_ContextList["me.max.hp"]) * 100.0).toFixed(2) +
			"%) --- life town healing is specified at " +
			TDW_BOT_ContextList["town.heal.me.hp"] + "%.";
	else if (me.mp <= TDW_BOT_ContextList["town.heal.me.mp.actual"])
		townheal_reason = "My mana is " + me.mp + " of a maximum of " +
			TDW_BOT_ContextList["me.max.mp"] + " (" +
			((me.mp / TDW_BOT_ContextList["me.max.mp"]) * 100.0).toFixed(2) +
			"%) --- mana town healing is specified at " +
			TDW_BOT_ContextList["town.heal.me.mp"] + "%.";
	else if ((TDW_BOT_ContextList["mercernary.needed"] == true) ||
		(TDW_BOT_ContextList["mercernary.wanted"] == true)) {
		var merc_obj = D2JSP_NPC_GetMercObj();
		var merc_hp_nominal;
		if ((TDW_BOT_ContextList["mercernary.needed"] == true) && (!merc_obj))
			townheal_reason = "Mercenary cannot be located, but is required.";
		else if ((TDW_BOT_ContextList["mercernary.needed"] == true) &&
			((!merc_obj.hp) || (merc_obj.mode == D2JSP_MODE_NPC_DEATH) ||
			(merc_obj.mode == D2JSP_MODE_NPC_DEAD)))
			townheal_reason = "Mercenary is dead, but is required.";
		else if (merc_obj.hp <=
			TDW_BOT_ContextList["town.heal.mercenary.hp.actual"]) {
			merc_hp_nominal = D2JSP_NPC_GetCurrentHPNominal(merc_obj);
			townheal_reason = "Mercenary life is " + merc_hp_nominal +
				" of a maximum of " + TDW_BOT_ContextList["mercenary.max.hp"] + " ("+
				((merc_hp_nominal / TDW_BOT_ContextList["mercenary.max.hp"]) *
				100.0).toFixed(2) + "%) --- mercenary life town healing is " +
				"specified at " + TDW_BOT_ContextList["town.heal.mercenary.hp"] +
				"%.";
		}
		else if (merc_obj.getState(D2JSP_STATE_IRONMAIDEN))
			townheal_reason = "Melee mercenary is cursed with " +
				D2JSP_STATE_StateToName(D2JSP_STATE_IRONMAIDEN) + ".";
		if ((townheal_reason != "") &&
			TDW_BOT_ContextList["town.revive.mercenary"]) {
			merc_flag = true;
		}
	}

	if ((townheal_reason != "") || heal_flag || merc_flag) {
		var try_count = (!merc_flag) ? 10 : 20;
		var try_time  = (!merc_flag) ? 50 : 50;
		move_flag = 1;
		TDW_BOT_Log.logInfo(D2JSP_UTIL_COLOR_YELLOW +
			"Returning for town healing: " + townheal_reason);
		TDW_MOVE_PortalToTown(TDW_BOT_CHECK_ChickenChecksBasic, null);
		if (!D2JSP_AREA_IsTown())
			TDW_BOT_CHECK_PerformChicken("Unable to return to town " +
				" for required town move attempt: " + townheal_reason);
		D2JSP_NPC_Heal();
		if (merc_flag && (!D2JSP_NPC_GetMercIsLiving())) {
			D2JSP_NPC_ReviveMercenary();
			if (D2JSP_NPC_GetMercIsLiving())
				TDW_BOT_Log.logInfo("The mercenary " + D2JSP_NPC_GetMercName() +
					" has been resurrected.");
			  else if (TDW_BOT_ContextList["mercernary.needed"])
					TDW_BOT_SUPP_DoExitWithMsg("Unable to locate or revive a mercenary.");
		}
		if (D2JSP_COMM_CountTomesLessThan("tbk", 10))
			D2JSP_NPC_FillTomesAll();
		TDW_MOVE_COMPAT_TownMove("portalspot");
		TDW_BOT_CHECK_PrecastChecks(30000);
		runGC();
		TDW_MOVE_LookForAndTakePortal(start_area, me.name, 50, 50, false);
	}
*/
	var townheal_reason = "";

	if (TDW_BOT_Log.getLevelFile() <= D2JSP_UTIL_LOG_Level_MINUTIAE)
		TDW_BOT_Log.logMinutiae("Performing town heal checks.");

	if (me.hp <= TDW_BOT_ContextList["town.heal.me.hp.actual"])
		townheal_reason = "My life is " + me.hp + " of a maximum of " +
			TDW_BOT_ContextList["me.max.hp"] + " (" +
			((me.hp / TDW_BOT_ContextList["me.max.hp"]) * 100.0).toFixed(2) +
			"%) --- life town healing is specified at " +
			TDW_BOT_ContextList["town.heal.me.hp"] + "%.";
	else if (me.mp <= TDW_BOT_ContextList["town.heal.me.mp.actual"])
		townheal_reason = "My mana is " + me.mp + " of a maximum of " +
			TDW_BOT_ContextList["me.max.mp"] + " (" +
			((me.mp / TDW_BOT_ContextList["me.max.mp"]) * 100.0).toFixed(2) +
			"%) --- mana town healing is specified at " +
			TDW_BOT_ContextList["town.heal.me.mp"] + "%.";
	else if ((TDW_BOT_ContextList["mercernary.needed"] == true) ||
		(TDW_BOT_ContextList["mercernary.wanted"] == true)) {
		var merc_obj = D2JSP_NPC_GetMercObj();
		var merc_hp_nominal;
		if ((TDW_BOT_ContextList["mercernary.needed"] == true) && (!merc_obj))
			townheal_reason = "Mercenary cannot be located, but is required.";
		else if ((TDW_BOT_ContextList["mercernary.needed"] == true) &&
			((!merc_obj.hp) || (merc_obj.mode == D2JSP_MODE_NPC_DEATH) ||
			(merc_obj.mode == D2JSP_MODE_NPC_DEAD)))
			townheal_reason = "Mercenary is dead, but is required.";
		else if (merc_obj.hp <=
			TDW_BOT_ContextList["town.heal.mercenary.hp.actual"]) {
			merc_hp_nominal = D2JSP_NPC_GetCurrentHPNominal(merc_obj);
			townheal_reason = "Mercenary life is " + merc_hp_nominal +
				" of a maximum of " + TDW_BOT_ContextList["mercenary.max.hp"] + " ("+
				((merc_hp_nominal / TDW_BOT_ContextList["mercenary.max.hp"]) *
				100.0).toFixed(2) + "%) --- mercenary life town healing is " +
				"specified at " + TDW_BOT_ContextList["town.heal.mercenary.hp"] +
				"%.";
		}
		else if (merc_obj.getState(D2JSP_STATE_IRONMAIDEN))
			townheal_reason = "Melee mercenary is cursed with " +
				D2JSP_STATE_StateToName(D2JSP_STATE_IRONMAIDEN) + ".";
	}

	if (townheal_reason != "") {
		TDW_BOT_Log.logWarningColor("Returning for town healing: " +
			townheal_reason);
		if (TDW_BOT_MOVE_RecoverInTown(true))
			TDW_BOT_CHECK_PerformChicken("Attempt to return to town for " +
				"emergency healing, recovery or mercenary ressurection failed.");
	}

	if (TDW_BOT_Log.getLevelFile() <= D2JSP_UTIL_LOG_Level_MINUTIAE) {
		var merc_obj = D2JSP_NPC_GetMercObj();
		var log_text = "My life is at " +
			((me.hp / TDW_BOT_ContextList["me.max.hp"]) * 100.0).toFixed(2) +
			"%, my mana is at " +
			((me.mp / TDW_BOT_ContextList["me.max.mp"]) * 100.0).toFixed(2) + "%";
		if (merc_obj)
			log_text += ", mercenary's life is at " +
				((D2JSP_NPC_GetCurrentHPNominal(merc_obj) /
				TDW_BOT_ContextList["mercenary.max.hp"]) * 100.0).toFixed(2) + "%";
		TDW_BOT_Log.logMinutiae("Town heal checks passed: " + log_text);
	}

	return((townheal_reason != "") ? 1 : 0);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TDW_BOT_CHECK_DoPrecastList()
{
	var return_code = true;
	var max_count   = (D2JSP_AREA_IsTown()) ? 1 : 2;
	var count_1;
	var this_precast;

	if ((typeof(pre_cast_list) != "object") ||
		(typeof(pre_cast_list.length) != "number"))
		pre_cast_list = [pre_cast_list];

	if ((!("skill.precast.data" in TDW_BOT_ContextList)) ||
		(!D2JSP_UTIL_GEN_TypeOfArrayIndexed(
		TDW_BOT_ContextList["skill.precast.data"])))
		return(return_code);

	for (count_1 = 0; count_1 < max_count; count_1++) {
		for (count_2 = 0; count_2 <
			TDW_BOT_ContextList["skill.precast.data"][count_1].length; count_2++) {
			this_precast =
				TDW_BOT_ContextList["skill.precast.data"][count_1][count_2];
			if (TDW_BOT_CHECK_DoPrecastSingle(this_precast[0], this_precast[1],
				this_precast[2]))
				this_precast[4] = (new Date().valueOf()) + (this_precast[3] * 1000);
			else
				return_code = false;
		}
	}

	return(return_code);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TDW_BOT_CHECK_PrecastChecks(tolerance)
{
	var return_code = true;
	var max_count   = (D2JSP_AREA_IsTown()) ? 1 : 2;
	var this_date   = (new Date()).valueOf();
	var count_1;
	var count_2;
	var this_precast;

	tolerance  = (tolerance > 0) ? tolerance : 10000;
	this_date += tolerance;

	if ((!("skill.precast.data" in TDW_BOT_ContextList)) ||
		(!D2JSP_UTIL_GEN_TypeOfArrayIndexed(
		TDW_BOT_ContextList["skill.precast.data"])))
		return(return_code);

	for (count_1 = 0; count_1 < max_count; count_1++) {
		for (count_2 = 0; count_2 <
			TDW_BOT_ContextList["skill.precast.data"][count_1].length; count_2++) {
			this_precast =
				TDW_BOT_ContextList["skill.precast.data"][count_1][count_2];
			if (TDW_BOT_Log.getLevelFile() <= D2JSP_UTIL_LOG_Level_MINUTIAE)
				TDW_BOT_Log.logMinutiae("Performing pre-cast spell expiration " +
					"check: " + this_precast[0] + " (due to expire at " +
					((!this_precast[4]) ? "unknown date/time" :
					D2JSP_UTIL_DATE_ToSmallDate(new Date(this_precast[4]))) + ")");
			if ((!this_precast[4]) || (this_precast[4] <= this_date)) {
				if (TDW_BOT_CHECK_DoPrecastSingle(this_precast[0], this_precast[1],
					this_precast[2]))
					this_precast[4] =
						(new Date().valueOf()) + (this_precast[3] * 1000);
				else
					return_code = false;
			}
			else if ((this_precast[0].toLowerCase() == "energy shield") &&
				(me.getState(this_precast[2]) != undefined)) {
				TDW_BOT_CHECK_ChickenChecks();
				TDW_BOT_Log.logWarning(D2JSP_UTIL_COLOR_YELLOW + this_precast[0] +
					" is not active (may have fallen) --- refreshing...");
				TDW_BOT_CHECK_ChickenChecks();
				if (TDW_BOT_CHECK_DoPrecastSingle(this_precast[0], this_precast[1],
					this_precast[2]))
					this_precast[4] =
						(new Date().valueOf()) + (this_precast[3] * 1000);
				else
					return_code = false;
				TDW_BOT_CHECK_ChickenChecks();
			}
		}
	}

	TDW_BOT_CHECK_ChickenChecks();

	return(return_code);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TDW_BOT_CHECK_DoPrecastSingle(precast_name, state_name, state_number)
{
	var return_code = false;
	var count_1;
	
	for (count_1 = 0; count_1 < 3; count_1++) {
		TDW_BOT_Log.logDetail("About to refresh " + precast_name);
		D2JSP_SKILL_SetAndUseSkill(precast_name, 0);
		if (((precast_name.toLowerCase() == "energy shield") &&
			(me.getState(state_number) == undefined)) ||
			me.getState(state_number)) {
			TDW_BOT_Log.logInfo("Refreshed " + precast_name);
			return_code = true;
			break;
		}
		D2JSP_UTIL_GEN_FuzzyDelay(50);
	}

	if (!return_code)
		TDW_BOT_Log.logWarning("Unable to refresh " + precast_name);

	return(return_code);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TDW_BOT_CHECK_PerformChicken(chicken_reason)
{
	var log_obj = D2JSP_UTIL_LOG_GetALog();

	log_obj.logChicken(D2JSP_UTIL_COLOR_RED +
		"********** CHICKENING: " +
		(((chicken_reason != null) || (chicken_reason != "")) ? chicken_reason :
		"Chicken reason not specified."));

	log_obj.closeLog();

	quit();									// We're in trouble. REALLY quit()!
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TDW_BOT_WP_AcquireWaypointOne(area_number, access_strategy,
	force_hop_wp)
{
	var inited_area_list = TDW_PATH_GetInitedAreas();
	var old_attack_flag  = TDW_BOT_AttackNPCSpec.setDoAttackOff();
	var return_code;

	return_code = TDW_BOT_WP_AcquireWaypointOneBasic(area_number,
		access_strategy, force_hop_wp);

	TDW_BOT_AttackNPCSpec.setDoAttack(old_attack_flag);

	TDW_PATH_FreeInitedAreas(inited_area_list, TDW_BOT_Log);

	return(return_code);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TDW_BOT_WP_AcquireWaypointOneBasic(area_number, access_strategy,
	force_hop_wp)
{
	if (!D2JSP_AREA_IsValidInGame(area_number)) {
		access_strategy.callback_func(access_strategy,
			TDW_PATH_ASCB_MSG_ERROR, "Area " + area_number + " is invalid.");
		return(-1);
	}

	if (!D2JSP_AREA_HasWayPoint(area_number)) {
		access_strategy.callback_func(access_strategy,
			TDW_PATH_ASCB_MSG_ERROR, "Area " + area_number + " (" +
			D2JSP_AREA_AreaToName(area_number) + ") does not have a waypoint.");
		return(-1);
	}

	access_strategy = (access_strategy instanceof TDW_PATH_LinkAccessStrategy) ?
		access_strategy : TDW_BOT_MOVE_GetDefaultLinkAccessStrategy();

	var wp_access  = access_strategy.wp_access;
	var wp_indices = D2JSP_AREA_AreaToWayPointIndices(area_number);

	// If they don't have the Rogue Encampment then the waypoint access data
	//	hasn't been initialized. So we attempt to do so...
	if (!wp_access[0][0]) {
		TDW_BOT_MOVE_RecoverInTown(false);
		if (!D2JSP_AREA_IsTown(area_number))
			return(-1);
		TDW_MOVE_GetMyWayPointAccess();
		access_strategy.wp_access = TDW_MOVE_WaypointAccessData;
		wp_access                 = TDW_MOVE_WaypointAccessData;
	}

	if (wp_access[wp_indices[0]][wp_indices[1]])
		return(0);

	if ((area_number == D2JSP_AREA_HALLS_OF_DEATHS_CALLING) && (!force_hop_wp)) {
		access_strategy.callback_func(access_strategy,
			TDW_PATH_ASCB_MSG_STATUS, "Skipping the waypoint in area " +
			area_number + " (" + D2JSP_AREA_AreaToName(area_number) + ").");
		return(1);
	}

	if (D2JSP_AREA_IsTown(area_number)) {
		access_strategy.callback_func(access_strategy,
			TDW_PATH_ASCB_MSG_WARNING, "Unable to acquire waypoints in " +
			"act " + D2JSP_AREA_GetAct(area_number) + " and beyond until " +
			"the appropriate quests are completed.");
		return(1);
	}

	if (area_number == D2JSP_AREA_CANYON_OF_THE_MAGI) {
		access_strategy.callback_func(access_strategy,
			TDW_PATH_ASCB_MSG_WARNING, "Unable to acquire " +
			D2JSP_AREA_AreaToName(area_number) + " waypoint because you " +
			" have not completed the Summoner quest. Type 'A2Q5' to do so.");
		return(1);
	}

	if ((area_number == D2JSP_AREA_DURANCE_OF_HATE_LEVEL_2) &&
		(!D2JSP_QUEST_GetQuestDone(3, 5)) &&
		(!D2JSP_QUEST_IsStartedAct(4))) {
		access_strategy.callback_func(access_strategy,
			TDW_PATH_ASCB_MSG_WARNING, "Unable to acquire " +
			D2JSP_AREA_AreaToName(area_number) + " waypoint because you " +
			" have not completed the Khalim's Flail quest. Type 'eye', " +
			"'heart', 'brain', and 'A3Q5' to do so.");
		return(1);
	}

	if ((area_number == D2JSP_AREA_THE_WORLDSTONE_KEEP_LEVEL_2) &&
		(!D2JSP_QUEST_GetQuestDone(5, 5))) {
		access_strategy.callback_func(access_strategy,
			TDW_PATH_ASCB_MSG_WARNING, "Unable to acquire " +
			D2JSP_AREA_AreaToName(area_number) + " waypoint because you " +
			" because you have not completed the Ancients quest.");
		return(1);
	}

/*
	if (me.act != D2JSP_AREA_GetAct(area_number)) {
		TDW_BOT_MOVE_RecoverInTown(false);
		if (!D2JSP_AREA_IsTown())
			return(-1);
		TDW_MOVE_COMPAT_TownMove(D2JSP_AREA_GetAct(area_number), "waypoint");
		if (me.act != D2JSP_AREA_GetAct(area_number))
			return(-1);
	}

	TDW_PATH_FixUpAct();

	var waypoint_obj = D2JSP_AREA_WaypointObjList[wp_indices[0]][wp_indices[1]];
	TDW_PATH_CreateArea(area_number);
	var coord_list   = TDW_PATH_MapGlobal.area_list[area_number].
		getPresetCoordsList(waypoint_obj.room_spec, D2JSP_UTIL_GETUNIT_OBJECT,
		waypoint_obj.unit_id_spec, true);

	if (!coord_list.length) {
		access_strategy.callback_func(access_strategy,
			TDW_PATH_ASCB_MSG_WARNING, "Unable to locate the waypoint in " +
			"area " + area_number + " (" +
			D2JSP_AREA_AreaToName(area_number) + ") --- (room spec = [" +
			waypoint_obj.room_spec + "], unit id spec = [" +
			waypoint_obj.unit_id_spec + "]).");
		return(1);
	}

	if ((return_code = TDW_PATH_GotoTargetArea(area_number,
		access_strategy, TDW_PATHL_AREA_LOAD_FLAG_DEFAULT)))
		return(1);

	if (access_strategy.callback_func(access_strategy,
		TDW_PATH_ASCB_GOTO_XYPAIR, coord_list[0])) {
		access_strategy.callback_func(access_strategy,
			TDW_PATH_ASCB_MSG_WARNING, "Unable to get to the waypoint in " +
			"area " + area_number + " (" +
			D2JSP_AREA_AreaToName(area_number) + ") --- (room spec = [" +
			waypoint_obj.room_spec + "], unit id spec = [" +
			waypoint_obj.unit_id_spec + "]).");
		return(1);
	}

	var this_wp = getUnit(D2JSP_UTIL_GETUNIT_OBJECT, "Waypoint");
	if (!this_wp) {
		access_strategy.callback_func(access_strategy,
			TDW_PATH_ASCB_MSG_WARNING, "Unable to get a core unit object " +
			"for waypoint in area " + area_number + " (" +
			D2JSP_AREA_AreaToName(area_number) + ") --- (room spec = [" +
			waypoint_obj.room_spec + "], unit id spec = [" +
			waypoint_obj.unit_id_spec + "]).");
		return(1);
	}

//	TDW_MOVE_GetMyWayPointAccessBasic(this_wp);
	if (myDist(this_wp.x, this_wp.y) > 5) {
		D2JSP_SKILL_TeleportToObject(this_wp);
		if (myDist(this_wp.x, this_wp.y) > 5)
			TDW_MOVE_MoveToObject(this_wp);
	}
*/

	var return_code;
	if ((return_code = TDW_BOT_WP_GotoWaypoint(area_number, access_strategy,
		force_hop_wp)))
		return(return_code);

	TDW_MOVE_WaypointUse(D2JSP_AREA_AreaToTown(), 10);
	TDW_BOT_MOVE_RecoverInTown(false);
	TDW_MOVE_WaypointAccessData[wp_indices[0]][wp_indices[1]] = true;
	access_strategy.wp_access[wp_indices[0]][wp_indices[1]]   = true;

	return(0);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TDW_BOT_WP_GotoWaypoint(area_number, access_strategy)
{
	if (!D2JSP_AREA_IsValidInGame(area_number)) {
		access_strategy.callback_func(access_strategy,
			TDW_PATH_ASCB_MSG_ERROR, "Area " + area_number + " is invalid.");
		return(-1);
	}

	if (!D2JSP_AREA_HasWayPoint(area_number)) {
		access_strategy.callback_func(access_strategy,
			TDW_PATH_ASCB_MSG_ERROR, "Area " + area_number + " (" +
			D2JSP_AREA_AreaToName(area_number) + ") does not have a waypoint.");
		return(-1);
	}

	access_strategy = (access_strategy instanceof TDW_PATH_LinkAccessStrategy) ?
		access_strategy : TDW_BOT_MOVE_GetDefaultLinkAccessStrategy();

	var wp_access  = access_strategy.wp_access;
	var wp_indices = D2JSP_AREA_AreaToWayPointIndices(area_number);

	// If they don't have the Rogue Encampment then the waypoint access data
	//	hasn't been initialized. So we attempt to do so...
	if (!wp_access[0][0]) {
		TDW_BOT_MOVE_RecoverInTown(false);
		if (!D2JSP_AREA_IsTown(area_number))
			return(-1);
		TDW_MOVE_GetMyWayPointAccess();
		access_strategy.wp_access = TDW_MOVE_WaypointAccessData;
		wp_access                 = TDW_MOVE_WaypointAccessData;
	}

/*
	if ((area_number == D2JSP_AREA_HALLS_OF_DEATHS_CALLING) && (!force_hop_wp)) {
		access_strategy.callback_func(access_strategy,
			TDW_PATH_ASCB_MSG_STATUS, "Skipping the waypoint in area " +
			area_number + " (" + D2JSP_AREA_AreaToName(area_number) + ").");
		return(1);
	}
*/

/*
	if (D2JSP_AREA_IsTown(area_number)) {
		access_strategy.callback_func(access_strategy,
			TDW_PATH_ASCB_MSG_WARNING, "Unable to acquire waypoints in " +
			"act " + D2JSP_AREA_GetAct(area_number) + " and beyond until " +
			"the appropriate quests are completed.");
		return(1);
	}
*/

	if (!wp_access[wp_indices[0]][wp_indices[1]]) {
		if (area_number == D2JSP_AREA_CANYON_OF_THE_MAGI) {
			access_strategy.callback_func(access_strategy,
				TDW_PATH_ASCB_MSG_WARNING, "Unable to acquire " +
				D2JSP_AREA_AreaToName(area_number) + " waypoint because you " +
				" have not completed the Summoner quest. Type 'A2Q5' to do so.");
			return(1);
		}
		else if ((area_number == D2JSP_AREA_DURANCE_OF_HATE_LEVEL_2) &&
			(!D2JSP_QUEST_GetQuestDone(3, 5)) &&
			(!D2JSP_QUEST_IsStartedAct(4))) {
			access_strategy.callback_func(access_strategy,
				TDW_PATH_ASCB_MSG_WARNING, "Unable to acquire " +
				D2JSP_AREA_AreaToName(area_number) + " waypoint because you " +
				" have not completed the Khalim's Flail quest. Type 'eye', " +
				"'heart', 'brain', and 'A3Q5' to do so.");
			return(1);
		}
		else if ((area_number == D2JSP_AREA_THE_WORLDSTONE_KEEP_LEVEL_2) &&
			(!D2JSP_QUEST_GetQuestDone(5, 5))) {
			access_strategy.callback_func(access_strategy,
				TDW_PATH_ASCB_MSG_WARNING, "Unable to acquire " +
				D2JSP_AREA_AreaToName(area_number) + " waypoint because you " +
				" because you have not completed the Ancients quest.");
			return(1);
		}
	}

	if (me.act != D2JSP_AREA_GetAct(area_number)) {
		TDW_BOT_MOVE_RecoverInTown(false);
		if (!D2JSP_AREA_IsTown())
			return(-1);
		TDW_MOVE_COMPAT_TownMove(D2JSP_AREA_GetAct(area_number), "waypoint");
		if (me.act != D2JSP_AREA_GetAct(area_number))
			return(-1);
	}

	TDW_PATH_FixUpAct();

	var waypoint_obj = D2JSP_AREA_WaypointObjList[wp_indices[0]][wp_indices[1]];
	TDW_PATH_CreateArea(area_number);
	var coord_list   = TDW_PATH_MapGlobal.area_list[area_number].
		getPresetCoordsList(waypoint_obj.room_spec, D2JSP_UTIL_GETUNIT_OBJECT,
		waypoint_obj.unit_id_spec, true);

	if (!coord_list.length) {
		access_strategy.callback_func(access_strategy,
			TDW_PATH_ASCB_MSG_WARNING, "Unable to locate the waypoint in " +
			"area " + area_number + " (" +
			D2JSP_AREA_AreaToName(area_number) + ") --- (room spec = [" +
			waypoint_obj.room_spec + "], unit id spec = [" +
			waypoint_obj.unit_id_spec + "]).");
		return(1);
	}

	if (TDW_PATH_GotoTargetArea(area_number, access_strategy,
		TDW_PATHL_AREA_LOAD_FLAG_DEFAULT)) {
		access_strategy.callback_func(access_strategy,
			TDW_PATH_ASCB_MSG_WARNING, "Unable to get to the waypoint in " +
			"area " + area_number + " (" + D2JSP_AREA_AreaToName(area_number) +
			").");
		return(1);
	}

	if (access_strategy.callback_func(access_strategy,
		TDW_PATH_ASCB_GOTO_XYPAIR, coord_list[0])) {
		access_strategy.callback_func(access_strategy,
			TDW_PATH_ASCB_MSG_WARNING, "Unable to get to the waypoint in " +
			"area " + area_number + " (" +
			D2JSP_AREA_AreaToName(area_number) + ") --- (room spec = [" +
			waypoint_obj.room_spec + "], unit id spec = [" +
			waypoint_obj.unit_id_spec + "]).");
		return(1);
	}

	var this_wp = getUnit(D2JSP_UTIL_GETUNIT_OBJECT, "Waypoint");
	if (!this_wp) {
		access_strategy.callback_func(access_strategy,
			TDW_PATH_ASCB_MSG_WARNING, "Unable to get a core unit object " +
			"for waypoint in area " + area_number + " (" +
			D2JSP_AREA_AreaToName(area_number) + ") --- (room spec = [" +
			waypoint_obj.room_spec + "], unit id spec = [" +
			waypoint_obj.unit_id_spec + "]).");
		return(1);
	}

	D2JSP_SKILL_TeleportToObject(this_wp);
	if (myDist(this_wp.x, this_wp.y) > 5)
		TDW_MOVE_MoveToObject(this_wp);

	return(0);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TDW_BOT_MOVE_GetDefaultLinkAccessStrategy()
{
if (TDW_PATH_UseTDWAStar) {
	var access_strategy = new TDW_PATH_LinkAccessStrategy(
		TDW_BOT_MOVE_DefaultAccessStrategyAStar, null, 33, null, null,
		TDW_MOVE_WaypointAccessData);
}
else {
	var access_strategy = new TDW_PATH_LinkAccessStrategy(
		TDW_BOT_MOVE_DefaultAccessStrategy, null, 33, null, null,
		TDW_MOVE_WaypointAccessData);
}

	access_strategy.action_flags = TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_NONE;
	access_strategy.move_control =
		new TDW_BOT_ATTACK_MoveControl(access_strategy.action_flags);

	return(access_strategy);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TDW_BOT_MOVE_GetDefaultLinkAccessStrategy_Walk()
{
	var access_strategy = new TDW_PATH_LinkAccessStrategy(
		TDW_BOT_MOVE_DefaultAccessStrategy_Walk, null, 33, null, null,
		TDW_MOVE_WaypointAccessData);

	access_strategy.action_flags = TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_NONE;
	access_strategy.move_control =
		new TDW_BOT_ATTACK_MoveControl(access_strategy.action_flags);

	return(access_strategy);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TDW_BOT_MOVE_DefaultAccessStrategy(access_strategy, ascb_type,
	ascb_data, other_data)
{
	var return_code = 0;

	TDW_BOT_Log.logDebug("TDW_BOT_MOVE_DefaultAccessStrategy(): " +
		"Entry with ASCB type = " + ascb_type);

	access_strategy.__PRIVATE__doPreFunc(ascb_type, ascb_data, other_data);

	switch (ascb_type) {
		case TDW_PATH_ASCB_MSG_STATUS					:
			if (typeof(TDW_RS_SayStatus) == "function")
				TDW_RS_SayStatus(ascb_data);
			else
				D2JSP_UTIL_LOG_GetALog().logInfo(ascb_data);
			break;
		case TDW_PATH_ASCB_MSG_WARNING				:
			if (typeof(TDW_RS_SayError) == "function")
				TDW_RS_SayError(ascb_data);
			else
				D2JSP_UTIL_LOG_GetALog().logWarningColor(ascb_data);
			break;
		case TDW_PATH_ASCB_MSG_ERROR					:
			if (typeof(TDW_RS_SayError) == "function")
				TDW_RS_SayError(ascb_data);
			else
				D2JSP_UTIL_LOG_GetALog().logErrorColor(ascb_data);
			break;
		case TDW_PATH_ASCB_GOTO_XYPAIR				:
		case TDW_PATH_ASCB_GOTO_XYPAIR_LOCAL		:
			var this_distance = D2JSP_SYLIB_myDistPair(ascb_data);
//			if (D2JSP_AREA_IsTown())
//				TDW_MOVE_MoveToXYPair(ascb_data);
			if (D2JSP_AREA_IsTown())
				TDW_MOVE_COMPAT_TownMoveXY(D2JSP_AREA_GetAct(),
					ascb_data[0], ascb_data[1]);
/*
			else if (this_distance < 2)
				TDW_MOVE_MoveToXYPair(ascb_data);
*/
			else if (this_distance < 1)
				;
			else if (this_distance < 10)
				TDW_BOT_MOVE_TeleportToDestination(ascb_data,
					access_strategy.action_flags);
			else
				return_code = TDW_BOT_MOVE_GotoXYPair(ascb_data,
					(D2JSP_AREA_IsComplex()) ? TDW_PATH_MAP_BUILD_FLAG_NONE :
					TDW_PATH_MAP_BUILD_FLAG_NO_ACCESS_CHECK,
					(D2JSP_UTIL_GEN_TypeOfNumber(other_data) ||
					(other_data instanceof TDW_BOT_ATTACK_MoveControl)) ?
					other_data : access_strategy.move_control);
			break;
		case TDW_PATH_ASCB_GOTO_XYPAIR_LOCAL_ONLY	:
				TDW_BOT_MOVE_TeleportToDestination(ascb_data,
					access_strategy.action_flags);
			break;
		case TDW_PATH_ASCB_AREA_CHANGE				:
			if (!D2JSP_AREA_IsTown())
				TDW_BOT_CHECK_PrecastChecks();
			break;
		case TDW_PATH_ASCB_EXIT_TOWN					:
			TDW_BOT_CHECK_PrecastChecks(30000);
			break;
		case TDW_PATH_ASCB_ENTER_TOWN					:
			TDW_BOT_MOVE_TownLogic(TDW_BOT_MOVE_TOWN_FLAG_NONE, TDW_ISF_Cfg);
			break;
		default												:
			break;
	}

	access_strategy.__PRIVATE__doPostFunc(ascb_type, ascb_data, other_data);

	return(return_code);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TDW_BOT_MOVE_DefaultAccessStrategy_Walk(access_strategy, ascb_type,
	ascb_data, other_data)
{
	var return_code = 0;

	TDW_BOT_Log.logDebug("TDW_BOT_MOVE_DefaultAccessStrategy_Walk(): " +
		"Entry with ASCB type = " + ascb_type);

	access_strategy.__PRIVATE__doPreFunc(ascb_type, ascb_data, other_data);

	switch (ascb_type) {
		case TDW_PATH_ASCB_MSG_STATUS					:
			if (typeof(TDW_RS_SayStatus) == "function")
				TDW_RS_SayStatus(ascb_data);
			else
				D2JSP_UTIL_LOG_GetALog().logInfo(ascb_data);
			break;
		case TDW_PATH_ASCB_MSG_WARNING				:
			if (typeof(TDW_RS_SayError) == "function")
				TDW_RS_SayError(ascb_data);
			else
				D2JSP_UTIL_LOG_GetALog().logWarning(ascb_data);
			break;
		case TDW_PATH_ASCB_MSG_ERROR					:
			if (typeof(TDW_RS_SayError) == "function")
				TDW_RS_SayError(ascb_data);
			else
				D2JSP_UTIL_LOG_GetALog().logError(ascb_data);
			break;
		case TDW_PATH_ASCB_GOTO_XYPAIR				:
		case TDW_PATH_ASCB_GOTO_XYPAIR_LOCAL		:
			var this_distance = D2JSP_SYLIB_myDistPair(ascb_data);
			if (D2JSP_AREA_IsTown())
				TDW_MOVE_COMPAT_TownMoveXY(D2JSP_AREA_GetAct(),
					ascb_data[0], ascb_data[1]);
			else if (this_distance < 1)
					;
			else {
				var this_map = new oMap();
				TDW_BOT_CHECK_DoChecks();
				this_map.InitializeMap();
				TDW_BOT_CHECK_DoChecks();
				var path_list = this_map.FindPath(me.x, me.y, ascb_data[0],
					ascb_data[1], 5, mlREDUCEWALK, mlASTAR, 4, 1);
				if (!path_list.length) {
					access_strategy.callback_func(access_strategy,
						TDW_PATH_ASCB_MSG_ERROR, D2JSP_UTIL_COLOR_RED +
						"Failed to find path to location [" + ascb_data + "] in " +
						"area " + me.area + " (" + D2JSP_AREA_AreaToName() + ").");
					return(-1);
				}
				while (path_list.length) {
					TDW_MOVE_MoveToXY(path_list[0].x, path_list[0].y);
					TDW_BOT_CHECK_DoChecks();
					path_list.shift();
				}
			}
			break;
		case TDW_PATH_ASCB_GOTO_XYPAIR_LOCAL_ONLY	:
				TDW_MOVE_MoveToXYPair(ascb_data);
				TDW_BOT_CHECK_DoChecks();
			break;
		case TDW_PATH_ASCB_AREA_CHANGE				:
			if (!D2JSP_AREA_IsTown())
				TDW_BOT_CHECK_PrecastChecks();
			break;
		case TDW_PATH_ASCB_EXIT_TOWN					:
			TDW_BOT_CHECK_PrecastChecks(30000);
			break;
		case TDW_PATH_ASCB_ENTER_TOWN					:
			TDW_BOT_MOVE_TownLogic(TDW_BOT_MOVE_TOWN_FLAG_NONE, TDW_ISF_Cfg);
			break;
		default												:
			break;
	}

	access_strategy.__PRIVATE__doPostFunc(ascb_type, ascb_data, other_data);

	return(return_code);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
// ////////////////////////////////////////////////////////////////////////////
// Used to record the total time spent recovering in town. This value is
// needed by logic which is limited in the total time it will attempt tasks
// (such things as perform attacks).
// ////////////////////////////////////////////////////////////////////////////
var TDW_BOT_MOVE_RecoverInTown_TotalTime = 0;
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TDW_BOT_MOVE_RecoverInTown(return_to_origin)
{
	var start_area     = me.area;
	var start_location = [me.x, me.y];
	var log_obj        = D2JSP_UTIL_LOG_GetALog();

	if (!D2JSP_AREA_IsTown(start_area)) {
		if (TDW_MOVE_ReturnToTown(TDW_BOT_CHECK_ChickenChecksBasicMe,
			null, 200, 50))
			TDW_BOT_CHECK_PerformChicken("Unable to return to town.");
		if (!D2JSP_AREA_IsTown()) {
			log_obj.logError("Unable to return to " +
				D2JSP_AREA_AreaToName(D2JSP_AREA_AreaToTown()) + ".");
			return(-2);
		}
	}

	var town_start_time = getTickCount();

	runGC();

	if (TDW_BOT_MOVE_TownLogic(TDW_BOT_MOVE_TOWN_FLAG_NONE |
		((TDW_BOT_ContextList["mercernary.needed"]) ?
		TDW_BOT_MOVE_TOWN_FLAG_MERC_NEEDED : TDW_BOT_MOVE_TOWN_FLAG_NONE) |
		((TDW_BOT_ContextList["mercernary.wanted"]) ?
		TDW_BOT_MOVE_TOWN_FLAG_MERC_WANTED : TDW_BOT_MOVE_TOWN_FLAG_NONE),
		TDW_ISF_Cfg))
		TDW_BOT_SUPP_DoExitWithMsg("Unable to complete town logic.");

	if ((!D2JSP_AREA_IsTown(start_area)) && return_to_origin) {
		TDW_MOVE_COMPAT_TownMove("portalspot");
		if (TDW_BOT_STATE_IsBadStateUs(TDW_BOT_STATE_BadStatesAll)) {
			while (TDW_BOT_STATE_IsBadStateUs(D2JSP_STATE_CONVICTED)) {
				me.overhead("I don't like Conviction either.");
				delay(500);
			}
			while (TDW_BOT_STATE_IsBadStateUs(TDW_BOT_STATE_BadStatesDefault)) {
				me.overhead("Gotta shake-off this thing...");
				delay(500);
			}
			me.overhead("I'm good to go!");
		}
		runGC();
		TDW_BOT_CHECK_PrecastChecks(30000);		// Ensure pre-casts will last...
		TDW_MOVE_LookForAndTakePortal(start_area, me.name, 20, 50, false);
		if (me.area != start_area) {
			log_obj.logError("Unable to return to " +
				D2JSP_AREA_AreaToName(start_area) + ".");
			return(-2);
		}
		log_obj.logInfo("Back in " + D2JSP_AREA_AreaToName() +
			" after recovering in town.");
		TDW_BOT_MOVE_RecoverInTown_TotalTime += getTickCount() - town_start_time;
	}

	return(0);
}
// ////////////////////////////////////////////////////////////////////////////

var TDW_BOT_MOVE_TownLogic_NoPurchaseStuffFlag = false;

// ////////////////////////////////////////////////////////////////////////////
function TDW_BOT_MOVE_TownLogic(town_flags, isf_cfg)
{
	var return_code = 0;
	var log_obj     = D2JSP_UTIL_LOG_GetALog();

	runGC();

	if (isf_cfg != null) {
		if (isf_cfg.cursorCheckStart()) {
			log_obj.logError("Item could not be removed from cursor");
			return(-1);								// Return here... can go no further.
		}
	}
	else if (D2JSP_UTIL_GEN_ClearCursor(true, TDW_BOT_Log)) {
		log_obj.logError("Item could not be removed from cursor");
		return(-1);
	}

	TDW_MOVE_ReturnToTown();

	if (D2JSP_COMM_PickupForCorpse()) {
		log_obj.logError("Unable to pickup corpse --- probably not " +
			"prudent to continue");
		return(-1);
	}

	if (TDW_BOT_STATE_IsBadStateUs(TDW_BOT_STATE_BadStatesAll))
		D2JSP_NPC_Heal();

	if (TDW_BELTMAN_OptimizeBelt(
		TDW_BOT_ContextList["town.logic.belt.discard.unused"]))
		ISF_CreateBeltPickupHash(TDW_BELTMAN_FLAG_NONE);

/*
	if ((!D2JSP_COMM_GetALocalTome("tbk")) && D2JSP_NPC_PurchaseTBK()) {
		log_obj.logError("Was unable to purchase an TP tome");
		return_code = -11;
	}
*/

	if (!TDW_BOT_MOVE_TownLogic_NoPurchaseStuffFlag) {
		if (town_flags & TDW_BOT_MOVE_TOWN_FLAG_FILL_ALL) {
			if (D2JSP_NPC_FillAll()) {
				log_obj.logError("Was unable to fill all tomes and keys.");
				return_code = 1;
			}
		}
		var needed_count = TDW_BOT_ContextList["town.logic.minimum.tbk.count"];
		if (D2JSP_COMM_CountTomesLessThan("tbk", 10)) {
			if (D2JSP_NPC_FillTomesAll()) {
				log_obj.logError("Was unable to fill all tomes.");
				return_code = 1;
			}
		}
		else if (D2JSP_COMM_CountTomesLessThan("tbk", 21) < needed_count) {
			while (D2JSP_COMM_CountTomesLessThan("tbk", 21) < needed_count) {
				if (D2JSP_NPC_PurchaseTBK() != 0) {
					return_code = 1;
					break;
				}
				needed_count--;
			}
		}
		var needed_count = TDW_BOT_ContextList["town.logic.minimum.ibk.count"];
		if (D2JSP_COMM_CountTomesLessThan("ibk", 2)) {
			if (D2JSP_NPC_FillTomesAll()) {
				log_obj.logError("Was unable to fill all tomes.");
				return_code = 1;
			}
		}
		else if (D2JSP_COMM_CountTomesLessThan("ibk", 21) < needed_count) {
			while (D2JSP_COMM_CountTomesLessThan("ibk", 21) < needed_count) {
				if (D2JSP_NPC_PurchaseIBK() != 0) {
					return_code = 1;
					break;
				}
				needed_count--;
			}
		}
		if (D2JSP_COMM_CountKeysLessThan(6)) {
			if (D2JSP_NPC_FillKey()) {
				log_obj.logError("Was unable to fill all keys.");
				return_code = 1;
			}
		}
		else if (!D2JSP_COMM_CountKeysLessThan(13)) {
			if (D2JSP_NPC_PurchaseKey())
				return_code = 1;
		}
		if ((town_flags & TDW_BOT_MOVE_TOWN_FLAG_FILL_TBK) &&
			D2JSP_COMM_CountTomesNotFull("tbk")) {
			if (D2JSP_NPC_FillTome("tbk")) {
				log_obj.logError("Was unable to fill all Tomes of Town Portal.");
				return_code = 1;
			}
		}
		if ((town_flags & TDW_BOT_MOVE_TOWN_FLAG_FILL_IBK) &&
			D2JSP_COMM_CountTomesNotFull("ibk")) {
			if (D2JSP_NPC_FillTome("ibk")) {
				log_obj.logError("Was unable to fill all Tomes of Identify.");
				return_code = 1;
			}
		}
		if ((town_flags & TDW_BOT_MOVE_TOWN_FLAG_FILL_KEY) &&
			D2JSP_COMM_CountKeysNotFull()) {
			if (D2JSP_NPC_FillKey()) {
				log_obj.logError("Was unable to fill all keys.");
				return_code = 1;
			}
		}
	}

	if (!TDW_BOT_MOVE_TownLogic_NoPurchaseStuffFlag) {
		if (D2JSP_UTIL_GEN_TypeOfFunction(
			TDW_BOT_ContextList["town.logic.isf.stash"])) {
			if (TDW_BOT_ContextList["town.logic.isf.stash"](town_flags, isf_cfg))
				return(-1);
		}
		else if (TDW_BOT_MOVE_TownLogicStash(town_flags, isf_cfg))
			return(-1);
	}

	if ((town_flags & TDW_BOT_MOVE_TOWN_FLAG_MERC_WANTED) &&
		(!TDW_BOT_MOVE_TownLogic_NoPurchaseStuffFlag)) {
		var merc_need_level = (town_flags & TDW_BOT_MOVE_TOWN_FLAG_MERC_WANTED) ?
			"wanted" : "needed";
/*
		if (D2JSP_NPC_GetMercIsLiving())
			log_obj.logInfo("A mercenary is " + merc_need_level +
				" and a living one has been located by the name of " +
				D2JSP_NPC_GetMercName() + ".");
		else {
*/
		if (!D2JSP_NPC_GetMercIsLiving()) {
			log_obj.logWarning("A mercenary is " + merc_need_level +
				" but no living one has been located.");
			log_obj.logInfo("Will attempt to resurrect a mercenary.");
			D2JSP_NPC_ReviveMercenary();
			if (D2JSP_NPC_GetMercIsLiving())
				log_obj.logInfo("The " + merc_need_level + " mercenary " +
					D2JSP_NPC_GetMercName() + " has been resurrected.");
         else if (town_flags & TDW_BOT_MOVE_TOWN_FLAG_MERC_NEEDED) {
				log_obj.logError("Unable to locate or revive a mercenary.");
				return(-1);
			}
		}
	}

	if (D2JSP_ITEM_ShouldMoveExcessGoldToStash())
		D2JSP_COMM_ExcessGoldToStash();

	if ((me.hp < (me.hpmax - 5)) || (me.mp < (me.mpmax - 5)) ||
		TDW_BOT_STATE_IsBadStateUs(TDW_BOT_STATE_BadStatesAll))
		D2JSP_NPC_Heal();
	else {
		var merc_obj = D2JSP_NPC_GetMercObj();
		if (merc_obj && (merc_obj.hp < 128))
			D2JSP_NPC_Heal();
	}

	if (!TDW_BOT_MOVE_TownLogic_NoPurchaseStuffFlag) {
		var durability_data = D2JSP_COMM_GetDurabilityData();
		if ((durability_data.low_percent <=
			TDW_BOT_ContextList["town.logic.repair.percent"]) ||
			(durability_data.low_dura_now <= 2))
			D2JSP_NPC_RepairAll();
	}

	runGC();

	return(return_code);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TDW_BOT_MOVE_TownLogicStash(town_flags, isf_cfg)
{
	var log_obj = D2JSP_UTIL_LOG_GetALog();

	town_flags |= (TDW_BOT_ContextList["town.logic.isf.force.sales"]) ?
		TDW_BOT_MOVE_TOWN_FLAG_FORCE_ISF_SELL : TDW_BOT_MOVE_TOWN_FLAG_NONE;
		
	if ((isf_cfg != null) && isf_cfg.getStashActionListBasic(false,
		ISF_STASH_FLAG_NONE).length) {
		var do_stashing_flag = ((town_flags & (TDW_BOT_MOVE_TOWN_FLAG_FORCE_ISF |
			TDW_BOT_MOVE_TOWN_FLAG_FORCE_ISF_SELL)) ||
			(isf_cfg instanceof ISF_CfgTriple)) ? true : false;
		if (!do_stashing_flag) {
			if (!D2JSP_ITEM_CONT_FindSpace(2, 4, D2JSP_ITEM_CONT_BuildMapList(),
				D2JSP_ITEM_CONT_SRC_INVENTORY)) {
				log_obj.logInfo("Stashing is needed because there is insufficient "+
					"room in the inventory for a 2X4 item.");
				do_stashing_flag = true;
			}
		}
		if (do_stashing_flag) {
			var isf_return_code;
			var gold_max   = D2JSP_ITEM_MyGoldMax();
			var gold_total = D2JSP_ITEM_MyGoldTotal();
//			if (gold_total < gold_max)
			if ((town_flags & TDW_BOT_MOVE_TOWN_FLAG_FORCE_ISF_SELL) ||
				(gold_total < (gold_max - (gold_max / 20))) ||
				((gold_total < gold_max) && (gold_max <= 200000)) ||
				TDW_BOT_ContextList["town.logic.isf.always.sell"] ||
				(isf_cfg instanceof ISF_CfgTriple) ||
				(gold_total < (gold_max - 50000)))
				isf_return_code = isf_cfg.doSelling(null, ISF_STASH_FLAG_NONE);
			else
				isf_return_code = isf_cfg.doStashing(null, ISF_STASH_FLAG_NONE);
			if (isf_return_code < 0) {
				log_obj.logError("A fatal error was encountered in the stashing " +
					" logic");
				return(-1);
			}
		}
	}

	return(0);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TDW_BOT_MOVE_GotoActTown(act_number)
{
	TDW_BOT_MOVE_RecoverInTown(false);

	if ((act_number >= 1) && (act_number <= 5)) {
		if (me.act != act_number)
			TDW_MOVE_COMPAT_TownMove(act_number, "waypoint");
		if (me.act != act_number) {
			var tmp_error = "Unable to get to Act " + act_number +
				" town. Giving up...";
			if (typeof(TDW_RS_SayStatus) == "function")
				TDW_RS_SayError(tmp_error);
			else
				D2JSP_UTIL_LOG_GetALog().logErrorColor(tmp_error);
			return(-1);
		}
		return(0);
	}

	var tmp_error = "Invalid act number specified (" + act_number + ").";
	if (typeof(TDW_RS_SayStatus) == "function")
		TDW_RS_SayError(tmp_error);
	else
		D2JSP_UTIL_LOG_GetALog().logErrorColor(tmp_error);

	return(-1);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TDW_BOT_MOVE_GotoActTownForArea(area_number)
{
	if (!arguments.length)
		return(TDW_BOT_MOVE_GotoActTown(me.act));
	else if (D2JSP_AREA_IsValidInGame(area_number))
		return(TDW_BOT_MOVE_GotoActTown(D2JSP_AREA_GetAct(area_number)));

	var tmp_error = "Invalid area number specified (" + area_number + ").";
	if (typeof(TDW_RS_SayStatus) == "function")
		TDW_RS_SayError(tmp_error);
	else
		D2JSP_UTIL_LOG_GetALog().logErrorColor(tmp_error);

	return(-1);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TDW_BOT_MOVE_WaypointOutbound(target_area)
{
	TDW_BOT_CHECK_PrecastChecks(30000);

	if (TDW_MOVE_WaypointUseInTown(target_area, 10)) {
		TDW_BOT_Log.logError("Call to TDW_MOVE_WaypointUseInTown() for area " +
			target_area + " (" + D2JSP_AREA_AreaToName(target_area) + ") failed.");
		return(-1);
	}

	if (me.area != target_area) {
		TDW_BOT_Log.logError("Unable to get to " +
			D2JSP_AREA_AreaToName(target_area) + " using the waypoint.");
		return(-1);
	}

	TDW_BOT_CHECK_PrecastChecks(30000);

	if (typeof(TDW_RS_SayStatus) == "function")
		TDW_RS_SayStatus("In " + D2JSP_AREA_AreaToName() + ".");
	else
		TDW_BOT_Log.logInfo("In " + D2JSP_AREA_AreaToName() + ".");

	return(0);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TDW_BOT_MOVE_GotoRoomAndTakeTile(room_spec, tile_spec, path_flags)
{
	var tile_obj = TDW_BOT_MOVE_GotoRoomAndTile(room_spec, tile_spec,
		path_flags);

	if (tile_obj)
		return(TDW_BOT_MOVE_TakeTile(tile_obj));

	return(-1);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TDW_BOT_MOVE_GotoTileAndTakeTile(tile_spec)
{
	var tile_obj = TDW_BOT_MOVE_GotoTile(tile_spec);

	if (tile_obj)
		return(TDW_BOT_MOVE_TakeTile(tile_obj));

	return(-1);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TDW_BOT_MOVE_GotoRoomAndTile(room_spec, tile_spec, path_flags)
{
	return((!TDW_BOT_MOVE_GotoRoom(room_spec, path_flags)) ?
		TDW_BOT_MOVE_GotoTile(tile_spec) : null);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TDW_BOT_MOVE_GotoRoom(room_spec, path_flags)
{
	var my_area     = TDW_PATH_GetAreaData();
	var rooms_found = 0;

	room_spec = (room_spec != null) ? D2JSP_UTIL_GEN_ExpandArgs(room_spec) :
		(new Array());

	for (var count_1 = 0; count_1 < room_spec.length; count_1++) {
		for (var count_2 = 0; count_2 < my_area.room_list.length; count_2++) {
			if (my_area.room_list[count_2].number != room_spec[count_1])
				continue;
			rooms_found++;
			if (my_area.room_list[count_2].isInRoomObject(me))
				return(0);
			var room_center;
			if (path_flags & TDW_PATH_MAP_BUILD_FLAG_NO_ACCESS_CHECK)
				room_center = my_area.room_list[count_2].getCenterSmart();
			else
				room_center = my_area.room_list[count_2].getCenterAccessible();
			if (room_center != null) {
				// Go to the room...
				if (!TDW_BOT_MOVE_GotoXYPair(room_center, path_flags,
					new TDW_BOT_ATTACK_MoveControl(TDW_BOT_SUPP_TP2DEST_FLAG_NONE)))
					return(0);
				D2JSP_UTIL_LOG_GetALog().logError("GotoXYPair() for room number " +
					room_number + ", coordinates [" + room_center + "] failed in " +
					"area " + me.area + " (" + D2JSP_AREA_AreaToName() + ").");
				return(-3);
			}
		}
	}

	if (rooms_found)
		D2JSP_UTIL_LOG_GetALog().logError("No candidate rooms found for " +
			"room spec [" + room_spec + "] in area " + me.area +
			" (" + D2JSP_AREA_AreaToName() + ").");
	else
		D2JSP_UTIL_LOG_GetALog().logError("Failed to locate the room spec [" +
			room_spec + "] in area " + me.area +
			" (" + D2JSP_AREA_AreaToName() + ").");

	return(-2);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TDW_BOT_MOVE_GotoTile(tile_spec)
{
	var tile_obj;

	if ((!arguments.length) || (tile_spec == null))
		tile_obj = TDW_MOVE_LookForTileByArea(me.area, 10, 50);
	else
		tile_obj = TDW_MOVE_LookForTileByClassid(tile_spec, 10, 50);

	if (tile_obj) {
		if (myDist(tile_obj.x, tile_obj.y) > 3) {
			if ((myDist(tile_obj.x, tile_obj.y) <= 4) || D2JSP_AREA_IsTown())
				TDW_MOVE_MoveToObject(tile_obj);
			else
				TDW_BOT_MOVE_TeleportToDestination([tile_obj.x, tile_obj.y],
					TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_NONE);
		}
		if (myDist(tile_obj.x, tile_obj.y) <= 10) 
			return(tile_obj);
		D2JSP_UTIL_LOG_GetALog().logError("Unable to get close to tile " +
			"classid " + tile_obj.classid + " in area " + me.area + " (" +
			D2JSP_AREA_AreaToName() + ").");
	}
	else if ((!arguments.length) || (tile_spec == null))
		D2JSP_UTIL_LOG_GetALog().logError("Attempt to locate a tile for " +
			" area " + me.area + " (" + D2JSP_AREA_AreaToName() + ") failed.");
	else
		D2JSP_UTIL_LOG_GetALog().logError("Attempt to locate a tile for " +
			"classid " + tile_spec + " in area " + me.area + " (" +
			D2JSP_AREA_AreaToName() + ") failed.");

	return(null);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TDW_BOT_MOVE_TakeTile(tile_obj)
{
	if (!TDW_MOVE_TakeTileToArea(tile_obj))
		return(0);
	else
		D2JSP_UTIL_LOG_GetALog().logError("Attempt to use tile classid " +
			tile_obj.classid + " in area " + me.area + " (" +
			 D2JSP_AREA_AreaToName() + ") failed.");

	return(-1);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TDW_BOT_MOVE_TeleportToDestinationList(move_list, action_flags,
	move_control)
{
	var count_1;

/*
	move_control = (move_control instanceof TDW_BOT_ATTACK_MoveControl) ?
		move_control : (new TDW_BOT_ATTACK_MoveControl(action_flags));
*/

	for (count_1 = 0; count_1 < move_list.length; count_1++) {
		TDW_BOT_MOVE_TeleportToDestination(move_list[count_1], action_flags,
			move_control);
		if (action_flags & TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_TARGET) {
			TDW_BOT_MOVE_DoArrival(action_flags, move_list[count_1], move_control);
			TDW_BOT_MOVE_DoDeparture(action_flags, move_list[count_1], move_control);
		}
	}

	if (action_flags & TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_FINAL) {
		TDW_BOT_MOVE_DoArrival(action_flags, move_list[move_list.length - 1],
			move_control);
		TDW_BOT_MOVE_DoDeparture(action_flags, move_list[move_list.length - 1],
			move_control);
	}
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TDW_BOT_MOVE_TeleportToDestination(destination, action_flags,
	move_control)
{
	var move_list         = new Array();
	var step_size         = TDW_BOT_ContextList["teleport.step.size"];
	var last_location     = [me.x, me.y];
	var this_action_flags = action_flags;
	var no_change_count   = 0;
	var start_location;
	var start_dist;
	var this_pair;
	var this_dist;

/*
	move_control = (move_control instanceof TDW_BOT_ATTACK_MoveControl) ?
		move_control : (new TDW_BOT_ATTACK_MoveControl(action_flags));
*/

	var no_change_max = (move_control instanceof TDW_BOT_ATTACK_MoveControl) ?
		move_control.no_change_max : 30;

	move_list.push(last_location);

/*
	TDW_BOT_Log.logDebug("TDW_BOT_MOVE_TeleportToDestination([" + destination +
		"]) New destination started, distance = " +
		D2JSP_SYLIB_myDistPair(destination));
*/

	while ((start_dist = D2JSP_SYLIB_myDistPair(destination)) >
		TDW_BOT_ContextList["teleport.step.fudge.step"]) {
		start_location = [me.x, me.y];
		this_pair = TDW_BOT_MOVE_CalculateTeleportStep(destination, step_size);
		TDW_BOT_MOVE_DoDeparture(action_flags &
			(TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_INTER |
			TDW_BOT_SUPP_TP2DEST_FLAG_PICKUP_ISF |
			TDW_BOT_SUPP_TP2DEST_FLAG_OPEN_DOORS), this_pair, move_control);
		TDW_BOT_Log.logDebug("Intermediate teleport pending: " +
			"(current location = [" + me.x + ", " + me.y + "], " +
			"desired location = [" + this_pair + "], current step size = " +
			step_size + ")");
		D2JSP_SKILL_TeleportTo(this_pair[0], this_pair[1]);
		TDW_BOT_Log.logDebug("Intermediate teleport done   : " +
			"(current location = [" + me.x + ", " + me.y + "], " +
			"desired location = [" + this_pair + "], current step size = " +
			step_size + ")");
		TDW_BOT_CHECK_DoChecks();
		TDW_BOT_MOVE_DoArrival(action_flags &
			(TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_INTER |
			TDW_BOT_SUPP_TP2DEST_FLAG_PICKUP_ISF |
			TDW_BOT_SUPP_TP2DEST_FLAG_OPEN_DOORS), destination, move_control);
/*
		TDW_BOT_Log.logDebug("TDW_BOT_MOVE_TeleportToDestination([" + destination +
			"]): current location = [" + me.x + ", " + me.y + "] : " +
			"Distance to final = " + D2JSP_SYLIB_myDistPair(destination));
*/
		this_dist = D2JSP_SYLIB_myDistPair(destination);
		if ((last_location[0] == me.x) && (last_location[1] == me.y)) {
			if (step_size >= TDW_BOT_ContextList["teleport.step.size.max"])
				break;
//			D2JSP_SKILL_TeleportTo(last_location[0], last_location[1]);
			step_size        += TDW_BOT_ContextList["teleport.step.size.increase"];
			this_action_flags = TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_NONE;
			TDW_BOT_Log.logDebug("No change in location: (current location = [" +
				me.x + ", " + me.y + "], desired location = [" + this_pair + "], " +
				"current step size = " + step_size + ")");
//			if (++no_change_count > 5) {
			if (++no_change_count > no_change_max) {
				var msg_text = D2JSP_UTIL_COLOR_RED + "Maximum number of " +
					"failed teleport attempts (" + no_change_max + ")";
				if (typeof(TDW_RS_LogBadRoom) == "function")
					TDW_RS_LogBadRoom(msg_text, destination);
				else if (action_flags & TDW_BOT_SUPP_TP2DEST_FLAG_QUIT_NO_CHANGE) {
					TDW_BOT_Log.logFatal(msg_text + " --- exiting.");
					TDW_BOT_SUPP_DoQuit();
				}
				else
					TDW_BOT_Log.logWarning(msg_text);
				return(move_list);
			}
			continue;
		}
//		else if ((this_dist > start_dist) && ((this_dist - start_dist) > 5)) {
		else if ((this_dist > start_dist) && ((this_dist - start_dist) > 10)) {
			if (step_size >= TDW_BOT_ContextList["teleport.step.size.max"])
				break;
			D2JSP_SKILL_TeleportTo(last_location[0], last_location[1]);
			step_size        += TDW_BOT_ContextList["teleport.step.size.increase"];
			this_action_flags = TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_NONE;
			no_change_count   = 0;
			TDW_BOT_Log.logDebug("Distance increase: (current location = [" +
				me.x + ", " + me.y + "], desired location = [" + this_pair + "], " +
				"current step size = " + step_size + ", distance increase = " +
				(this_dist - start_dist) + ")");
			continue;
		}
		else if (D2JSP_SYLIB_myDistPair(this_pair) >
			TDW_BOT_ContextList["teleport.step.fudge.step"]) {
			if (step_size >= TDW_BOT_ContextList["teleport.step.size.max"])
				break;
//			D2JSP_SKILL_TeleportTo(last_location[0], last_location[1]);
			step_size        += TDW_BOT_ContextList["teleport.step.size.increase"];
//			this_action_flags = TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_NONE;
			no_change_count   = 0;
			TDW_BOT_Log.logDebug("Teleport failure: (current location = [" +
				me.x + ", " + me.y + "], desired location = [" + this_pair + "], " +
				"current step size = " + step_size + ")");
			continue;
		}
		no_change_count   = 0;
		this_action_flags = action_flags;
		step_size         = TDW_BOT_ContextList["teleport.step.size"];
		last_location     = [me.x, me.y];
		move_list.push(last_location);
	}

	if (D2JSP_SYLIB_myDistPair(destination) < 20)
		D2JSP_SKILL_TeleportTo(destination[0], destination[1]);
	else {
		var msg_text = D2JSP_UTIL_COLOR_RED + "Distance from final " +
			"teleport destination of [" + destination[0] + ", " + destination[1] +
			"] is " + D2JSP_SYLIB_myDistPair(destination) + " (exceeds 20)";
		if (typeof(TDW_RS_LogBadRoom) == "function")
			TDW_RS_LogBadRoom(msg_text, destination);
		else if (action_flags & TDW_BOT_SUPP_TP2DEST_FLAG_QUIT_FINAL_DIST) {
			TDW_BOT_Log.logFatal(msg_text + " --- exiting.");
			TDW_BOT_SUPP_DoQuit();
		}
		else
			TDW_BOT_Log.logWarning(msg_text);
		return(move_list);
	}

	TDW_BOT_MOVE_DoArrival(action_flags &
		(TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_TARGET |
		TDW_BOT_SUPP_TP2DEST_FLAG_PICKUP_ISF |
		TDW_BOT_SUPP_TP2DEST_FLAG_OPEN_DOORS), destination, move_control);
	TDW_BOT_CHECK_DoChecks();

	return(move_list);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TDW_BOT_MOVE_TeleportToPartial(destination, action_flags, step_size,
	move_control)
{
	var start_location;
	var this_pair;
	var this_dist;

	step_size    = (step_size != null) ? step_size :
		TDW_BOT_ContextList["teleport.step.size"];
/*
	move_control = (move_control instanceof TDW_BOT_ATTACK_MoveControl) ?
		move_control : (new TDW_BOT_ATTACK_MoveControl(action_flags));
*/

	start_location = [me.x, me.y];
	this_pair = TDW_BOT_MOVE_CalculateTeleportStep(destination, step_size);

/*
	TDW_BOT_MOVE_DoDeparture(action_flags &
		(TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_INTER |
		TDW_BOT_SUPP_TP2DEST_FLAG_PICKUP_ISF |
		TDW_BOT_SUPP_TP2DEST_FLAG_OPEN_DOORS), this_pair, move_control);
*/

	TDW_BOT_Log.logDebug("Intermediate teleport pending: " +
		"(current location = [" + me.x + ", " + me.y + "], " +
		"desired location = [" + this_pair + "], current step size = " +
		step_size + ")");

	D2JSP_SKILL_TeleportTo(this_pair[0], this_pair[1]);

	TDW_BOT_Log.logDebug("Intermediate teleport done   : " +
		"(current location = [" + me.x + ", " + me.y + "], " +
		"desired location = [" + this_pair + "], current step size = " +
		step_size + ")");

/*
	TDW_BOT_MOVE_DoArrival(action_flags &
		(TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_INTER |
		TDW_BOT_SUPP_TP2DEST_FLAG_PICKUP_ISF |
		TDW_BOT_SUPP_TP2DEST_FLAG_OPEN_DOORS), destination, move_control);
*/
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TDW_BOT_MOVE_CalculateTeleportStep(destination, step_size)
{
	var teleport_pair = new Array();
	var move_x;
	var move_y;
	var new_x;
	var new_y;

	move_x = Math.min(Math.abs(destination[0] - me.x), step_size);
	move_y = Math.min(Math.abs(destination[1] - me.y), step_size);

	new_x  = me.x + (move_x * ((destination[0] > me.x) ? 1 : -1));
	new_y  = me.y + (move_y * ((destination[1] > me.y) ? 1 : -1));

	if (TDW_BOT_Log &&
		(TDW_BOT_Log.getLevelFile() <= D2JSP_UTIL_LOG_Level_MINUTIAE))
		TDW_BOT_Log.logMinutiae("TDW_BOT_MOVE_CalculateTeleportStep([" +
			destination + "]): current location = [" + me.x + ", " + me.y +
			"], step size = " + step_size + ", " +
			"delta movement = [" + move_x + ", " + move_y +
			"], new location = [" + new_x + ", " + new_y + "])");

	teleport_pair = [new_x, new_y];

	return(teleport_pair);
/*
	return(TDW_BOT_MOVE_CalculateTeleportStepBasic([me.x, me.y], destination,
		step_size));
*/
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TDW_BOT_MOVE_CalculateTeleportStepBasic(source, destination, step_size)
{
	var move_x;
	var move_y;
	var new_x;
	var new_y;

//	move_x = Math.min(Math.abs(destination[0] - source[0]), step_size);
//	move_y = Math.min(Math.abs(destination[1] - source[1]), step_size);

	var dist = Dist(destination[0], destination[1], source[0], source[1]);

	if (dist <= step_size)
		return([destination[0], destination[1]]);

	var steps_needed = Math.floor(dist / step_size);
	var move_x       = Math.abs(destination[0] - source[0]);
	var move_y       = Math.abs(destination[1] - source[1]);

	move_x = Math.floor(move_x / steps_needed);
	move_y = Math.floor(move_y / steps_needed);

	new_x  = source[0] + (move_x * ((destination[0] > source[0]) ? 1 : -1));
	new_y  = source[1] + (move_y * ((destination[1] > source[1]) ? 1 : -1));

	if (TDW_BOT_Log &&
		(TDW_BOT_Log.getLevelFile() <= D2JSP_UTIL_LOG_Level_MINUTIAE))
		TDW_BOT_Log.logMinutiae("TDW_BOT_MOVE_CalculateTeleportStepBasic([" +
			destination + "]): current location = [" + source[0] + ", " +
			source[1] + "], step size = " + step_size + ", " +
			"delta movement = [" + move_x + ", " + move_y +
			"], new location = [" + new_x + ", " + new_y + "])");

	return([new_x, new_y]);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TDW_BOT_MOVE_DoArrival(action_flags, destination, move_control)
{
	destination  = D2JSP_UTIL_GEN_TypeOfCoord(destination) ? destination :
		[me.x, me.y];

	TDW_BOT_Log.logDebug("Arrival procedure started    : (action flags = " +
		action_flags + ", destination = [" + destination[0] + ", " +
		destination[1] + "], current location = [" + me.x + ", " + me.y + "])");

	TDW_BOT_AttackNPCSpec.killAny();

	if (action_flags & TDW_BOT_SUPP_TP2DEST_FLAG_MASK) {
		if (action_flags & TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_ALL) {
			if (!(move_control instanceof TDW_BOT_ATTACK_MoveControl)) {
				move_control                   =
					new TDW_BOT_ATTACK_MoveControl(action_flags);
				move_control.threat_avoid_spec =
					new TDW_THREAT_MoveSpec(0, 8, [me.x, me.y], 20);
			}
			TDW_BOT_ATTACK_AttackNearbyMonsters(true, destination, move_control);
		}
		if (action_flags & TDW_BOT_SUPP_TP2DEST_FLAG_PICKUP_ISF) {
			var tmp_cluster = new TDW_BOT_ATTACK_ClusterCount(null, 15, null,
				null, null, 1);
			if (!tmp_cluster.count)
				TDW_BOT_SUPP_MySnagIt(destination);
			else
				TDW_BOT_SUPP_DoPickup(destination);
		}
	}

	// Doors are opened after NPCs are attacked in the arrival logic.
	if (action_flags & TDW_BOT_SUPP_TP2DEST_FLAG_OPEN_DOORS)
		TDW_BOT_SUPP_OpenNearbyDoors(
			TDW_BOT_ContextList["mysnagit.pop.chests.radius"], destination);

	TDW_BOT_AttackNPCSpec.killAny();

	TDW_BOT_CHECK_DoChecks();

	if (typeof(TDW_BOT_ContextList["mana.regen.percentage"]) != "undefined")
		TDW_BOT_MOVE_DoManaRegen(TDW_BOT_ContextList["mana.regen.actual"], true,
			destination);

	TDW_BOT_Log.logDebug("Arrival procedure completed  : (action flags = " +
		action_flags + ", destination = [" + destination[0] + ", " +
		destination[1] + "], current location = [" + me.x + ", " + me.y + "])");
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TDW_BOT_MOVE_DoDeparture(action_flags, destination, move_control)
{
	destination  = D2JSP_UTIL_GEN_TypeOfCoord(destination) ? destination :
		[me.x, me.y];

	TDW_BOT_Log.logDebug("Departure procedure started  : (action flags = " +
		action_flags + ", destination = [" + destination[0] + ", " +
		destination[1] + "], current location = [" + me.x + ", " + me.y + "])");

	TDW_BOT_AttackNPCSpec.killAny();

	// Doors are opened before NPCs are attacked in the arrival logic.
	if (action_flags & TDW_BOT_SUPP_TP2DEST_FLAG_OPEN_DOORS)
		TDW_BOT_SUPP_OpenNearbyDoors(
			TDW_BOT_ContextList["mysnagit.pop.chests.radius"], destination);

	if (action_flags & TDW_BOT_SUPP_TP2DEST_FLAG_MASK) {
		if (action_flags & TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_ALL) {
			if (!(move_control instanceof TDW_BOT_ATTACK_MoveControl)) {
				move_control                   =
					new TDW_BOT_ATTACK_MoveControl(action_flags);
				move_control.threat_avoid_spec =
					new TDW_THREAT_MoveSpec(0, 18, [me.x, me.y], 26);
			}
			TDW_BOT_ATTACK_AttackNearbyMonsters(false, destination, move_control);
		}
		if (action_flags & TDW_BOT_SUPP_TP2DEST_FLAG_PICKUP_ISF) {
			var tmp_cluster = new TDW_BOT_ATTACK_ClusterCount(null, 15, null,
				null, null, 1);
			if (!tmp_cluster.count)
				TDW_BOT_SUPP_MySnagIt(destination);
			else
				TDW_BOT_SUPP_DoPickup(destination);
		}
	}

	TDW_BOT_AttackNPCSpec.killAny();

	TDW_BOT_CHECK_DoChecks();

	if (typeof(TDW_BOT_ContextList["mana.regen.percentage"]) != "undefined")
		TDW_BOT_MOVE_DoManaRegen(TDW_BOT_ContextList["mana.regen.actual"], true,
			destination);

	TDW_BOT_Log.logDebug("Departure procedure completed: (action flags = " +
		action_flags + ", destination = [" + destination[0] + ", " +
		destination[1] + "], current location = [" + me.x + ", " + me.y + "])");
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TDW_BOT_MOVE_DoManaRegen(mana_to_wait_for, is_regen_flag, destination)
{
	var last_time;
	var msg_text;
	var move_control;

	move_control =
		new TDW_BOT_ATTACK_MoveControl(TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_ALL, 1,
			3, 10, 999, 15);

	mana_to_wait_for = ((arguments.length < 1) || (mana_to_wait_for == null) ||
		(mana_to_wait_for > TDW_BOT_ContextList["me.max.mp"])) ?
		TDW_BOT_ContextList["me.max.mp"] : mana_to_wait_for;
	destination      = D2JSP_UTIL_GEN_TypeOfCoord(destination) ? destination :
		[me.x, me.y];

	if (me.mp < mana_to_wait_for) {
		TDW_BOT_Log.logDetail("Waiting for mana regeneration (current = " + me.mp +
			", waiting for " + mana_to_wait_for + ") ---> is regen flag = " +
			is_regen_flag + ", destination = [" + destination[0] + ", " +
			destination[1] + "]");
		D2JSP_SKILL_TeleportTo(me.x, me.y);	// Get merc near me...
		msg_text = "My mana is " + me.mp + " of a maximum of " +
			TDW_BOT_ContextList["me.max.mp"] + " (" +
			((me.mp / TDW_BOT_ContextList["me.max.mp"]) * 100.0).toFixed(2) + "%)" +
			((is_regen_flag) ? " --- mana regeneration is specified at " +
			TDW_BOT_ContextList["mana.regen.percentage"] + "%." : "");
		TDW_BOT_Log.logInfo(msg_text);
		last_time = (new Date()).valueOf();
		D2JSP_UTIL_BNET_OverheadSafe("Mana regen: " + me.mp + " < " + me.mpmax);
		while (me.mp < (TDW_BOT_ContextList["me.max.mp"] - 5)) {
			for (count_1 = 0; count_1 < 2; count_1++) {
				if (!count_1)
					TDW_BOT_ATTACK_AttackNearbyMonsters(false, destination,
						move_control);
				else
					TDW_BOT_CHECK_DoChecks();
				if (((new Date()).valueOf() - last_time) >= 500) {
					D2JSP_UTIL_BNET_OverheadSafe("Mana regen: " + me.mp + " < " +
						TDW_BOT_ContextList["me.max.mp"]);
					last_time = (new Date()).valueOf();
				}
				D2JSP_UTIL_GEN_FuzzyDelay(50);
			}
		}
		TDW_BOT_Log.logDetail("Mana regeneration completed (current = " +
			me.mp + ")");
		D2JSP_UTIL_BNET_OverheadSafe("Mana regen done");
		if (TDW_BOT_ContextList["operation.tour"] != true)
			TDW_BOT_SUPP_MySnagIt(destination);
	}
}
// ////////////////////////////////////////////////////////////////////////////

// From Scav's Multi-Bot...
// ////////////////////////////////////////////////////////////////////////////
function TDW_BOT_MOVE_GotoXYPair(in_pair, path_flags, move_control)
{
	return(TDW_BOT_MOVE_GotoXY(in_pair[0], in_pair[1], path_flags, move_control));
}
// ////////////////////////////////////////////////////////////////////////////

// Adapted from Scav's Multi MF Bot
// ////////////////////////////////////////////////////////////////////////////
function TDW_BOT_MOVE_GotoXY(in_x, in_y, path_flags, move_control)
{
if (TDW_PATH_UseTDWAStar)
	return(TDW_BOT_MOVE_GotoXYAStar(in_x, in_y, path_flags, move_control));

	if (!(move_control instanceof TDW_BOT_ATTACK_MoveControl)) {
//TDW_BOT_Log.logInfo("***** TDW_BOT_MOVE_GotoXY(): typeof move_control =  " +
//	typeof(move_control));
		move_control = (D2JSP_UTIL_GEN_TypeOfNumber(move_control)) ? move_control :
			TDW_BOT_SUPP_TP2DEST_FLAG_NONE;
		move_control = new TDW_BOT_ATTACK_MoveControl(move_control);
	}
//else
//	TDW_BOT_Log.logInfo("***** TDW_BOT_MOVE_GotoXY() HAVE A VALID MOVE CONTROL OBJECT");
		
	var target    = new coord();
//	var builddist = 30;
	var builddist = TDW_BOT_ContextList["teleport.step.size"];

	target.set(in_x, in_y);
	
	TDW_BOT_Log.logDebug("Going to build the path");

	var path = null;
	do {
		TDW_BOT_Log.logDebug("Calling TDW_PATH_FindPath()");
		path = TDW_PATH_FindPath(target.x, target.y, builddist, path_flags);
		if (!path) {
			TDW_BOT_Log.logDebug("Build with dist: " + builddist + " failed");
		}
		else
			TDW_BOT_Log.logDebug("TDW_PATH_FindPath() returned a path");
		
		builddist += 10;
		delay(50);
	}while(!path);

	TDW_BOT_Log.logDebug("Build path with distance " + (builddist - 10));
	
	TDW_BOT_Log.logDebug("Going to teleport the path");
	TDW_BOT_MOVE_ScavTeleportPath(path, move_control);
	
	TDW_BOT_Log.logDebug("Going to teleport to target: (" + target.x + "," + target.y + ")");
	TDW_BOT_MOVE_ScavTeleport_1(target.x, target.y, 8);
//	D2JSP_SKILL_TeleportTo(target.x, target.y);
	
//	TDW_BOT_MOVE_TeleportToDestination([target.x, target.y], TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_NONE);

	TDW_BOT_Log.logDebug("GotoXY done");

	return(0);
}
// ////////////////////////////////////////////////////////////////////////////

// Adapted from Scav's Multi MF Bot
// ////////////////////////////////////////////////////////////////////////////
function TDW_BOT_MOVE_ScavTeleportPath(path, move_control)
{
	for (var i = 0; i < path.length; i++) {
		if (!path[i].x && !path[i].y)
			break;
		var step_size_list = [5, 2, 1];
		var this_path_item = [path[i].x, path[i].y];
		if (move_control.action_flags & TDW_BOT_SUPP_TP2DEST_FLAG_MASK)
			TDW_BOT_MOVE_DoDeparture(move_control.action_flags, null, move_control);
		if ((!(move_control.action_flags & TDW_BOT_SUPP_TP2DEST_FLAG_NO_AVOID_NPCS)) &&
			TDW_PATH_MapGlobal.area_list[me.area]) {
			this_path_item = TDW_BOT_MOVE_FindSafeTeleport(path[i].x, path[i].y,
				move_control);
/*
			for (var count_1 = 0; count_1 < step_size_list.length; count_1++) {
				var move_cell = TDW_THREAT_FindSafestSpot(this_path_item,
					move_control.threat_avoid_spec, 0, step_size_list[count_1]);
				if (move_cell) {
					this_path_item = [move_cell.x, move_cell.y];
					break;
				}
			}
*/
		}
		TDW_BOT_MOVE_ScavTeleport_1(this_path_item[0], this_path_item[1]);
		if (move_control.action_flags & TDW_BOT_SUPP_TP2DEST_FLAG_MASK)
			TDW_BOT_MOVE_DoArrival(move_control.action_flags, null, move_control);
//		D2JSP_SKILL_TeleportTo(path[i].x, path[i].y);
//		TDW_BOT_MOVE_TeleportToDestination([path[i].x, path[i].y], true);
	}
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TDW_BOT_MOVE_FindSafeTeleport(path_x, path_y, move_control)
{
	var step_size_list = [5, 2, 1];
	var this_path_item = [path_x, path_y];

	for (var count_1 = 0; count_1 < step_size_list.length; count_1++) {
		var move_cell = TDW_THREAT_FindSafestSpot(this_path_item,
			move_control.threat_avoid_spec, 0, step_size_list[count_1]);
		if (move_cell)
			return([move_cell.x, move_cell.y]);
	}

	return(this_path_item);
}
// ////////////////////////////////////////////////////////////////////////////

// Adapted from Scav's Multi MF Bot
// ////////////////////////////////////////////////////////////////////////////
function TDW_BOT_MOVE_ScavTeleport_1(x, y, mindist, retry)
{
	// MLB 2003-05-27
	var teledist_base = 25;

	if (!mindist || mindist < 3)
		mindist = 5;
	
	if (!retry)
		retry = 10;	// default 10 retries	
	retry++;
	
	TDW_BOT_MOVE_ScavSetSkill("Teleport", 0);
	
	var target = new coord(x,y);
	var pos = new coord(me);
	var lastpos = new coord(me);
	var dist,dir;
	
	while(pos.dist(x, y) > mindist) {
		// MLB 2003-05-27
		var teledist = teledist_base + rnd(0,5);
		pos.set(me);
		dir = pos.dir(target);

		if (dir.x == 0 && dir.y == 0)
			return true;
		
		if (lastpos.dist(me) < 3) {
			lastpos.data++;
			if (lastpos.data > 2)
				dir.rotate(-90, 90);
		}
		else
			lastpos.data = 0;
		
		lastpos.set(me);
		if (target.dist(me) > teledist)
			pos.move(dir, teledist);
		else {
			pos.set(target);
		}
		
		TDW_BOT_Log.logDebug("Teleporting to " + pos);
		me.useSkillAt(pos.x, pos.y, 0);
		delay(50);
		while(me.mode == 10)
			delay(50);
		
		retry--;
		// MLB 2003-05-27
		teledist_base += 10;
		//delay(castdelay);
		if (target.dist(me) <= mindist)
			return true;
		
//		CheckSelf();
		TDW_BOT_CHECK_DoChecks();
		TDW_BOT_Log.logDebug("TDW_BOT_CHECK_DoChecks() in teleport done");
	}
}
// ////////////////////////////////////////////////////////////////////////////

// Adapted from Scav's Multi MF Bot
// ////////////////////////////////////////////////////////////////////////////
function TDW_BOT_MOVE_ScavTeleport_2(x, y, mindist, retry)
{
	// MLB 2003-05-27
	var teledist_base = 25;

	if (!mindist || mindist < 3)
		mindist = 5;
	
	if ((retry < 1) || (retry > 50) || (retry == null))
		retry = 10;	// default 10 retries	
	retry++;

	TDW_BOT_MOVE_ScavSetSkill("Teleport", 0);
	
	var target  = new coord(x,y);
	var pos     = new coord(me);
	var lastpos = new coord(me);
	var dist,dir;
	
//	while(pos.dist(x, y) > mindist) {
	while(Dist(me.x, me.y, x, y) > mindist) {
		// MLB 2003-05-27
		var teledist = teledist_base + rnd(0,5);
		pos.set(me);
		dir = pos.dir(target);

		if (dir.x == 0 && dir.y == 0)
{
//TDW_BOT_Log.logInfo("***** AVOID NPCS: Teleport exit direction = 0 (distance = " +
//	pos.dist(x, y) + ", retry = " + retry + ")");
			return true;
}
		
		if (lastpos.dist(me) < 3) {
			lastpos.data++;
			if (lastpos.data > 2)
				dir.rotate(-90, 90);
		}
		else
			lastpos.data = 0;
		
		lastpos.set(me);
		if (target.dist(me) > teledist)
			pos.move(dir, teledist);
		else {
			pos.set(target);
		}
		
		TDW_BOT_Log.logDebug("Teleporting to " + pos);
//TDW_BOT_Log.logInfo("***** AVOID NPCS: Teleporting to [" +
//	pos.x + "," + pos.y + "]");
		me.useSkillAt(pos.x, pos.y, 0);
		delay(50);
		while(me.mode == 10)
			delay(50);
		
		retry--;
		// MLB 2003-05-27
		teledist_base += 10;
		//delay(castdelay);
		if (target.dist(me) <= mindist)
{
//TDW_BOT_Log.logInfo("***** AVOID NPCS: Teleport exit minimum distance (distance = " +
//	pos.dist(x, y) + ", retry = " + retry + ")");
			return true;
}
		
//		CheckSelf();
		TDW_BOT_CHECK_DoChecks();
		TDW_BOT_Log.logDebug("TDW_BOT_CHECK_DoChecks() in teleport done");
		if (retry < 1) {
			TDW_BOT_Log.logError("Teleport failed.");
			return(false);
		}
	}

//TDW_BOT_Log.logInfo("***** AVOID NPCS: Teleport exit normal (distance 1 = " +
//	pos.dist(x, y) + ", retry = " + retry + ")");

	return(true);
}
// ////////////////////////////////////////////////////////////////////////////

// Adapted from Scav's Multi MF Bot
// ////////////////////////////////////////////////////////////////////////////
function TDW_BOT_MOVE_ScavSetSkill(skill, hand)
{
	me.setSkill(skill, hand);
	
	var timer = 2000;
	while(me.getSkill(hand).toLowerCase() != skill.toLowerCase() && timer >= 0) {
		delay(50);
		timer -= 50;
	}
	if (timer < 0)
		return false;
	
	return true;
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TDW_BOT_MOVE_AvoidNPCs(in_coord, move_control)
{
	var avoid_action_count    = (move_control.avoid_action_count < 1) ? 3 :
		move_control.avoid_action_count;
	var avoid_action_dist = ((move_control.avoid_action_dist < 5) ||
		(move_control.avoid_action_dist > 35)) ? 10 :
		move_control.avoid_action_dist;
	var npc_cluster    = new TDW_BOT_ATTACK_Cluster(in_coord,
		avoid_action_dist, null, D2JSP_UTIL_COLL_BLOCK_NONE);
	var this_coord     = null;

TDW_BOT_Log.logInfo("***** AVOID NPCS: Destination is  [" +
	in_coord + "]=" + npc_cluster.count + " NPCs");
//if (npc_cluster.count >= avoid_action_count)
//	npc_cluster.toLog(TDW_BOT_Log);

	if (npc_cluster.count < avoid_action_count)
		this_coord = in_coord;
	else {
var old_npc_count = npc_cluster.count;
var new_npc_count = 0;
		var centroid = in_coord;
		var try_list = new Array();
		while (avoid_action_dist <= 35) {
			for (var count_1 = 0; count_1 < 30; count_1++) {
				for (var count_2 = 0; count_2 < 30; count_2++) {
/*
					if (count_1 && count_2) {
						var new_coord = [centroid[0] + count_1, centroid[1] + count_2];
						npc_cluster = new TDW_BOT_ATTACK_Cluster(new_coord,
							avoid_action_dist, null, D2JSP_UTIL_COLL_BLOCK_NONE);
						if (npc_cluster.count < avoid_action_count) {
							this_coord = new_coord;
							break;
						}
						if (try_list[npc_cluster.count] == null)
							try_list[npc_cluster.count] = new Array();
						try_list[npc_cluster.count].push(new_coord);
					}
*/

					if (count_1 && count_2) {
						var deltas = [[count_1, count_2], [0 - count_1, count_2],
							[count_1, 0 - count_2], [0 - count_1, 0 - count_2]];
						for (count_3 = 0; count_3 < 4; count_3++) {
							var new_coord = [centroid[0] + deltas[count_3][0],
													centroid[1] + deltas[count_3][1]];
							npc_cluster = new TDW_BOT_ATTACK_Cluster(new_coord,
							avoid_action_dist, null, D2JSP_UTIL_COLL_BLOCK_NONE);
							if (npc_cluster.count < avoid_action_count) {
								this_coord = new_coord;
								break;
							}
							if (try_list[npc_cluster.count] == null)
								try_list[npc_cluster.count] = new Array();
							try_list[npc_cluster.count].push(new_coord);
						}
						if (this_coord != null)
							break;
					}
				}
				if (this_coord != null)
					break;
			}
			if (this_coord != null)
				break;
		}
		if (this_coord == null) {
			for (var count_1 = 0; count_1 < try_list.length; count_1++) {
				if (try_list[count_1] != null) {
					this_coord = D2JSP_UTIL_PATH_GetNearestCoord(try_list[count_1],
						in_coord);
new_npc_count = count_1;
					break;
				}
			}
		}
TDW_BOT_Log.logInfo("***** AVOID NPCS: Destination was [" +
	in_coord + "]=" + old_npc_count + " NPCs, is now [" +
	this_coord + "]=" + new_npc_count + " NPCs");
	}

	TDW_BOT_MOVE_ScavTeleport_2(this_coord[0], this_coord[1], 5, 5);

npc_cluster = new TDW_BOT_ATTACK_Cluster([me.x, me.y], avoid_action_dist, null,
	D2JSP_UTIL_COLL_BLOCK_NONE);
TDW_BOT_Log.logInfo("***** AVOID NPCS: Current location is [" + me.x + "," +
	me.y + "]=" + npc_cluster.count + " NPCs (distance from specifed target = " +
	Dist(this_coord[0], this_coord[1], me.x, me.y) + ")");
if (npc_cluster.count >= avoid_action_count)
	npc_cluster.toLog(TDW_BOT_Log);

if ((!Dist(this_coord[0], this_coord[1], me.x, me.y)) &&
	 (this_coord[0] >= TDW_PATH_MapGlobal.area_list[me.area].x_1) &&
	 (this_coord[0] <= TDW_PATH_MapGlobal.area_list[me.area].x_2) &&
	 (this_coord[1] >= TDW_PATH_MapGlobal.area_list[me.area].y_1) &&
	 (this_coord[1] <= TDW_PATH_MapGlobal.area_list[me.area].y_2))
	TDW_BOT_Log.logInfo("***** AVOID NPCS: Zero-distance report = " +
		checkCollision(me.area, this_coord[0], this_coord[1], 0xFF));
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function OLD_002_TDW_BOT_MOVE_AvoidNPCs(in_coord, move_control)
{
	var avoid_action_count    = (move_control.avoid_action_count < 1) ? 3 :
		move_control.avoid_action_count;
	var avoid_action_dist = ((move_control.avoid_action_dist < 5) ||
		(move_control.avoid_action_dist > 35)) ? 10 :
		move_control.avoid_action_dist;
	var npc_cluster    = new TDW_BOT_ATTACK_Cluster(in_coord,
		avoid_action_dist, null, D2JSP_UTIL_COLL_BLOCK_NONE);
	var this_coord     = null;

TDW_BOT_Log.logInfo("***** AVOID NPCS: Destination is  [" +
	in_coord + "]=" + npc_cluster.count + " NPCs");
//if (npc_cluster.count >= avoid_action_count)
//	npc_cluster.toLog(TDW_BOT_Log);

	if (npc_cluster.count < avoid_action_count)
		this_coord = in_coord;
	else {
var old_npc_count = npc_cluster.count;
var new_npc_count = 0;
		var centroid = in_coord;
		var try_list = new Array();
		while (avoid_action_dist <= 35) {
			for (var count_1 = -30; count_1 <= 30; count_1 += 5) {
				for (var count_2 = -30; count_2 <= 30; count_2 += 5) {
					if (count_1 && count_2) {
						var new_coord = [centroid[0] + count_1, centroid[1] + count_2];
						npc_cluster = new TDW_BOT_ATTACK_Cluster(new_coord,
							avoid_action_dist, null, D2JSP_UTIL_COLL_BLOCK_NONE);
						if (npc_cluster.count < avoid_action_count) {
							this_coord = new_coord;
							break;
						}
						if (try_list[npc_cluster.count] == null)
							try_list[npc_cluster.count] = new Array();
						try_list[npc_cluster.count].push(new_coord);
					}
				}
				if (this_coord != null)
					break;
			}
			if (this_coord != null)
				break;
		}
		if (this_coord == null) {
			for (var count_1 = 0; count_1 < try_list.length; count_1++) {
				if (try_list[count_1] != null) {
					this_coord = D2JSP_UTIL_PATH_GetNearestCoord(try_list[count_1],
						in_coord);
new_npc_count = count_1;
					break;
				}
			}
		}
TDW_BOT_Log.logInfo("***** AVOID NPCS: Destination was [" +
	in_coord + "]=" + old_npc_count + " NPCs, is now [" +
	this_coord + "]=" + new_npc_count + " NPCs");
	}

	TDW_BOT_MOVE_ScavTeleport_2(this_coord[0], this_coord[1], 5, 5);

npc_cluster = new TDW_BOT_ATTACK_Cluster([me.x, me.y], avoid_action_dist, null,
	D2JSP_UTIL_COLL_BLOCK_NONE);
TDW_BOT_Log.logInfo("***** AVOID NPCS: Current location is [" + me.x + "," +
	me.y + "]=" + npc_cluster.count + " NPCs (distance from specifed target = " +
	Dist(this_coord[0], this_coord[1], me.x, me.y) + ")");
if (npc_cluster.count >= avoid_action_count)
	npc_cluster.toLog(TDW_BOT_Log);

if ((!Dist(this_coord[0], this_coord[1], me.x, me.y)) &&
	 (this_coord[0] >= TDW_PATH_MapGlobal.area_list[me.area].x_1) &&
	 (this_coord[0] <= TDW_PATH_MapGlobal.area_list[me.area].x_2) &&
	 (this_coord[1] >= TDW_PATH_MapGlobal.area_list[me.area].y_1) &&
	 (this_coord[1] <= TDW_PATH_MapGlobal.area_list[me.area].y_2))
	TDW_BOT_Log.logInfo("***** AVOID NPCS: Zero-distance report = " +
		checkCollision(me.area, this_coord[0], this_coord[1], 0xFF));
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function OLD_001_TDW_BOT_MOVE_AvoidNPCs(in_coord, move_control)
{
	var avoid_action_count    = (move_control.avoid_action_count < 1) ? 3 :
		move_control.avoid_action_count;
	var avoid_action_dist = ((move_control.avoid_action_dist < 5) ||
		(move_control.avoid_action_dist > 35)) ? 10 :
		move_control.avoid_action_dist;
	var npc_cluster    = new TDW_BOT_ATTACK_Cluster(in_coord,
		avoid_action_dist, null, D2JSP_UTIL_COLL_BLOCK_NONE);
	var this_coord     = null;

TDW_BOT_Log.logInfo("***** AVOID NPCS: Destination is  [" +
	in_coord + "]=" + npc_cluster.count + " NPCs");
//if (npc_cluster.count >= avoid_action_count)
//	npc_cluster.toLog(TDW_BOT_Log);

	if (npc_cluster.count < avoid_action_count)
		this_coord = in_coord;
	else {
var old_npc_count = npc_cluster.count;
var new_npc_count = 0;
		var centroid = in_coord;
		var try_list = new Array();
		while (avoid_action_dist <= 35) {
			for (var count_1 = -30; count_1 <= 30; count_1 += 5) {
				for (var count_2 = -30; count_2 <= 30; count_2 += 5) {
					if (count_1 && count_2) {
						npc_cluster = new TDW_BOT_ATTACK_Cluster(
							[centroid[0] + count_1, centroid[1] + count_2],
							avoid_action_dist, null, D2JSP_UTIL_COLL_BLOCK_NONE);
						if (npc_cluster.count < avoid_action_count) {
							this_coord = [centroid[0] + count_1, centroid[1] + count_2];
							break;
						}
						if (try_list[npc_cluster.count] == null)
							try_list[npc_cluster.count] = new Array();
						try_list[npc_cluster.count].push(
							[centroid[0] + count_1, centroid[1] + count_2]);
					}
				}
				if (this_coord != null)
					break;
			}
			if (this_coord != null)
				break;
		}
		if (this_coord == null) {
			for (var count_1 = 0; count_1 < try_list.length; count_1++) {
				if (try_list[count_1] != null) {
					this_coord = D2JSP_UTIL_PATH_GetNearestCoord(try_list[count_1],
						in_coord);
new_npc_count = count_1;
					break;
				}
			}
		}
TDW_BOT_Log.logInfo("***** AVOID NPCS: Destination was [" +
	in_coord + "]=" + old_npc_count + " NPCs, is now [" +
	this_coord + "]=" + new_npc_count + " NPCs");
	}

	TDW_BOT_MOVE_ScavTeleport_2(this_coord[0], this_coord[1], 5, 5);

npc_cluster = new TDW_BOT_ATTACK_Cluster([me.x, me.y], avoid_action_dist, null,
	D2JSP_UTIL_COLL_BLOCK_NONE);
TDW_BOT_Log.logInfo("***** AVOID NPCS: Current location is [" + me.x + "," +
	me.y + "]=" + npc_cluster.count + " NPCs (distance from specifed target = " +
	Dist(this_coord[0], this_coord[1], me.x, me.y) + ")");
if (npc_cluster.count >= avoid_action_count)
	npc_cluster.toLog(TDW_BOT_Log);

if ((!Dist(this_coord[0], this_coord[1], me.x, me.y)) &&
	 (this_coord[0] >= TDW_PATH_MapGlobal.area_list[me.area].x_1) &&
	 (this_coord[0] <= TDW_PATH_MapGlobal.area_list[me.area].x_2) &&
	 (this_coord[1] >= TDW_PATH_MapGlobal.area_list[me.area].y_1) &&
	 (this_coord[1] <= TDW_PATH_MapGlobal.area_list[me.area].y_2))
	TDW_BOT_Log.logInfo("***** AVOID NPCS: Zero-distance report = " +
		checkCollision(me.area, this_coord[0], this_coord[1], 0xFF));
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function NEW_TDW_BOT_MOVE_AvoidNPCs(in_coord, move_control)
{
	var avoid_action_count    = (move_control.avoid_action_count < 1) ? 3 :
		move_control.avoid_action_count;
	var avoid_action_dist = ((move_control.avoid_action_dist < 5) ||
		(move_control.avoid_action_dist > 35)) ? 10 :
		move_control.avoid_action_dist;
	var npc_cluster    = new TDW_BOT_ATTACK_Cluster(in_coord,
		avoid_action_dist, null, D2JSP_UTIL_COLL_BLOCK_NONE);
	var this_coord     = null;

TDW_BOT_Log.logInfo("***** AVOID NPCS: Destination is  [" +
	in_coord + "]=" + npc_cluster.count + " NPCs");
//if (npc_cluster.count >= avoid_action_count)
//	npc_cluster.toLog(TDW_BOT_Log);

var old_npc_count = npc_cluster.count;
var new_npc_count = 0;

	var centroid = in_coord;
	var try_list = new Array();

//	while (avoid_action_dist <= 35) {
		for (var count_1 = -30; count_1 <= 30; count_1 += 5) {
			for (var count_2 = -30; count_2 <= 30; count_2 += 5) {
//				if (count_1 && count_2) {
//				if (true) {
				var new_coord = [centroid[0] + count_1, centroid[1] + count_2];
				if ((new_coord[0] >= TDW_PATH_MapGlobal.area_list[me.area].x_1) &&
					 (new_coord[0] <= TDW_PATH_MapGlobal.area_list[me.area].x_2) &&
					 (new_coord[1] >= TDW_PATH_MapGlobal.area_list[me.area].y_1) &&
					 (new_coord[1] <= TDW_PATH_MapGlobal.area_list[me.area].y_2) &&
					(!checkCollision(me.area, new_coord[0], new_coord[1],
					D2JSP_UTIL_COLL_BLOCK_DEFAULT))) {
					npc_cluster = new TDW_BOT_ATTACK_Cluster(new_coord,
						avoid_action_dist, null, D2JSP_UTIL_COLL_BLOCK_NONE);
					if (npc_cluster.count < avoid_action_count) {
						this_coord = new_coord;
						break;
					}
					if (try_list[npc_cluster.count] == null)
						try_list[npc_cluster.count] = new Array();
					try_list[npc_cluster.count].push(new_coord);
				}
			}
			if (this_coord != null)
				break;
		}
//		if (this_coord != null)
//			break;
//	}

	if (this_coord == null) {
print("*** try_list.length = " + try_list.length);
		for (var count_1 = 0; count_1 < try_list.length; count_1++) {
			if (try_list[count_1] != null) {
print("*** try_list[" + count_1 + "].length = " + try_list[count_1].lenth);
print("*** NEAREST INDEX = " + D2JSP_UTIL_PATH_GetNearestCoord(try_list[count_1], in_coord));
				this_coord = try_list[count_1]
					[D2JSP_UTIL_PATH_GetNearestCoord(try_list[count_1], in_coord)];
new_npc_count = count_1;
				break;
			}
		}
	}

if ((in_coord[0] != this_coord[0]) || (in_coord[1] != this_coord[1]))
	TDW_BOT_Log.logInfo("***** AVOID NPCS: Destination was [" +
		in_coord + "]=" + old_npc_count + " NPCs, is now [" +
		this_coord + "]=" + new_npc_count + " NPCs");

	var tp_code = TDW_BOT_MOVE_ScavTeleport_2(this_coord[0], this_coord[1], 10, 5);

npc_cluster = new TDW_BOT_ATTACK_Cluster([me.x, me.y], avoid_action_dist, null,
	D2JSP_UTIL_COLL_BLOCK_NONE);
TDW_BOT_Log.logInfo("***** AVOID NPCS: Current location is [" + me.x + "," +
	me.y + "]=" + npc_cluster.count + " NPCs (distance from specifed target = " +
	Dist(this_coord[0], this_coord[1], me.x, me.y) + ")");
if (npc_cluster.count >= avoid_action_count)
	npc_cluster.toLog(TDW_BOT_Log);

	if (!tp_code)
		TDW_BOT_MOVE_ScavTeleport_1(in_coord[0], in_coord[1], 15);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TDW_BOT_CTX_ContextCreate(default_list, config_list, config_name,
	log_obj)
{

/*	// Set all configuration properties to the basic configuration...
	var context_list = D2JSP_UTIL_CTX_ContextCreateBasic(TDW_BOT_ConfigureList,
		default_list, config_list, config_name, log_obj);
*/
	var context_list = new D2JSP_UTIL_CTX_Context(config_name,
		TDW_BOT_ConfigureList, default_list, config_list, log_obj);

	var attack_skill_list = D2JSP_SKILL_GetAttacksForMe();

/*
	if ((!("skill.attack.ranged" in context_list)) ||
		(!context_list["skill.attack.ranged"].length)) {
		context_list["skill.attack.ranged"] = new Array();
		for (var count_1 = 0; count_1 < D2JSP_UTIL_DAMAGE_COUNT; count_1++) {
			if (attack_skill_list[count_1].length &&
				(!attack_skill_list[count_1].is_radial))
				context_list["skill.attack.ranged"].
					push(attack_skill_list[count_1].name);
		}			
	}
*/

	if ((!("skill.attack.local" in context_list)) ||
		(!context_list["skill.attack.local"].length)) {
		context_list["skill.attack.local"] = new Array();
		for (var count_1 = 0; count_1 < D2JSP_UTIL_DAMAGE_COUNT; count_1++) {
			if (attack_skill_list[count_1].length &&
				attack_skill_list[count_1].is_radial)
				context_list["skill.attack.local"].
					push(attack_skill_list[count_1].name);
		}			
	}

	if ((!("skill.attack.arrive.local.once" in context_list)) ||
		(!context_list["skill.attack.arrive.local.once"].length)) {
		context_list["skill.attack.arrive.local.once"] = new Array();
		if (me.getSkill("Frost Nova") > 0)
			context_list["skill.attack.arrive.local.once"].push("Frost Nova");
	}

	if ((!("skill.attack.elemental.all" in context_list)) ||
		(!context_list["skill.attack.elemental.all"].length))
		context_list["skill.attack.elemental.all"] =
			new Array(D2JSP_UTIL_DAMAGE_COUNT);

	for (var count_1 = 0; count_1 < D2JSP_UTIL_DAMAGE_COUNT; count_1++) {
		if ((context_list["skill.attack.elemental.all"][count_1] == null) ||
			(D2JSP_UTIL_GEN_TypeOfArrayIndexed(
			context_list["skill.attack.elemental.all"][count_1]) &&
			(!context_list["skill.attack.elemental.all"][count_1].length))) {
			context_list["skill.attack.elemental.all"][count_1] = new Array();
			if (attack_skill_list[count_1].length) {
				var min_level = Math.floor(attack_skill_list[count_1][0].level -
					(attack_skill_list[count_1][0].level / 10));
				for (var count_2 = 0; count_2 < attack_skill_list[count_1].length;
					count_2++) {
					if (attack_skill_list[count_1][count_2].level >= min_level)
						context_list["skill.attack.elemental.all"][count_1].
							push(attack_skill_list[count_1][count_2].name);
					else
						break;
				}
			}
		}
	}

	for (var count_1 = 0; count_1 < D2JSP_UTIL_DAMAGE_COUNT; count_1++)
		context_list["skill.attack.elemental." +
			D2JSP_UTIL_DAMAGE_BaseElementList[count_1].toLowerCase()] =
			context_list["skill.attack.elemental.all"][count_1];

	// Fixup of chicken values if not specified or invalid...
	if ((typeof(context_list["chicken.me.hp"]) != "number") ||
		(context_list["chicken.me.hp"] < 0) ||
		(context_list["chicken.me.hp"] > 100))
		context_list["chicken.me.hp"] = 50;
	// If 'chicken.me.mp' is -1 then no mana chickening will be performed.
	if ((typeof(context_list["chicken.me.mp"]) != "number") ||
		(context_list["chicken.me.mp"] < -1) ||
		(context_list["chicken.me.mp"] > 100))
		context_list["chicken.me.mp"] = 35;
	if ((typeof(context_list["mana.regen.percentage"]) != "number") ||
		(context_list["mana.regen.percentage"] < 0) ||
		(context_list["mana.regen.percentage"] > 100))
		context_list["mana.regen.percentage"] = 25;
	if ((typeof(context_list["chicken.mercenary.hp"]) != "number") ||
		(context_list["chicken.mercenary.hp"] < 0) ||
		(context_list["chicken.mercenary.hp"] > 100))
		context_list["chicken.mercenary.hp"] = 25;

	// Fixup of town heal values if not specified or invalid...
	if ((typeof(context_list["town.heal.me.hp"]) != "number") ||
		(context_list["town.heal.me.hp"] < 0) ||
		(context_list["town.heal.me.hp"] > 100))
		context_list["town.heal.me.hp"] = 50;
	if ((typeof(context_list["town.heal.me.mp"]) != "number") ||
		(context_list["town.heal.me.mp"] < 0) ||
		(context_list["town.heal.me.mp"] > 100))
		context_list["town.heal.me.mp"] = 35;
	if ((typeof(context_list["mana.regen.percentage"]) != "number") ||
		(context_list["mana.regen.percentage"] < 0) ||
		(context_list["mana.regen.percentage"] > 100))
		context_list["mana.regen.percentage"] = 25;
	if ((typeof(context_list["town.heal.mercenary.hp"]) != "number") ||
		(context_list["town.heal.mercenary.hp"] < 0) ||
		(context_list["town.heal.mercenary.hp"] > 100))
		context_list["town.heal.mercenary.hp"] = 25;

	// Calculate character chicken info...
/*
	context_list["me.max.hp"]            = parseInt(me.hpmax +
		(me.hpmax * (me.getStat(D2JSP_STAT_ITEM_MAXHP_PERCENT) / 100)));
	context_list["me.max.mp"]            = parseInt(me.mpmax +
		(me.mpmax * (me.getStat(D2JSP_STAT_ITEM_MAXMANA_PERCENT) / 100)));
*/
	context_list["me.max.hp"]            = D2JSP_COMM_GetMyMaxLife();
	context_list["me.max.mp"]            = D2JSP_COMM_GetMyMaxMana();
	context_list["chicken.me.hp.actual"] =
		(context_list["me.max.hp"] / 100.0) *
		context_list["chicken.me.hp"];
	context_list["chicken.me.mp.actual"] =
		(context_list["me.max.mp"] / 100.0) *
		context_list["chicken.me.mp"];
	context_list["mana.regen.actual"]    =
		(context_list["me.max.mp"] / 100.0) *
		context_list["mana.regen.percentage"];

	// Calculate town heal info...
	context_list["town.heal.me.hp.actual"] =
		(context_list["me.max.hp"] / 100.0) *
		context_list["town.heal.me.hp"];
	context_list["town.heal.me.mp.actual"] =
		(context_list["me.max.mp"] / 100.0) *
		context_list["town.heal.me.mp"];
	context_list["mana.regen.actual"]    =
		(context_list["me.max.mp"] / 100.0) *
		context_list["mana.regen.percentage"];

	// Calculate mercenary chicken and town heal info...
	TDW_BOT_CTX_ContextCreateMercInfo(context_list);

	context_list["operation.hostility.fight"] = (!me.playertype) ?
		context_list["operation.hostility.fight.softcore"] :
		context_list["operation.hostility.fight.hardcore"];

/*
	if (context_list["operation.log.configuration"])
		D2JSP_UTIL_CTX_ContextLog(context_list, config_name, log_obj);
*/

	TDW_BOT_ContextList = context_list;

	if (context_list["operation.log.configuration"])
		TDW_BOT_ContextList.toLog(log_obj);

	runGC();

	return(context_list);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TDW_BOT_CTX_ContextCreateMercInfo(context_list)
{
	var merc_obj = D2JSP_NPC_GetMercObj();

	if (context_list["mercernary.needed"])
		context_list["mercernary.wanted"] = true;

	if (merc_obj) {
		context_list["mercenary.name"]                 = merc_obj.name;
		context_list["mercenary.hp"]                   = merc_obj.hp;
		context_list["mercenary.max.hp"]               = merc_obj.hpmax;
		context_list["chicken.mercenary.hp.actual"]    =
			Math.round((context_list["chicken.mercenary.hp"] / 100.0) * 128);
		context_list["chicken.mercenary.hp.nominal"]   =
			Math.round((context_list["chicken.mercenary.hp"] / 100.0) *
			merc_obj.hpmax);
		context_list["town.heal.mercenary.hp.actual"]  =
			Math.round((context_list["town.heal.mercenary.hp"] / 100.0) * 128);
		context_list["town.heal.mercenary.hp.nominal"] =
			Math.round((context_list["town.heal.mercenary.hp"] / 100.0) *
			merc_obj.hpmax);
	}
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TDW_BOT_SUPP_PopNearbyChests(max_radius, destination, chest_flags,
	max_count)
{
	max_radius  = ((arguments.length < 1) || (max_radius < 1) ||
		(max_radius == null)) ?
		TDW_BOT_ContextList["mysnagit.pop.chests.radius"] : max_radius;
	destination = ((arguments.length < 2) || (destination == null)) ?
		[me.x, me.y] : destination;
	chest_flags = ((arguments.length < 3) || (chest_flags == null)) ?
		TDW_BOT_ContextList["mysnagit.pop.chests.flags"] : chest_flags;
	max_count   = ((arguments.length < 4) || (max_count == null)) ?
		TDW_BOT_ContextList["mysnagit.pop.chests.maximum"] : max_count;

	return(ISF_DoChestPop(max_radius, chest_flags, destination, max_count,
		TDW_BOT_ContextList["isf.callback.function.field"], null));
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TDW_BOT_SUPP_MySnagIt(destination, isf_cfg)
{
	destination = (arguments.length >= 2) ? destination : [me.x, me.y];
	isf_cfg     = ISF_IsCfg(isf_cfg) ?isf_cfg : TDW_ISF_Cfg;

	if (D2JSP_UTIL_GEN_TypeOfArrayIndexed(destination) &&
		(destination.length >= 2))
		TDW_BOT_Log.logDebug("Pickup procedure started     : (destination = [" +
			destination[0] + ", " + destination[1] + "], current location = [" +
			me.x + ", " + me.y + "])");
	else
		TDW_BOT_Log.logDebug("Pickup procedure started     : (destination = [" +
			"*UNSPECIFIED*], current location = [" + me.x + ", " + me.y + "])");

	if (TDW_BOT_ContextList["mysnagit.pop.chests"])
		TDW_BOT_SUPP_PopNearbyChests(
			TDW_BOT_ContextList["mysnagit.pop.chests.radius"], destination,
			TDW_BOT_ContextList["mysnagit.pop.chests.flags"]);

	if (TDW_BOT_SUPP_DoPickup(destination, isf_cfg))
		TDW_BOT_SUPP_DoExitWithMsg("Error in item pickup management.");

	if (D2JSP_UTIL_GEN_TypeOfArrayIndexed(destination) &&
		(destination.length >= 2))
		TDW_BOT_Log.logDebug("Pickup procedure completed   : (destination = [" +
			destination[0] + ", " + destination[1] + "], current location = [" +
			me.x + ", " + me.y + "])");
	else
		TDW_BOT_Log.logDebug("Pickup procedure completed   : (destination = [" +
			"*UNSPECIFIED*], current location = [" + me.x + ", " + me.y + "])");
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TDW_BOT_SUPP_DoPickup(destination, isf_cfg)
{
	var gold_total   = D2JSP_ITEM_MyGoldTotal();
	var gold_minimum;

	destination = (arguments.length >= 2) ? destination : [me.x, me.y];
	isf_cfg     = ISF_IsCfg(isf_cfg) ?isf_cfg : TDW_ISF_Cfg;

	if (TDW_BOT_ContextList["mysnagit.gold.flag"]) {
		gold_minimum = TDW_BOT_ContextList["mysnagit.gold.minimum"];
		if (gold_total < 100)
			gold_minimum = Math.min(gold_minimum, 10);
		else if (gold_total < 1000)
			gold_minimum = Math.min(gold_minimum, 50);
		else if (gold_total < 5000)
			gold_minimum = Math.min(gold_minimum, 100);
		else if (gold_total < 50000)
			gold_minimum = Math.min(gold_minimum, 250);
	}

	var pickup_flags =
		((isf_cfg != null) ? ISF_PICKUP_FLAG_ITEM :
			ISF_PICKUP_FLAG_NONE) |
		((TDW_BOT_ContextList["mysnagit.gold.flag"]) ? ISF_PICKUP_FLAG_GOLD :
			ISF_PICKUP_FLAG_NONE) |
      ((TDW_BOT_ContextList["mysnagit.pickup.belt.simple"]) ?
			ISF_PICKUP_FLAG_BELT_SIMPLE :
			((TDW_BOT_ContextList["mysnagit.pickup.belt.smart"]) ?
				ISF_PICKUP_FLAG_BELT_SMART : ISF_PICKUP_FLAG_NONE));
		
	if (isf_cfg != null)
		isf_cfg.doPickup(pickup_flags,
//			TDW_BOT_ContextList["mysnagit.radius"], TDW_BELTMAN_FLAG_RVL_ONLY,
			TDW_BOT_ContextList["mysnagit.radius"], TDW_BELTMAN_FLAG_NONE,
			gold_minimum, destination,
			TDW_BOT_ContextList["isf.callback.function.field"]);
	else
//		ISF_DoPickup(null, ISF_PICKUP_FLAG_ITEM | ISF_PICKUP_FLAG_GOLD,
		ISF_DoPickup(null, pickup_flags,
//			TDW_BOT_ContextList["mysnagit.radius"], TDW_BELTMAN_FLAG_RVL_ONLY,
			TDW_BOT_ContextList["mysnagit.radius"], TDW_BELTMAN_FLAG_NONE,
			gold_minimum, destination,
			TDW_BOT_ContextList["isf.callback.function.field"]);

	while (ISF_LastPickupNoSpace.length) {
		var missed_list = ISF_LastPickupNoSpace;
		var start_area  = me.area;
		if (!D2JSP_AREA_IsTown(start_area))
			TDW_MOVE_PortalToTown(TDW_BOT_CHECK_ChickenChecksBasicMe);
		TDW_BOT_MOVE_TownLogic(TDW_BOT_MOVE_TOWN_FLAG_FORCE_ISF |
			((TDW_BOT_ContextList["mercernary.needed"]) ?
			TDW_BOT_MOVE_TOWN_FLAG_MERC_NEEDED : TDW_BOT_MOVE_TOWN_FLAG_NONE),
			isf_cfg);
		for (var count_1 = 0; count_1 < missed_list.length; ) {
			if (missed_list[count_1].isf_flag &&
				(!D2JSP_ITEM_CONT_FindSpace(missed_list[count_1].xsize,
				missed_list[count_1].ysize, D2JSP_ITEM_CONT_BuildMapList(),
				D2JSP_ITEM_CONT_SRC_INVENTORY)))
				missed_list.splice(count_1, 1);
			else
				count_1++;
		}
		if (!D2JSP_AREA_IsTown(start_area)) {
			TDW_MOVE_COMPAT_TownMove("portalspot");
			TDW_BOT_CHECK_PrecastChecks(30000);
			TDW_MOVE_LookForAndTakePortal(start_area, me.name, 50, 50, false);
			if (me.area != start_area) {
				TDW_MOVE_RandomizeLocation(me.x, me.y, 10, 10);
				TDW_MOVE_COMPAT_TownMove("stash");
				delay(100);
				TDW_MOVE_COMPAT_TownMove("portalspot");
				TDW_MOVE_LookForAndTakePortal(start_area, me.name, 50, 50, false);
			}
		}
		if (me.area != start_area) {
			TDW_BOT_Log.logError("Unable to return to " +
				D2JSP_AREA_AreaToName(start_area) + ".");
			return(-2);
		}
		if (missed_list.length) {
			if (TDW_BOT_ContextList["mysnagit.gold.flag"]) {
				gold_total   = D2JSP_ITEM_MyGoldTotal();
				gold_minimum = TDW_BOT_ContextList["mysnagit.gold.minimum"];
				if (gold_total < 100)
					gold_minimum = Math.min(gold_minimum, 10);
				else if (gold_total < 1000)
					gold_minimum = Math.min(gold_minimum, 50);
				else if (gold_total < 5000)
					gold_minimum = Math.min(gold_minimum, 100);
				else if (gold_total < 50000)
					gold_minimum = Math.min(gold_minimum, 250);
			}
			isf_cfg.doPickup(pickup_flags,
//				TDW_BOT_ContextList["mysnagit.radius"], TDW_BELTMAN_FLAG_RVL_ONLY,
				TDW_BOT_ContextList["mysnagit.radius"], TDW_BELTMAN_FLAG_NONE,
				gold_minimum, destination,
				TDW_BOT_ContextList["isf.callback.function.field"]);
		}
	}

	return(0);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TDW_BOT_SUPP_OpenNearbyDoors(max_radius, destination, callback_func,
	callback_data)
{
	max_radius    = ((arguments.length < 1) || (max_radius < 1)) ?
		TDW_BOT_ContextList["mysnagit.pop.chests.radius"] : max_radius;
	destination   = (arguments.length < 2) ? [me.x, me.y] : destination;
	callback_func = (arguments.length < 3) ?
		TDW_BOT_ContextList["isf.callback.function.field"] : callback_func;

	return(ISF_DoOpenDoors(max_radius, destination, callback_func, null));
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TDW_BOT_SUPP_DoExitWithMsg(msg_string)
{
	TDW_BOT_Log.logFatal(D2JSP_UTIL_COLOR_RED + msg_string);
	TDW_BOT_Log.closeLog();
	print(D2JSP_UTIL_COLOR_RED + msg_string + " --- exiting...");

	var wait_time = (D2JSP_AREA_IsTown(me.area)) ?
		TDW_BOT_ContextList["operation.wait.ms.exit.in.town"] :
		TDW_BOT_ContextList["operation.wait.ms.exit"];

	print("... Waiting " + (wait_time / 1000).toFixed(3) + " seconds ...");
	delay(wait_time);

	TDW_BOT_SUPP_DoQuit();
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TDW_BOT_SUPP_DoQuit()
{
	TDW_BOT_Log.closeLog();

	if (!TDW_BOT_ContextList["operation.exit.normal.stop"])
		quit();

	print("Not doing a 'quit()', but stopping the Bloody Runner.");

	if (D2JSP_UTIL_GEN_TypeOfNumber(
		TDW_BOT_ContextList["operation.exit.take.waypoint"]) &&
		D2JSP_AREA_HasWayPoint(
		TDW_BOT_ContextList["operation.exit.take.waypoint"])) {
		print("Will attempt to take a waypoint to " +
			D2JSP_AREA_AreaToName(
			TDW_BOT_ContextList["operation.exit.take.waypoint"]) + " ...");
		TDW_MOVE_WaypointUse(TDW_BOT_ContextList["operation.exit.take.waypoint"]);
	}

	if (D2JSP_UTIL_GEN_TypeOfString(
		TDW_BOT_ContextList["operation.exit.run.script"]) &&
		(TDW_BOT_ContextList["operation.exit.run.script"] != "")) {
		print("Will attempt to run the script '" +
			TDW_BOT_ContextList["operation.exit.run.script"] + "' ...");
		load(TDW_BOT_ContextList["operation.exit.run.script"]);
	}

	stop(1);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TDW_BOT_SUPP_DoMessageDNDSpec(msg_spec)
{
	if (D2JSP_UTIL_GEN_TypeOfString(msg_spec))
		return((D2JSP_UTIL_GEN_TypeOfStringNotEmpty(msg_spec)) ?
			TDW_BOT_SUPP_DoMessageDND(msg_spec) :
			TDW_BOT_SUPP_DoMessageDNDRandom());
	else if (D2JSP_UTIL_GEN_TypeOfArrayIndexed(msg_spec))
		return(TDW_BOT_SUPP_DoMessageDNDRandom(msg_spec));

	return(null);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TDW_BOT_SUPP_DoMessageDNDRandom(dnd_messages)
{
	var msg_list = (D2JSP_UTIL_GEN_TypeOfArrayIndexed(dnd_messages)) ?
		dnd_messages : ["Not now, please!", "peace & later", "busy now, thx",
		"see ya later alligator", "in a while crocodile", "talk witcha lata!"];

	return(TDW_BOT_SUPP_DoMessageDND(msg_list[rnd(0, msg_list.length - 1)]));
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TDW_BOT_SUPP_DoMessageDND(dnd_message)
{
	D2JSP_UTIL_BNET_SaySafe("/dnd " + dnd_message);

	return(dnd_message);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TDW_BOT_SUPP_DoMessageAwaySpec(msg_spec)
{
	if (D2JSP_UTIL_GEN_TypeOfString(msg_spec))
		return((D2JSP_UTIL_GEN_TypeOfStringNotEmpty(msg_spec)) ?
			TDW_BOT_SUPP_DoMessageAway(msg_spec) :
			TDW_BOT_SUPP_DoMessageAwayRandom());
	else if (D2JSP_UTIL_GEN_TypeOfArrayIndexed(msg_spec))
		return(TDW_BOT_SUPP_DoMessageAwayRandom(msg_spec));

	return(null);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TDW_BOT_SUPP_DoMessageAwayRandom(away_messages)
{
	var msg_list = (D2JSP_UTIL_GEN_TypeOfArrayIndexed(away_messages)) ?
		away_messages : ["Not now, please!", "peace & later", "busy now, thx",
		"see ya later alligator", "in a while crocodile", "talk witcha lata!"];

	return(TDW_BOT_SUPP_DoMessageAway(msg_list[rnd(0, msg_list.length - 1)]));
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TDW_BOT_SUPP_DoMessageAway(away_message)
{
	D2JSP_UTIL_BNET_SaySafe("/away " + away_message);

	return(away_message);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TDW_BOT_RUSH_QuestUnitResult(rusher_flag, source_obj_name, source_obj_id,
	source_obj_mode, quest_item_name, quest_item_id, snag_flag, source_obj_mode,
	quest_item_count, quest_coords)
{
	this.rusher_flag      = rusher_flag;
	this.source_obj_name  = source_obj_name;
	this.source_obj_id    = source_obj_id;
	this.source_obj_mode  = source_obj_mode;
	this.quest_item_name  = quest_item_name;
	this.quest_item_id    = quest_item_id;
	this.snag_flag        = snag_flag;
	this.source_obj_mode  = source_obj_mode;
	this.quest_item_count = quest_item_count;
	this.quest_coords     = quest_coords;
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TDW_BOT_RUSH_ManageQuestUnit(rusher_flag, source_obj_name,
	source_obj_id, source_obj_mode, quest_item_name, quest_item_id, snag_flag)
{
	var desired_spot     = [me.x, me.y];
	var quest_coords     = [desired_spot, desired_spot];
	var source_obj_mode  = null;
	var quest_item_count = 0;
	var say_status_func  = (typeof(TDW_RS_SayStatus) == "function") ?
		TDW_RS_SayStatus : print;
	var teleport_flags;

	teleport_flags = (rusher_flag) ? TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_ALL :
		TDW_BOT_SUPP_TP2DEST_FLAG_NONE;

	if (D2JSP_SKILL_CanTeleportHere())
		TDW_BOT_MOVE_TeleportToDestination(desired_spot, teleport_flags);
	else
		TDW_MOVE_MoveToXYPair(desired_spot);

	if (source_obj_id != null) {
		var source_unit = getUnit(D2JSP_UTIL_GETUNIT_OBJECT, source_obj_id);
		if (source_unit) {
			desired_spot    = [source_unit.x, source_unit.y];
			quest_coords   = [desired_spot, desired_spot];
			source_obj_name = ((source_obj_name == null) ||
				(source_obj_name == "")) ? source_unit.name : source_obj_name;
			source_obj_id   = source_unit.classid;
			source_obj_mode = (source_obj_mode != null) ? source_obj_mode :
				D2JSP_MODE_OBJECT_OPENED;
			if (D2JSP_SKILL_CanTeleportHere())
				TDW_BOT_MOVE_TeleportToDestination(desired_spot, teleport_flags);
			else
				TDW_MOVE_MoveToXYPair(desired_spot);
			if (source_unit.mode == D2JSP_MODE_OBJECT_IDLE) {
				say_status_func("Activating the " + source_obj_name + "...");
				D2JSP_UTIL_InteractObject(source_unit);
				if (source_unit.classid == 357) {
					delay(1000);
					D2JSP_UTIL_GEN_CancelNPC(source_unit);
					delay(250);
					D2JSP_UTIL_GEN_CancelNPC(source_unit);
					delay(250);
					D2JSP_UTIL_GEN_CancelNPC(source_unit);
				}
			}
if (source_obj_id == 149) {
	var tmp_string = "Quest Word 11 : ";
	for (var count_1 = 0; count_1 < 16; count_1++)
		tmp_string += me.getQuest(11, count_1);
	TDW_BOT_Log.logInfo(tmp_string);
}
			for (var count_1 = 0; count_1 < 8; count_1++) {
				if (rusher_flag) {
					TDW_BOT_MOVE_DoArrival(TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_ALL,
						desired_spot);
					TDW_BOT_MOVE_DoDeparture(TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_ALL,
						desired_spot);
				}
				delay(250);
				if (source_unit.mode == source_obj_mode)
					break;
			}
			if (source_unit.mode == source_obj_mode)
				say_status_func("The " + source_obj_name + " is open.");
			source_obj_mode = source_unit.mode;
		}
		else
			say_status_func("Hmmm... Can't find the " + source_obj_name + ".");
	}

	if (quest_item_id != null) {
		var results_data;
		for (var count_1 = 0; count_1 < 8; count_1++) {
			if (rusher_flag) {
				TDW_BOT_MOVE_DoArrival(TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_ALL,
					desired_spot);
				TDW_BOT_MOVE_DoDeparture(TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_ALL,
					desired_spot);
			}
			results_data = D2JSP_OBJ_IterateItem(null,
				D2JSP_OBJ_FilterHasParentFalse, D2JSP_OBJ_ActionStop,
				quest_item_id);
			if (results_data[D2JSP_OBJ_ACTION_COUNT])
				break;
			delay(250);
		}
		if (results_data[D2JSP_OBJ_ACTION_COUNT]) {
/*
			var quest_unit         = results_data[D2JSP_OBJ_LAST_OBJECT];
			var quest_unit_code    = quest_unit.code;
			var quest_unit_x       = quest_unit.x;
			var quest_unit_y       = quest_unit.y;
			var quest_unit_name    = quest_unit.name;
			var quest_unit_classid = quest_unit.classid;
 			desired_spot           = [quest_unit_x, quest_unit_y];
			quest_coords[1]        = desired_spot;
			quest_item_name        = ((quest_item_name == null) ||
				(quest_item_name == "")) ? quest_unit_name : quest_item_name;
			quest_item_id          = quest_unit_classid;
			if (D2JSP_SKILL_CanTeleportHere())
				TDW_BOT_MOVE_TeleportToDestination(desired_spot, teleport_flags);
			else
				TDW_MOVE_MoveToXYPair(desired_spot);
			var results_data = D2JSP_OBJ_IterateItem(null,
				D2JSP_OBJ_FilterHasParentFalse, D2JSP_OBJ_ActionContinue,
				quest_item_id, D2JSP_MODE_ITEM_ON_GROUND);
			quest_item_count = results_data[D2JSP_OBJ_ACTION_COUNT];
			say_status_func("Number of " + quest_item_name +
				" items available: " + quest_item_count);
			if (snag_flag) {
				var error_list = new Array();
				var isf_cfg    = ISF_Create([quest_unit_code], 0, error_list);
				if (isf_cfg)
					TDW_BOT_SUPP_MySnagIt(quest_coords[1], isf_cfg);
				else {
					while (error_list.length)
						TDW_BOT_Log.logError(error_list.shift());
					say_status_func("Unable to create a temporary ISF " +
						"configuration for the " + quest_item_name + ".");
				}
			}
*/
			results_data     = D2JSP_OBJ_IterateItem(null,
				D2JSP_OBJ_FilterHasParentFalse, D2JSP_OBJ_ActionContinue,
				quest_item_id, D2JSP_MODE_ITEM_ON_GROUND);
			quest_item_count = results_data[D2JSP_OBJ_ACTION_COUNT];
			say_status_func("Number of " + quest_item_name +
				" items available: " + quest_item_count);
			if (snag_flag) {
				var error_list = new Array();
				var isf_cfg    = ISF_Create([quest_item_id], 0, error_list);
				if (isf_cfg)
					TDW_BOT_SUPP_MySnagIt(quest_coords[1], isf_cfg);
				else {
					while (error_list.length)
						TDW_BOT_Log.logError(error_list.shift());
					say_status_func("Unable to create a temporary ISF " +
						"configuration for the " + quest_item_name + ".");
				}
			}
		}
		else
			say_status_func("Number of " + quest_item_name +
				" items available: 0");
	}

	return(new TDW_BOT_RUSH_QuestUnitResult(rusher_flag, source_obj_name,
		source_obj_id, source_obj_mode, quest_item_name, quest_item_id,
		snag_flag, source_obj_mode, quest_item_count, quest_coords));
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TDW_BOT_STUDY_ListNonPresetNPCs()
{
	TDW_BOT_Log.logInfo("=====================================================");
	TDW_BOT_Log.logInfo("Non-Preset NPCs for area " + me.area + " (" +
		D2JSP_AREA_AreaToName() + ")");
	TDW_BOT_Log.logInfo("-----------------------------------------------------");

	var npc_obj = getUnit(D2JSP_UTIL_GETUNIT_NPC);
	if (npc_obj) {
		do {
			var npc_parent  = npc_obj.getParent();
			var parent_name = (npc_parent) ? npc_parent.name : null;
			TDW_BOT_Log.logInfo("NPC classid = " + npc_obj.classid +
				", name = " + npc_obj.name + ", hp = " + npc_obj.hp +
				", hpmax = " + npc_obj.hpmax + ", mode = " + npc_obj.mode +
				", parent name = " + parent_name);
		} while (npc_obj && npc_obj.getNext());
	}

	TDW_BOT_Log.logInfo("=====================================================");
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TDW_BOT_STUDY_ListPresetNPCs(room_spec, unit_id_spec)
{
	var p_list = TDW_PATH_GetPresetList(room_spec, D2JSP_UTIL_GETUNIT_NPC,
		unit_id_spec);

	TDW_BOT_Log.logInfo("=====================================================");
	TDW_BOT_Log.logInfo("Preset NPCs for area " + me.area + " (" +
		D2JSP_AREA_AreaToName() + ")");
	TDW_BOT_Log.logInfo("-----------------------------------------------------");
/*
	for (var count_1 = 0; count_1 < p_list.length; count_1++)
		TDW_BOT_Log.logInfo("NPC : " + p_list[count_1].id + " = [" +
			p_list[count_1].area_x + ", " + p_list[count_1].area_y + "]");
*/
	var up_list = new Array();
	for (var count_1 = 0; count_1 < p_list.length; count_1++) {
		if (!((p_list[count_1].id + "") in up_list))
			up_list[p_list[count_1].id + ""] = new Array();
		up_list[p_list[count_1].id + ""].push(p_list[count_1]);
	}
	for (var this_prop in up_list) {
		TDW_BOT_Log.logInfo("NPC : " +
			D2JSP_UTIL_FORMAT_RJust(up_list[this_prop][0].id, 4) + ": " +
			D2JSP_UTIL_FORMAT_RJust(up_list[this_prop][0].room_number, 4) + ": " +
			D2JSP_UTIL_FORMAT_RJust(up_list[this_prop].length, 4) + ": [" +
			up_list[this_prop][0].area_x + ", " +
			up_list[this_prop][0].area_y + "]");
		for (var count_1 = 1; count_1 < up_list[this_prop].length; count_1++)
			TDW_BOT_Log.logInfo("NPC : " +
				"    " + ": " +
				D2JSP_UTIL_FORMAT_RJust(up_list[this_prop][count_1].room_number,
					4) + ": " +
				"    " + ": [" +
				up_list[this_prop][count_1].area_x + ", " +
				up_list[this_prop][count_1].area_y + "]");
	}
	TDW_BOT_Log.logInfo("=====================================================");

	return(p_list);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TDW_BOT_STUDY_ListPresetNPCsForRoomObj(room_obj)
{
	var p_list = room_obj.getPresetList(D2JSP_UTIL_GETUNIT_NPC);

	TDW_BOT_Log.logInfo("=====================================================");
	TDW_BOT_Log.logInfo("Preset NPCs for area " + me.area + " (" +
		D2JSP_AREA_AreaToName() + "), room number = " + room_obj.number);
	TDW_BOT_Log.logInfo("-----------------------------------------------------");
/*
	for (var count_1 = 0; count_1 < p_list.length; count_1++)
		TDW_BOT_Log.logInfo("NPC : " + p_list[count_1].id + " = [" +
			p_list[count_1].area_x + ", " + p_list[count_1].area_y + "]");
*/
	var up_list = new Array();
	for (var count_1 = 0; count_1 < p_list.length; count_1++) {
		if (!((p_list[count_1].id + "") in up_list))
			up_list[p_list[count_1].id + ""] = new Array();
		up_list[p_list[count_1].id + ""].push(p_list[count_1]);
	}
	for (var this_prop in up_list) {
		TDW_BOT_Log.logInfo("NPC : " +
			D2JSP_UTIL_FORMAT_RJust(up_list[this_prop][0].id, 4) + ": " +
			D2JSP_UTIL_FORMAT_RJust(up_list[this_prop][0].room_number, 4) + ": " +
			D2JSP_UTIL_FORMAT_RJust(up_list[this_prop].length, 4) + ": [" +
			up_list[this_prop][0].area_x + ", " +
			up_list[this_prop][0].area_y + "]");
		for (var count_1 = 1; count_1 < up_list[this_prop].length; count_1++)
			TDW_BOT_Log.logInfo("NPC : " +
				"    " + ": " +
				D2JSP_UTIL_FORMAT_RJust(up_list[this_prop][count_1].room_number,
					4) + ": " +
				"    " + ": [" +
				up_list[this_prop][count_1].area_x + ", " +
				up_list[this_prop][count_1].area_y + "]");
	}
	TDW_BOT_Log.logInfo("=====================================================");

	return(p_list);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
TDW_BOT_ConfigureList["operation.core.version.minimum"]     = null;
TDW_BOT_ConfigureList["operation.core.version.maximum"]     = null;
TDW_BOT_ConfigureList["operation.wait.ms.start"]            =    0;
TDW_BOT_ConfigureList["operation.wait.ms.exit"]             = 1000;
TDW_BOT_ConfigureList["operation.wait.ms.exit.in.town"]     = 3000;
TDW_BOT_ConfigureList["operation.public.speech"]            = false;
TDW_BOT_ConfigureList["operation.public.trust"]             = false;
TDW_BOT_ConfigureList["operation.d2jsp.me.showcast"]        = true;
TDW_BOT_ConfigureList["operation.exit.normal.stop"]         = false;
TDW_BOT_ConfigureList["operation.exit.take.waypoint"]       = D2JSP_AREA_NONE;
TDW_BOT_ConfigureList["operation.exit.run.script"]          = "";
TDW_BOT_ConfigureList["operation.tour"]                     = false;
TDW_BOT_ConfigureList["operation.party"]                    = true;
TDW_BOT_ConfigureList["operation.hostility.fight.softcore"] = true;
TDW_BOT_ConfigureList["operation.hostility.fight.hardcore"] = false;
// Note that the configuration option below is always set
// to the value specified by the above two options in the
// function TDW_BOT_CTX_ContextCreate() depending upon the
// value of the appropriate softcore/hardcore option.
TDW_BOT_ConfigureList["operation.hostility.fight"]          = false;
TDW_BOT_ConfigureList["operation.bot.name"]                 = null;
TDW_BOT_ConfigureList["operation.bot.config.file.name"]     = null;
TDW_BOT_ConfigureList["operation.bot.time.start"]           = new Date();
TDW_BOT_ConfigureList["operation.bot.time.end"]             = new Date();
TDW_BOT_ConfigureList["operation.log.file.name"]            = null;
TDW_BOT_ConfigureList["operation.log.configuration"]        = true;
TDW_BOT_ConfigureList["operation.log.special.npc.stats"]    = true;
TDW_BOT_ConfigureList["operation.log.special.npc.cluster"]  = true;
TDW_BOT_ConfigureList["operation.log.cluster"]              = false;
TDW_BOT_ConfigureList["operation.log.sync.mode"]            = false;
TDW_BOT_ConfigureList["operation.log.level.file"]           = D2JSP_UTIL_LOG_Level_INFO;
TDW_BOT_ConfigureList["operation.log.level.screen"]         = D2JSP_UTIL_LOG_Level_INFO;
TDW_BOT_ConfigureList["operation.quit.on.error"]            = false;
TDW_BOT_ConfigureList["operation.quit.on.hostile"]          = false;

	// These two parameters have the following semantics:
	//		1) If null, then no message of that type will be sent to BNet.
	//		2) If the empty string (""), a message will be chosen at random
	//			from the list of built-in messages.
	//		3) If an array of strings, a message will be chosen at random
	//			from that list.
TDW_BOT_ConfigureList["operation.bnet.message.dnd"]         = null;
TDW_BOT_ConfigureList["operation.bnet.message.away"]        = null;

//TDW_BOT_ConfigureList["skill.precast"]                      =
//	["Energy Shield", "Shiver Armor", "Thunder Storm"];
TDW_BOT_ConfigureList["skill.precast"]                      = new Array();

TDW_BOT_ConfigureList["skill.attack.ranged"]                = ["Frozen Orb"];
//TDW_BOT_ConfigureList["skill.attack.local"]                 = ["Nova"];
TDW_BOT_ConfigureList["skill.attack.local"]                 = ["Nova", "Nova", "Nova", "Nova", "Frost Nova"];
TDW_BOT_ConfigureList["skill.attack.remove"]                = ["Chain Lightning", "Lightning"];
TDW_BOT_ConfigureList["skill.attack.arrive.local.once"]     = ["Frost Nova"];
TDW_BOT_ConfigureList["skill.telekinesis.radius"]           = 30;

TDW_BOT_ConfigureList["teleport.step.size"]                 = 33;
TDW_BOT_ConfigureList["teleport.step.size.increase"]        = 5;
TDW_BOT_ConfigureList["teleport.step.size.max"]             = 160;
TDW_BOT_ConfigureList["teleport.step.fudge.step"]           = 10;
TDW_BOT_ConfigureList["teleport.step.fudge.final"]          = 3;

TDW_BOT_ConfigureList["mana.regen.percentage"]              = 50;

//TDW_BOT_ConfigureList["isf.configuration.file"]             = "settings/ISF.cfg";
TDW_BOT_ConfigureList["isf.configuration.file"]             = null;
TDW_BOT_ConfigureList["isf.configuration.file.sell"]        = null;
TDW_BOT_ConfigureList["isf.configuration.file.gamble"]      = null;
TDW_BOT_ConfigureList["isf.callback.function.field"]        = TDW_BOT_CHECK_DoChecksReturnZero;

TDW_BOT_ConfigureList["town.logic.repair.percent"]          = 75;
TDW_BOT_ConfigureList["town.logic.isf.stash"]               = TDW_BOT_MOVE_TownLogicStash;
TDW_BOT_ConfigureList["town.logic.isf.force.sales"]         = false;
TDW_BOT_ConfigureList["town.logic.isf.always.sell"]         = false;
TDW_BOT_ConfigureList["town.logic.minimum.tbk.count"]       = 1;
TDW_BOT_ConfigureList["town.logic.minimum.ibk.count"]       = 1;
TDW_BOT_ConfigureList["town.logic.belt.discard.unused"]     = true;

TDW_BOT_ConfigureList["mysnagit.radius"]                    = 35;
TDW_BOT_ConfigureList["mysnagit.gold.flag"]                 = true;
TDW_BOT_ConfigureList["mysnagit.gold.minimum"]              = 1000;
TDW_BOT_ConfigureList["mysnagit.pop.chests"]                = true;
TDW_BOT_ConfigureList["mysnagit.pop.chests.radius"]         = 20;
TDW_BOT_ConfigureList["mysnagit.pop.chests.maximum"]        = 5;
TDW_BOT_ConfigureList["mysnagit.pop.chests.flags"]          =
	ISF_CHEST_FLAG_TRAP | ISF_CHEST_FLAG_SPECIAL;
TDW_BOT_ConfigureList["mysnagit.pickup.belt.smart"]         = false;
TDW_BOT_ConfigureList["mysnagit.pickup.belt.simple"]        = true;

TDW_BOT_ConfigureList["snagit.active"]                      = false;
TDW_BOT_ConfigureList["snagit.ini"]                         = "settings/snagit.ini";
TDW_BOT_ConfigureList["chicken.me.hp"]                      = 35;
TDW_BOT_ConfigureList["chicken.me.mp"]                      = -1;
TDW_BOT_ConfigureList["chicken.mercenary.hp"]               = 25;
// These are new.
TDW_BOT_ConfigureList["town.revive.mercenary"]              = true;
TDW_BOT_ConfigureList["town.heal.me.hp"]                    = 75;
TDW_BOT_ConfigureList["town.heal.me.mp"]                    = 60;
TDW_BOT_ConfigureList["town.heal.mercenary.hp"]             = 45;

TDW_BOT_ConfigureList["potion.me.hp.health"]                = 75;
TDW_BOT_ConfigureList["potion.mercenary.hp.health"]         = 75;
TDW_BOT_ConfigureList["potion.me.hp.rejuvenation"]          = 50;
TDW_BOT_ConfigureList["potion.mercenary.hp.rejuvenation"]   = 35;

TDW_BOT_ConfigureList["mercernary.needed"]                  = true;

TDW_BOT_ConfigureList["skill.precast.data"]                 = new Array();
TDW_BOT_ConfigureList["skill.precast.data"][0]              = new Array();
TDW_BOT_ConfigureList["skill.precast.data"][1]              = new Array();

	// The number of NPCs within the minimum attack distance of a
	// special NPC which will trigger killing of those NPCs first.
TDW_BOT_ConfigureList["attack.special.npc.cluster.first.threshold.min"]  =   10;
	// The number of NPCs within the maximum attack distance of a
	// special NPC which will trigger killing of those NPCs first.
TDW_BOT_ConfigureList["attack.special.npc.cluster.first.threshold.max"]  =   30;

	// The distance from a special NPC's corpse within which a death
	// delay determination will be made. If less than or equal to 0,
	//	no such determination will be made.
TDW_BOT_ConfigureList["attack.special.npc.death.delay.distance"]         =   10;
	// The number of NPCs within attack.special.npc.death.delay.distance
	// of a special NPC's corpse which will trigger a death delay.
TDW_BOT_ConfigureList["attack.special.npc.death.delay.threshold"]        =    3;
	// The minimum number of milliseconds to delay before approaching
	// the corpse of a special NPC.
TDW_BOT_ConfigureList["attack.special.npc.death.delay.time.min"]         =    0;
	// The maximum number of milliseconds to delay before approaching
	// the corpse of a special NPC.
TDW_BOT_ConfigureList["attack.special.npc.death.delay.time.max"]         = 3000;

TDW_BOT_ConfigureList["attack.cluster.avoid.distance"]                   =    8;
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
// Pre-configures the bot context. Will be updated when the function
//	TDW_BOT_CTX_ContextCreate() is invoked during initialization...
TDW_BOT_ContextList = new D2JSP_UTIL_CTX_Context(null, TDW_BOT_ConfigureList);
// ////////////////////////////////////////////////////////////////////////////

delay(1);
runGC();
delay(1);

} // if (typeof(TDW_INCLUDE_GUARD_BotSupport_d2l) == "undefined") {

// ////////////////////////////////////////////////////////////////////////////
// ////////////////////////////////////////////////////////////////////////////
//
//	Regression tests. Change the conditional to 'true' to run.
//
// ////////////////////////////////////////////////////////////////////////////
if (false) {
function main() {
	var count_1;
	var count_2;
	var file_name = "output/RegressionTest.TDW_BotSupport.d2l.txt";
	var file_handle;

	print("Writing 'TDW_BotSupport.d2l' regression test output file to '" +
		file_name + "'.");

	file_handle = fileOpen(file_name, 1);

	TEST_CalcTeleportStep(file_handle);

	if (file_handle) {
		for (var this_prop in TDW_PATHL_EnemyList)
			file_handle.writeLine("TDW_PATHL_EnemyList[" + this_prop + "]");
		file_handle.close();
		print("File written.");
	}
	else
		print("Unable to open file '" + file_name + "' for writing!");

	print("Regression test completed.");

	stop();
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TEST_CalcTeleportStep(file_handle)
{
	var step_size      = 10;
	var new_location   = [me.x, me.y];
	var final_location = [new_location[0] - 100, new_location[1] - 40];

	do {
		new_location = TDW_BOT_MOVE_CalculateTeleportStepBasic(new_location,
			final_location, step_size);
		file_handle.writeLine("FINAL = [" + final_location + "], CURRENT = [" +
			new_location + "], DISTANCE = " +
			Dist(final_location[0], final_location[1],
			new_location[0], new_location[1]));
	} while (Dist(final_location[0], final_location[1],
		new_location[0], new_location[1]) > 3);
	file_handle.writeLine("===================================================");
//	print("STOPPING");
//	stop();

	if (me.area != D2JSP_AREA_ARCANE_SANCTUARY) {
		print("ERROR: Not in the " +
			D2JSP_AREA_AreaToName(D2JSP_AREA_ARCANE_SANCTUARY) + ".");
		return;
	}

	var wp_obj = getUnit(D2JSP_UTIL_GETUNIT_OBJECT, "waypoint");

	if (!wp_obj) {
		print("ERROR: Unable to location the waypoin in the " +
			D2JSP_AREA_AreaToName(D2JSP_AREA_ARCANE_SANCTUARY) + ".");
		return;
	}

	var room_list = new D2JSP_RoomList();
	var map_list  = room_list.getStringList();

	file_handle.writeLine("===================================================");

	for (var count_1 = 0; count_1 < TDW_BOT_PATH_ArcaneMoveList_All.length;
		count_1++) {
		var step_size      = 10;
		var new_location   = [wp_obj.x, wp_obj.y];
		for (var count_2 = 0; count_2 <
			TDW_BOT_PATH_ArcaneMoveList_All[count_1][1].length; count_2++) {
			var final_location = [
				TDW_BOT_PATH_ArcaneMoveList_All[count_1][1][count_2][0],
				TDW_BOT_PATH_ArcaneMoveList_All[count_1][1][count_2][1]];
			do {
				new_location = TDW_BOT_MOVE_CalculateTeleportStepBasic(new_location,
					final_location, step_size);
				file_handle.writeLine(count_1 + ":" + count_2 + ":" +
					"FINAL = [" + final_location + "], CURRENT = [" +
					new_location + "], DISTANCE = " +
					Dist(final_location[0], final_location[1],
					new_location[0], new_location[1]));
				var row = new_location[1] - room_list.y_1;
				var col = new_location[0] - room_list.x_1;
				map_list[row] = map_list[row].substr(0, col) +
					"ABCDEFGHIJKLMNOPQRSTUVWXYZ".charAt(count_2) +
					map_list[row].substr(col + 1);
			} while (Dist(final_location[0], final_location[1],
				new_location[0], new_location[1]) > 3);
		}
	}

	file_handle.writeLine("===================================================");
	while (map_list.length)
		file_handle.writeLine(map_list.shift());
	file_handle.writeLine("===================================================");
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function D2JSP_AREA_TEST_WriteSep(file_handle)
{
	file_handle.writeLine(
"// /////////////////////////////////////////////////////////////////////////");
}
// ////////////////////////////////////////////////////////////////////////////
} // if (false) {
// ////////////////////////////////////////////////////////////////////////////

























// ////////////////////////////////////////////////////////////////////////////
function TDW_BOT_MOVE_DefaultAccessStrategyAStar(access_strategy, ascb_type,
	ascb_data, other_data)
{
	var return_code = 0;

	TDW_BOT_Log.logDebug("TDW_BOT_MOVE_DefaultAccessStrategyAStar(): " +
		"Entry with ASCB type = " + ascb_type);

	access_strategy.__PRIVATE__doPreFunc(ascb_type, ascb_data, other_data);

	switch (ascb_type) {
		case TDW_PATH_ASCB_MSG_STATUS					:
			if (typeof(TDW_RS_SayStatus) == "function")
				TDW_RS_SayStatus(ascb_data);
			else
				D2JSP_UTIL_LOG_GetALog().logInfo(ascb_data);
			break;
		case TDW_PATH_ASCB_MSG_WARNING				:
			if (typeof(TDW_RS_SayError) == "function")
				TDW_RS_SayError(ascb_data);
			else
				D2JSP_UTIL_LOG_GetALog().logWarningColor(ascb_data);
			break;
		case TDW_PATH_ASCB_MSG_ERROR					:
			if (typeof(TDW_RS_SayError) == "function")
				TDW_RS_SayError(ascb_data);
			else
				D2JSP_UTIL_LOG_GetALog().logErrorColor(ascb_data);
			break;
		case TDW_PATH_ASCB_GOTO_XYPAIR				:
		case TDW_PATH_ASCB_GOTO_XYPAIR_LOCAL		:
			var this_distance = D2JSP_SYLIB_myDistPair(ascb_data);
//			if (D2JSP_AREA_IsTown())
//				TDW_MOVE_MoveToXYPair(ascb_data);
			if (D2JSP_AREA_IsTown())
				TDW_MOVE_COMPAT_TownMoveXY(D2JSP_AREA_GetAct(),
					ascb_data[0], ascb_data[1]);
/*
			else if (this_distance < 2)
				TDW_MOVE_MoveToXYPair(ascb_data);
*/
			else if (this_distance < 1)
				;
			else if (this_distance < 10)
				TDW_BOT_MOVE_TeleportToDestination(ascb_data,
					access_strategy.action_flags);
			else
				return_code = TDW_BOT_MOVE_GotoXYPairAStar(ascb_data,
					(D2JSP_AREA_IsComplex()) ? TDW_PATH_MAP_BUILD_FLAG_NONE :
					TDW_PATH_MAP_BUILD_FLAG_NO_ACCESS_CHECK,
					(D2JSP_UTIL_GEN_TypeOfNumber(other_data) ||
					(other_data instanceof TDW_BOT_ATTACK_MoveControl)) ?
					other_data : access_strategy.move_control);
			break;
		case TDW_PATH_ASCB_GOTO_XYPAIR_LOCAL_ONLY	:
				TDW_BOT_MOVE_TeleportToDestination(ascb_data,
					access_strategy.action_flags);
			break;
		case TDW_PATH_ASCB_AREA_CHANGE				:
			if (!D2JSP_AREA_IsTown())
				TDW_BOT_CHECK_PrecastChecks();
			break;
		case TDW_PATH_ASCB_EXIT_TOWN					:
			TDW_BOT_CHECK_PrecastChecks(30000);
			break;
		case TDW_PATH_ASCB_ENTER_TOWN					:
			TDW_BOT_MOVE_TownLogic(TDW_BOT_MOVE_TOWN_FLAG_NONE, TDW_ISF_Cfg);
			break;
		default												:
			break;
	}

	access_strategy.__PRIVATE__doPostFunc(ascb_type, ascb_data, other_data);

	return(return_code);
}
// ////////////////////////////////////////////////////////////////////////////

// From Scav's Multi-Bot...
// ////////////////////////////////////////////////////////////////////////////
function TDW_BOT_MOVE_GotoXYPairAStar(in_pair, path_flags, move_control)
{
	return(TDW_BOT_MOVE_GotoXYAStar(in_pair[0], in_pair[1], path_flags, move_control));
}
// ////////////////////////////////////////////////////////////////////////////

// Adapted from Scav's Multi MF Bot
// ////////////////////////////////////////////////////////////////////////////
function TDW_BOT_MOVE_GotoXYAStar(in_x, in_y, path_flags, move_control)
{
	if (!(move_control instanceof TDW_BOT_ATTACK_MoveControl)) {
//TDW_BOT_Log.logInfo("***** TDW_BOT_MOVE_GotoXY(): typeof move_control =  " +
//	typeof(move_control));
		move_control = (D2JSP_UTIL_GEN_TypeOfNumber(move_control)) ? move_control :
			TDW_BOT_SUPP_TP2DEST_FLAG_NONE;
		move_control = new TDW_BOT_ATTACK_MoveControl(move_control);
	}
//else
//	TDW_BOT_Log.logInfo("***** TDW_BOT_MOVE_GotoXY() HAVE A VALID MOVE CONTROL OBJECT");

	var target    = new coord();
//	var builddist = 30;
	var builddist = TDW_BOT_ContextList["teleport.step.size"];

	target.set(in_x, in_y);
	
	TDW_BOT_Log.logDebug("Going to build the path");

	var astar_path = TDW_PATH_ASTAR_FindPath(me.area, null, [in_x, in_y],
		path_flags | TDW_PATH_MAP_BUILD_FLAG_NO_DIAGONAL);
	if (!astar_path) {
		TDW_BOT_Log.logError("Unable to build the path.");
		return(-1);
	}

//	astar_path.toLog();

	// //////////////////////////////////////////////////////////////////////
	// Build a Scav-type path...
	var path = new Array();
	var this_coord;
	for (var count_1 = 0; count_1 < astar_path.node_list.length; count_1++) {
//		var center = astar_path.node_list[count_1].room_obj.getCenterAccessible();
		var center = astar_path.node_list[count_1].room_obj.getCenter();
		if (!center) {
			TDW_BOT_Log.logErrorColor("Unimplemented features resulted in a " +
				"TDW A* pathing failure at node [" + astar_path.node_list[count_1] +
				"] (index " + count_1 + "): No accessible center found.");
			TDW_BOT_Log.logErrorColor("Log will be written.");
			astar_path.toLog();
			return(-1);
		}
		this_coord = new coord();
		this_coord.set(center[0], center[1]);
		path.push(this_coord);
	}
	this_coord = new coord();
	this_coord.set(in_x, in_y);
	path.push(this_coord);
	// //////////////////////////////////////////////////////////////////////

	TDW_BOT_Log.logDebug("Going to teleport the path");
	TDW_BOT_MOVE_ScavTeleportPathAStar(path, move_control);
	
	TDW_BOT_Log.logDebug("Going to teleport to target: (" + target.x + "," + target.y + ")");
	if (!(move_control.action_flags & TDW_BOT_SUPP_TP2DEST_FLAG_AVOID_NPCS_FINAL))
		TDW_BOT_MOVE_ScavTeleport_1(target.x, target.y, 8);
	else {
		var this_path_item = TDW_BOT_MOVE_FindSafeTeleport(target.x, target.y,
			move_control);
		TDW_BOT_MOVE_ScavTeleport_1(this_path_item[0], this_path_item[1], 8);
/*
TDW_BOT_Log.logInfo("***** FINAL DODGE: [" + target.x + "," + target.y +
	"] TO [" + this_path_item + "] (distance = " +
	Dist(target.x, target.y, this_path_item[0], this_path_item[1]) + ")");
*/
	}
//	D2JSP_SKILL_TeleportTo(target.x, target.y);
	
//	TDW_BOT_MOVE_TeleportToDestination([target.x, target.y], TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_NONE);

	TDW_BOT_Log.logDebug("GotoXY done");

	return(0);
}
// ////////////////////////////////////////////////////////////////////////////

// Adapted from Scav's Multi MF Bot
// ////////////////////////////////////////////////////////////////////////////
function TDW_BOT_MOVE_ScavTeleportPathAStar(path, move_control)
{

//move_control.action_flags |= TDW_BOT_SUPP_TP2DEST_FLAG_AVOID_NPCS;

/*
	for (var i = 0; i < path.length; i++) {
		if (!path[i].x && !path[i].y)
			break;
		if (move_control.action_flags & TDW_BOT_SUPP_TP2DEST_FLAG_MASK)
			TDW_BOT_MOVE_DoDeparture(move_control.action_flags, null, move_control);
		if ((move_control.action_flags & TDW_BOT_SUPP_TP2DEST_FLAG_AVOID_NPCS) &&
			TDW_PATH_MapGlobal.area_list[me.area])
			TDW_BOT_MOVE_AvoidNPCs([path[i].x, path[i].y], move_control)
		else
			TDW_BOT_MOVE_ScavTeleport_1(path[i].x, path[i].y, 15);
		if (move_control.action_flags & TDW_BOT_SUPP_TP2DEST_FLAG_MASK)
			TDW_BOT_MOVE_DoArrival(move_control.action_flags, null, move_control);
//		D2JSP_SKILL_TeleportTo(path[i].x, path[i].y);
//		TDW_BOT_MOVE_TeleportToDestination([path[i].x, path[i].y], true);
	}
*/
	for (var i = 0; i < path.length; i++) {
		if (!path[i].x && !path[i].y)
			break;
		var step_size_list = [5, 2, 1];
		var this_path_item = [path[i].x, path[i].y];
		if (move_control.action_flags & TDW_BOT_SUPP_TP2DEST_FLAG_MASK)
			TDW_BOT_MOVE_DoDeparture(move_control.action_flags, null, move_control);
/*
TDW_BOT_Log.logInfo("***** MOVE NO AVOID FLAG = " +
	(move_control.action_flags & TDW_BOT_SUPP_TP2DEST_FLAG_NO_AVOID_NPCS));
if (!(move_control.action_flags & TDW_BOT_SUPP_TP2DEST_FLAG_NO_AVOID_NPCS))
	D2JSP_UTIL_LogCallStack();
*/
		if ((!(move_control.action_flags & TDW_BOT_SUPP_TP2DEST_FLAG_NO_AVOID_NPCS)) &&
			TDW_PATH_MapGlobal.area_list[me.area]) {
			for (var count_1 = 0; count_1 < step_size_list.length; count_1++) {
				var move_cell = TDW_THREAT_FindSafestSpot(this_path_item,
					move_control.threat_move_spec, 0, step_size_list[count_1]);
				if (move_cell) {
					this_path_item = [move_cell.x, move_cell.y];
					break;
				}
/*
TDW_BOT_Log.logInfoQuiet("***** FOUND SAFEST SPOT: was [" +
	path[i].x + "," + path[i].y + "], now [" + this_path_item + "]");
*/
			}
/*
TDW_BOT_Log.logInfo("A:[" + path[i].x + "," + path[i].y + "] ---> [" + this_path_item +
	"], dist = " + Dist(path[i].x, path[i].y, this_path_item[0], this_path_item[1]));
*/
		}
		TDW_BOT_MOVE_ScavTeleport_1_AStar(this_path_item[0], this_path_item[1]);
		if (move_control.action_flags & TDW_BOT_SUPP_TP2DEST_FLAG_ACTIONS)
			TDW_BOT_MOVE_DoArrival(move_control.action_flags, this_path_item,
				move_control);
//		D2JSP_SKILL_TeleportTo(path[i].x, path[i].y);
//		TDW_BOT_MOVE_TeleportToDestination([path[i].x, path[i].y], true);
	}
}
// ////////////////////////////////////////////////////////////////////////////

// Adapted from Scav's Multi MF Bot
// ////////////////////////////////////////////////////////////////////////////
function TDW_BOT_MOVE_ScavTeleport_1_AStar(x, y, mindist, retry)
{
	// MLB 2003-05-27
	var teledist_base = 25;

	if (!mindist || mindist < 3)
		mindist = 5;
	
	if (!retry)
		retry = 10;	// default 10 retries	
	retry++;
	
	TDW_BOT_MOVE_ScavSetSkill("Teleport", 0);
	
	var target = new coord(x,y);
	var pos = new coord(me);
	var lastpos = new coord(me);
	var dist,dir;
	
	while(pos.dist(x, y) > mindist) {
		// MLB 2003-05-27
		var teledist = teledist_base + rnd(0,5);
		pos.set(me);
		dir = pos.dir(target);

		if (dir.x == 0 && dir.y == 0)
			return true;
		
		if (lastpos.dist(me) < 3) {
			lastpos.data++;
			if (lastpos.data > 2)
				dir.rotate(-90, 90);
		}
		else
			lastpos.data = 0;
		
		lastpos.set(me);
		if (target.dist(me) > teledist)
			pos.move(dir, teledist);
		else {
			pos.set(target);
		}
		
		TDW_BOT_Log.logDebug("Teleporting to " + pos);
		me.useSkillAt(pos.x, pos.y, 0);
		delay(50);
		while(me.mode == 10)
			delay(50);
		
		retry--;
		// MLB 2003-05-27
		teledist_base += 10;
		//delay(castdelay);
		if (target.dist(me) <= mindist)
			return true;
		
//		CheckSelf();
		TDW_BOT_CHECK_DoChecks();
		TDW_BOT_Log.logDebug("TDW_BOT_CHECK_DoChecks() in teleport done");
	}
}
// ////////////////////////////////////////////////////////////////////////////

// Adapted from Scav's Multi MF Bot
// ////////////////////////////////////////////////////////////////////////////
function TDW_BOT_MOVE_ScavTeleport_2_AStar(x, y, mindist, retry)
{
	// MLB 2003-05-27
	var teledist_base = 25;

	if (!mindist || mindist < 3)
		mindist = 5;
	
	if ((retry < 1) || (retry > 50) || (retry == null))
		retry = 10;	// default 10 retries	
	retry++;

	TDW_BOT_MOVE_ScavSetSkill("Teleport", 0);
	
	var target  = new coord(x,y);
	var pos     = new coord(me);
	var lastpos = new coord(me);
	var dist,dir;
	
//	while(pos.dist(x, y) > mindist) {
	while(Dist(me.x, me.y, x, y) > mindist) {
		// MLB 2003-05-27
		var teledist = teledist_base + rnd(0,5);
		pos.set(me);
		dir = pos.dir(target);

		if (dir.x == 0 && dir.y == 0)
{
//TDW_BOT_Log.logInfo("***** AVOID NPCS: Teleport exit direction = 0 (distance = " +
//	pos.dist(x, y) + ", retry = " + retry + ")");
			return true;
}
		
		if (lastpos.dist(me) < 3) {
			lastpos.data++;
			if (lastpos.data > 2)
				dir.rotate(-90, 90);
		}
		else
			lastpos.data = 0;
		
		lastpos.set(me);
		if (target.dist(me) > teledist)
			pos.move(dir, teledist);
		else {
			pos.set(target);
		}
		
		TDW_BOT_Log.logDebug("Teleporting to " + pos);
//TDW_BOT_Log.logInfo("***** AVOID NPCS: Teleporting to [" +
//	pos.x + "," + pos.y + "]");
		me.useSkillAt(pos.x, pos.y, 0);
		delay(50);
		while(me.mode == 10)
			delay(50);
		
		retry--;
		// MLB 2003-05-27
		teledist_base += 10;
		//delay(castdelay);
		if (target.dist(me) <= mindist)
{
//TDW_BOT_Log.logInfo("***** AVOID NPCS: Teleport exit minimum distance (distance = " +
//	pos.dist(x, y) + ", retry = " + retry + ")");
			return true;
}
		
//		CheckSelf();
		TDW_BOT_CHECK_DoChecks();
		TDW_BOT_Log.logDebug("TDW_BOT_CHECK_DoChecks() in teleport done");
		if (retry < 1) {
			TDW_BOT_Log.logError("Teleport failed.");
			return(false);
		}
	}

//TDW_BOT_Log.logInfo("***** AVOID NPCS: Teleport exit normal (distance 1 = " +
//	pos.dist(x, y) + ", retry = " + retry + ")");

	return(true);
}
// ////////////////////////////////////////////////////////////////////////////

// Adapted from Scav's Multi MF Bot
// ////////////////////////////////////////////////////////////////////////////
function TDW_BOT_MOVE_ScavSetSkill(skill, hand)
{
	me.setSkill(skill, hand);
	
	var timer = 2000;
	while(me.getSkill(hand).toLowerCase() != skill.toLowerCase() && timer >= 0) {
		delay(50);
		timer -= 50;
	}
	if (timer < 0)
		return false;
	
	return true;
}
// ////////////////////////////////////////////////////////////////////////////























