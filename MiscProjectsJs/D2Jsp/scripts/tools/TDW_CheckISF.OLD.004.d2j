// ////////////////////////////////////////////////////////////////////////////
// ////////////////////////////////////////////////////////////////////////////
// Necessary include files...
// ////////////////////////////////////////////////////////////////////////////
include("TDW/_D2JSP_Utility.d2l");

includeonce("TDW/_D2JSP_States.d2l");
includeonce("TDW/ISF.d2l");
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function main()
{
	var my_log     = new D2JSP_UTIL_Log("output/TDW_CheckISF." + me.realm +
		"." + me.account + "." + me.name + ".log", "CheckISF");
	var error_list = new Array();
	var isf_cfg;

	D2JSP_UTIL_GEN_CheckGameReady();

	my_log.logInfo("Loading ISF configuration file " +
		"'settings/ISF.cfg'...");
	if (!(isf_cfg = ISF_Create("settings/ISF.cfg", 0, error_list))) {
		while (error_list.length)
			D2JSP_UTIL_LOG_GetALog().logError(error_list.shift());
		D2JSP_UTIL_LOG_GetALog().logError("Load of ISF configuration file " +
			"'settings/ISF.cfg' failed.");
	}
	else
		TEST_ISF_ScanAll(isf_cfg, my_log);

	my_log.closeLog();

	print("Done");

}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TEST_ISF_ScanAll(isf_cfg, my_log)
{
	var isf_flags    = ISF_EVAL_FLAG_RETURN_SOURCE_INFO;
	var pickup_count = 0;
	var this_item;
	var this_parent;
	var this_string;

	my_log.logInfo("My ISF object is an 'ISF_Cfg' object: " +
		(isf_cfg instanceof ISF_Cfg));
	my_log.logInfo("My ISF configuration: " + isf_cfg);
	my_log.logInfo("My ISF version: " + isf_cfg.getVersion());
	my_log.logInfo("My ISF source list count: " + isf_cfg.getSourceList().length);
	my_log.logInfo("My ISF spec list count: [" + isf_cfg.getSpecList().length + "]");
	my_log.logInfo("My ISF code has specs for '7gr'?: [" + isf_cfg.getCode("7qr") + "]");
	my_log.logInfo("My ISF first spec: [" + isf_cfg.getSpec(0) + "]");

	my_log.logInfo("If every item in the game were to drop on the ground unided...");
	this_item = getUnit(D2JSP_UTIL_GETUNIT_ITEM);

	// Note: Unless your ISF configuration includes such specifications as:
	//
	//		category armor : IsRuneWord=true
	//		category weapon : IsRuneWord=true
	//
	// Any legit RuneWords (or Iths) will be reported as "wouldn't pick up'.
	//
	// Also, high-powered rares such as Corruption Grip are ignored unless
	// your configuration looks for items with those stats.
	if (this_item) {
		do {
if (false) {
			this_parent = this_item.getParent();
//			if (this_parent && (this_parent.name == me.name) &&
if (true &&
				((this_item.code == "amu") || (this_item.code == "rin") ||
				(D2JSP_ITEM_ItemList[this_item.code][D2JSP_ITEM_ELEMENT_CATEGORY] !=
				"M"))) {
				var eval_p = isf_cfg.evalItemForPickup(this_item, isf_flags);
				var eval_i = isf_cfg.evalItemForId(this_item, isf_flags);
				var eval_k = isf_cfg.evalItemForKeep(this_item, isf_flags);
				if (eval_p[0]) {
					this_string = "I'd pickup the " +
						(((this_item.quality < D2JSP_ITEM_QUALITY_MAGIC) ||
						this_item.getFlag(D2JSP_ITEMFLAG_IDENTIFIED)) ?
						D2JSP_ITEM_ColorItemFixFName(this_item) :
                  D2JSP_ITEM_ColorItemFullName(this_item)) + " --- ";
					if (!this_item.getFlag(D2JSP_ITEMFLAG_IDENTIFIED)) {
						if (eval_i[0])
							this_string += "and id it to see if it's worth keeping.";
						else
							this_string += "and keep it unidentified.";
					}
					else if (this_item.quality >= D2JSP_ITEM_QUALITY_MAGIC)
						this_string += ((eval_k[0]) ? "and " :
							"but not") + " keep it after identifying it.";
					else
						this_string += ((eval_k[0]) ? "and keep it." :
							"but I wouldn't keep it.");
					my_log.logInfo(this_string);
					if (eval_p[0])
						my_log.logInfoQuiet("           PICKUP: " +
							isf_cfg.getSpecString(eval_p[1]));
					if (eval_i[0])
						my_log.logInfoQuiet("           ID    : " +
							isf_cfg.getSpecString(eval_i[1]));
					if (eval_k[0])
						my_log.logInfoQuiet("           KEEP  : " +
							isf_cfg.getSpecString(eval_k[1]));
				}
				else
					my_log.logInfo("I wouldn't pickup the " +
						D2JSP_ITEM_ColorItemFixFName(this_item) + ".");
			}
}
else
			TEST_ISF_ScanItem(isf_cfg, my_log, this_item);
		} while (this_item && this_item.getNext());
	}
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TEST_ISF_ScanItem(isf_cfg, my_log, in_item)
{
	var isf_flags    = ISF_EVAL_FLAG_RETURN_SOURCE_INFO;
	var pickup_count = 0;

//	var this_item    = copyUnit(in_item);
	var this_item    = new D2JSP_UTIL_GEN_UnitCloneItem(in_item);
	var this_string;

/*
for (var this_prop in this_item)
	my_log.logInfo(this_prop + " = " + this_item[this_prop]);
print("STOPPING");
stop();
*/
	// Note: Unless your ISF configuration includes such specifications as:
	//
	//		category armor : IsRuneWord=true
	//		category weapon : IsRuneWord=true
	//
	// Any legit RuneWords (or Iths) will be reported as "wouldn't pick up'.
	//
	// Also, high-powered rares such as Corruption Grip are ignored unless
	// your configuration looks for items with those stats.
	if ((this_item.code == "amu") || (this_item.code == "rin") ||
		(D2JSP_ITEM_ItemList[this_item.code][D2JSP_ITEM_ELEMENT_CATEGORY] !=
		"M")) {
/*
	if (true &&
		((this_item.code == "amu") || (this_item.code == "rin") ||
		(D2JSP_ITEM_ItemList[this_item.code][D2JSP_ITEM_ELEMENT_CATEGORY] !=
		"M"))) {
*/
		var eval_p = isf_cfg.evalItem(ISF_COMPILED_DATA_PICKUP, this_item, isf_flags);
		var eval_i = isf_cfg.evalItemForId(this_item, isf_flags);
		var eval_k = isf_cfg.evalItemForKeep(this_item, isf_flags);
		if (eval_p[0]) {
			this_string = "I'd pickup the " +
				(((this_item.quality < D2JSP_ITEM_QUALITY_MAGIC) ||
				this_item.getFlag(D2JSP_ITEMFLAG_IDENTIFIED)) ?
				D2JSP_ITEM_ColorItemFixFName(this_item) :
				D2JSP_ITEM_ColorItemFullName(this_item)) + " --- ";
			if (!this_item.getFlag(D2JSP_ITEMFLAG_IDENTIFIED)) {
				if (eval_i[0])
					this_string += "and id it to see if it's worth keeping.";
				else
					this_string += "and keep it unidentified.";
			}
			else if (this_item.quality >= D2JSP_ITEM_QUALITY_MAGIC) {
				var eval_p_2 =isf_cfg.evalItemForPickup(this_item, isf_flags);
				if (!eval_k[0]) 
					this_string += "but not keep it after identifying it.";
				else {
					if (eval_p[0] && eval_p_2[0])
						this_string += "and keep it unidentified.";
					else
						this_string += "but not keep it after identifying it.";
				}
			}
			else
				this_string += ((eval_k[0]) ? "and keep it." :
					"but I wouldn't keep it.");
			my_log.logInfo(this_string);
			if (eval_p[0])
				my_log.logInfoQuiet("           PICKUP: " +
					isf_cfg.getSpecString(eval_p[1]));
			if (eval_i[0])
				my_log.logInfoQuiet("           ID    : " +
					isf_cfg.getSpecString(eval_i[1]));
			if (eval_k[0])
				my_log.logInfoQuiet("           KEEP  : " +
					isf_cfg.getSpecString(eval_k[1]));
		}
		else
			my_log.logInfo("I wouldn't pickup the " +
				D2JSP_ITEM_ColorItemFixFName(this_item) + ".");
	}
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function D2JSP_UTIL_GEN_UnitCloneItem(in_unit)
{
	this._parent     = in_unit.getParent();
	this._item_flags = D2JSP_ITEMFLAG_GetFlagsForItem(in_unit);
	this._base_stats = new Array(D2JSP_BASESTAT_COUNT);
	this._enchants   = new Array(64);
	this._states     = new Array(D2JSP_STATE_COUNT);
	this._stats      = new Array(D2JSP_STAT_COUNT);

	for (var this_prop in in_unit)
		this[this_prop] = in_unit[this_prop];

	for (var count_1 = D2JSP_BASESTAT_MINIMUM;
		count_1 <= D2JSP_BASESTAT_MAXIMUM; count_1++)
		this._base_stats[count_1] = in_unit.getBaseStat(count_1);

	for (var count_1 = 0; count_1 < 64; count_1++)
		this._enchants[count_1] = in_unit.getEnchant(count_1);

	for (var count_1 = D2JSP_STATE_MINIMUM; count_1 <= D2JSP_STATE_MAXIMUM;
		count_1++)
		this._states[count_1] = in_unit.getState(count_1);

	for (var count_1 = D2JSP_STAT_MINIMUM; count_1 <= D2JSP_STAT_MAXIMUM;
		count_1++)
		this._stats[count_1] = in_unit.getStat(count_1);

	this.getParent   = D2JSP_UTIL_GEN_UnitItemClone_getParent;
	this.getFlag     = D2JSP_UTIL_GEN_UnitItemClone_getFlag;
	this.getBaseStat = D2JSP_UTIL_GEN_UnitItemClone_getBaseStat;
	this.getEnchant  = D2JSP_UTIL_GEN_UnitItemClone_getEnchant;
	this.getState    = D2JSP_UTIL_GEN_UnitItemClone_getState;
	this.getStat     = D2JSP_UTIL_GEN_UnitItemClone_getStat;

	function D2JSP_UTIL_GEN_UnitItemClone_getParent() {
		return(this._parent);
	}

	function D2JSP_UTIL_GEN_UnitItemClone_getFlag(selector) {
		return(selector & this._item_flags);
	}

	function D2JSP_UTIL_GEN_UnitItemClone_getBaseStat(selector) {
		return(((selector >= D2JSP_BASESTAT_MINIMUM) &&
			(selector <= D2JSP_BASESTAT_MAXIMUM)) ?
			this._base_stats[selector] : null);
	}

	function D2JSP_UTIL_GEN_UnitItemClone_getEnchant(selector) {
		return(((selector >= 0) && (selector < this._enchants.length)) ?
			this._enchants[selector] : null);
	}

	function D2JSP_UTIL_GEN_UnitItemClone_getState(selector) {
		return(((selector >= D2JSP_STATE_MINIMUM) &&
			(selector <= D2JSP_STATE_MAXIMUM)) ?
			this._states[selector] : null);
	}

	function D2JSP_UTIL_GEN_UnitItemClone_getStat(selector) {
		return(((selector >= D2JSP_STAT_MINIMUM) &&
			(selector <= D2JSP_STAT_MAXIMUM)) ?
			this._stats[selector] : null);
	}
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function hostilemsgHandler()
{
	runGC();
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function partymsgHandler()
{
	runGC();
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function gamemsgHandler()
{
	runGC();
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function keypressHandler()
{
	runGC();
}
// ////////////////////////////////////////////////////////////////////////////


