// ////////////////////////////////////////////////////////////////////////////
// ////////////////////////////////////////////////////////////////////////////
// Required include files...
// ////////////////////////////////////////////////////////////////////////////
include("TDW/_D2JSP_Utility.d2l");

includeonce("TDW/ISF.d2l");
includeonce("TDW/_D2JSP_ItemTypes.d2l");
includeonce("BMpwnIt.d2l");
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function main()
{
	var src_file_name = "settings\\ISF.cfg";
	var par_file_name = src_file_name + ".PARSE.txt";
	var dst_file_name = src_file_name + ".RESULTS.txt";
	var id_file_name  = src_file_name + ".ID.txt";
	var isf_cfg       = new Array();
	var item_list     = new Array();
	var error_list    = new Array();
	var eval_index    = ISF_COMPILED_DATA_EVAL;
	var parse_list    = new Array();
	var count_1;
	var count_2;
	var id_list;
	var this_code;
	var return_code;
	var file_handle;

	print("Waiting 3 seconds for game load to complete...");
	delay(3000);

	print("Loading ISF configuration file '" + src_file_name + "'...");

	if (!(return_code =
		ISF_LoadConfigFromFile(src_file_name,
		ISF_PARSE_FLAG_CONTINUE_ON_ERROR, error_list, isf_cfg))) {
		print("Opening ISF parse file '" + par_file_name + "'...");
		print("Opening ISF results file '" + dst_file_name + "'...");
		if ((file_handle = fileOpen(dst_file_name, 1)) != null) {
			print("Writing inventory analysis to results file...");
			ISF_TEST_EvalStuff(isf_cfg, file_handle);
			file_handle.close();
			print("Done");
		}
		else {
			print("Unable to open '" + dst_file_name + "' for writing.");
			return_code = -1;
		}
		print("Opening ISF id linkage file '" + id_file_name + "'...");
		if ((file_handle = fileOpen(id_file_name, 1)) != null) {
			print("Writing item linkage list to id file...");
			id_list = new Array();
			for (this_code in isf_cfg[ISF_COMPILED_DATA_ID])
				id_list.push(this_code);
			id_list.sort();
			for (count_1 = 0; count_1 < id_list.length; count_1++) {
				this_code = id_list[count_1];
				for (count_2 = 0; count_2 <
					isf_cfg[ISF_COMPILED_DATA_ID][this_code].length; count_2++)
					file_handle.writeLine(((!count_2) ? this_code : "   ") +
						" = " +
						isf_cfg[ISF_COMPILED_DATA_SPEC_LIST]
						[isf_cfg[ISF_COMPILED_DATA_ID][this_code][count_2]].
						sourceStringFromISF(isf_cfg));
			}
			file_handle.close();
			print("Done");
		}
		else {
			print("Unable to open '" + id_file_name + "' for writing.");
			return_code = -1;
		}
		if ((file_handle = fileOpen(par_file_name, 1)) != null) {
			print("Writing ISF to parse file...");
			parse_list = ISF_TEST_EmitConfig(isf_cfg);
			while (parse_list.length)
				file_handle.writeLine(parse_list.shift());
			file_handle.close();
			print("Done");
		}
		else {
			print("Unable to open '" + par_file_name + "' for writing.");
			return_code = -1;
		}
	}
	else {
		print("Errors occurred:");
		print("------ ---------");
		while (error_list.length)
			print(">>>" + error_list.shift());
	}

	return(return_code);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function ISF_TEST_EvalStuff(isf_cfg, file_handle)
{
	var out_count = 0;
	var this_item = getUnit(D2JSP_UTIL_GETUNIT_ITEM);
	var this_parent;
	var results_data;

	if (this_item) {
		do {
			this_parent = this_item.getParent();
			if (this_parent && (this_parent.name == me.name)) {
				if ((results_data = ISF_EvalItemForPickup(isf_cfg, this_item,
					ISF_EVAL_FLAG_RETURN_SOURCE_INFO))[0] == true)
					file_handle.writeLine(this_item.code + " = PICKUP = " +
						D2JSP_UTIL_FORMAT_LJust(D2JSP_ITEM_GetItemFName(this_item),
						40) + " ---> " +
						isf_cfg[ISF_COMPILED_DATA_SPEC_LIST][results_data[1]].
						sourceStringFromISF(isf_cfg));
				if ((results_data = ISF_EvalItemForId(isf_cfg, this_item,
					ISF_EVAL_FLAG_RETURN_SOURCE_INFO))[0] == true)
					file_handle.writeLine(this_item.code + " = ID     = " +
						D2JSP_UTIL_FORMAT_LJust(D2JSP_ITEM_GetItemFName(this_item),
						40) + " ---> " +
						isf_cfg[ISF_COMPILED_DATA_SPEC_LIST][results_data[1]].
						sourceStringFromISF(isf_cfg));
				if ((results_data = ISF_EvalItemForKeep(isf_cfg, this_item,
					ISF_EVAL_FLAG_RETURN_SOURCE_INFO))[0] == true)
					file_handle.writeLine(this_item.code + " = KEEP   = " +
						D2JSP_UTIL_FORMAT_LJust(D2JSP_ITEM_GetItemFName(this_item),
						40) + " ---> " +
						isf_cfg[ISF_COMPILED_DATA_SPEC_LIST][results_data[1]].
						sourceStringFromISF(isf_cfg));
				out_count++;
			}
		} while (this_item && this_item.getNext());
	}

	return(out_count);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function ISF_TEST_EmitConfig(isf_cfg)
{
	var out_list = new Array();

	out_list = ISF_TEST_EmitConfigBasic(ISF_COMPILED_DATA_PICKUP,
		isf_cfg);

	return(out_list.concat(ISF_TEST_EmitConfigBasic(
		ISF_COMPILED_DATA_EVAL, isf_cfg)));
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function ISF_TEST_EmitConfigBasic(eval_index, isf_cfg)
{
	var out_list = new Array();
	var this_code;
	var this_prior;
	var count_1;

	for (this_prior = 0; this_prior < isf_cfg[eval_index].length; this_prior++) {
		for (this_code in isf_cfg[eval_index][this_prior]) {
			for (count_1 = 0;
				count_1 < isf_cfg[eval_index][this_prior][this_code].length;
				count_1++) {
				out_list.push("; " + ((eval_index == ISF_COMPILED_DATA_EVAL) ?
					"EVALUATE: " : "PICKUP  : ") + this_prior + "\t" + this_code +
					"\t" + count_1 + "\t" + 
					isf_cfg[eval_index][this_prior][this_code][count_1][1] + "\t" +
					isf_cfg[ISF_COMPILED_DATA_SPEC_LIST][isf_cfg[eval_index]
						[this_prior][this_code][count_1][0]].
						sourceStringFromISF(isf_cfg));
			}
		}
	}

	return(out_list);
}
// ////////////////////////////////////////////////////////////////////////////


