// .killnpc corpsefire coldcrow bonebreaker raven bish raka griz treehead countess smith pitspawn ash andy
// TDW_PATHL_AREA_LOAD_FLAG_DEFAULT
// TDW_PATH_GotoTargetArea
// TDW_PATH_ConstructTargetList
// TDW_BOTLIB_ClearArea
var TDW_RS_NPCEnchant22List = new Array();
var TDW_RS_NPCTourList = new Array();
/*
Special Chests:
------- -------
397 is preset!!!
---------------------------------------------------------
397	-	Area  13	-	XXX-XXX	-	Cave Level 2
397	-	Area  18	-	147-150	-	Crypt
			Bonebreaker
397	-	Area  19	-	151-154	-	Mausoleum
			Blade Feast
397	-	Area  14	-	103-107	-	Underground Passage 2
397	-	Area  15	-	103-107	-	Hole Level 2
397	-	Area  16	-	103-107	-	Pit Level 2

355	-	Area  49	-	341-344	-	Act 2 Sewers 3			-	Horadric Scroll Chest
397	-	Area  59	-	472-475	-	Stony Tomb 2
354	-	Area  60	-	456-459	-	Halls of the Dead 3	-	Horadrice Cube Chest
356	-	Area  64	-	509		-	Maggot Lair 3			-	Staff of Kings Chest
 87	-	Area  44	-	409		-	Lost City
397	-	Area  65	-	349-352	-	Ancient Tunnels
397	-	Area XXX	-	472-475	-	Tal Rasha's Tombs (Not true Tomb)

397	-	Area  84	-	663-664	-	Arachnid Lair			-	"Sparklychest"
407	-	Area  85	-	663-664	-	Spider Cavern			-	"Khalimchest"
397	-	Area  77	-	585-594	-	Great Marsh				-	"Sparklychest"
			*** There are two sparklychests in the Great Marsh
397	-	Area  90	-	703-704	-	Swampy Pit 3			-	"Sparklychest"
406	-	Area  91	-	703-704	-	Flayer Dungeon 3		-	"Khalimchest"
397	-	Area  92	-	743-746	-	Act 3 Sewers 1			-	"Sparklychest"
405	-	Area  93	-	747		-	Act 3 Sewers 2			-	"Khalimchest"
181	-	Area 102	-	XXX-XXX	-	Durance 3				-	Chest behind Mephisto

455	-	Area 115	-	XXX-XXX	-	Glacial Trail			-	"Specialchest"
			Bonesaw Breaker
397	-	Area 116	-	XXX-XXX	-	Drifter Cavern			-	"Sparklychest"
397	-	Area 119	-	XXX-XXX	-	Icy Cellar				-	"Sparklychest"
			Snapchip Shatter
397	-	Area 127	-	XXX-XXX	-	The 3 Act 5 Hells		-	"Sparklychest"
======================================================
The chests in the Spider Cave[ern] are in room # [663-664]
======================================================

Act 3 Gidbinn in same clearing type rooms as Flayer Dungeon
Classid = 252
Mode = 2 if already opened.
-----------------------
Hell1 portal back to Frigid Highlands: [12948.  6128]
Hell2 portal back to Arreat Plateau:	[12638.  7873]
Hell3 portal back to Frozen Tundra:		[12638.  9373]
-----------------------
Sewer exits to Kurast Bazzar
737/59
738/58
-----------------------
Sewer exits to Upper Kurast
735/59
736/58
-----------------------
Act 3 attack consideration NPCs:
NPC Name      : River Stalker (two classids)

NPC Class ID  : 259
NPC Class ID  : 262

Act 3 and Act 4 attack consideration NPCs:
NPC Name      : Gloam

NPC Class ID  : 118

*/

/*
	Ancients Info:
	-------- -----
*** BEFORE THE ALTAR IS ACTIVATED
-------------------------------------------------------------------------------
Object Name      : Ancient Statue 3
Object Parent    : *NONE*
Object Owner     : 0
Object Owner Type: 0
Object ID        : 78929116
Object GID       : 109
-------------------------------------------------------------------------------
Object Name      : Ancient Statue 2
Object Parent    : *NONE*
Object Owner     : 0
Object Owner Type: 0
Object ID        : 78929116
Object GID       : 110
-------------------------------------------------------------------------------
Object Name      : Ancient Statue 1
Object Parent    : *NONE*
Object Owner     : 0
Object Owner Type: 0
Object ID        : 78929116
Object GID       : 112
-------------------------------------------------------------------------------
Object Name      : ancientsaltar
Object Parent    : *NONE*
Object Owner     : 0
Object Owner Type: 0
Object ID        : 78929116
Object GID       : 111
Object Class ID  : 546

*** AFTER THE ALTAR IS ACTIVATED
-------------------------------------------------------------------------------
NPC Name      : Madawc
NPC Parent    : *NONE*
NPC Owner     : -1
NPC Owner Type: 0
NPC ID        : 70496128
NPC GID       : 80
-------------------------------------------------------------------------------
NPC Name      : Korlic
NPC Parent    : *NONE*
NPC Owner     : -1
NPC Owner Type: 0
NPC ID        : 70496128
NPC GID       : 81
-------------------------------------------------------------------------------
NPC Name      : Talic
NPC Parent    : *NONE*
NPC Owner     : -1
NPC Owner Type: 0
NPC ID        : 70496128
NPC GID       : 82
*/

include("TDW/TDW_BotLib.d2l");

// ////////////////////////////////////////////////////////////////////////////
TDW_BOT_ConfigureList["tdw.bot.rush.server.wait.for.party"] = false;
//TDW_BOT_ConfigureList["tdw.bot.rush.server.wait.for.party"] = true;
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
var TDW_RUSH_QuestRequestReady = false;
var TDW_RUSH_QuestRequest      = new Array();
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
var TDW_RS_FinalDelayReady         = false;
var TDW_RS_FinalDelayCancelPending = false;
var TDW_RS_FinalDelayLastKey       = null;

const TDW_RS_FinalDelayKeyCancel   = 187;		// This is the equals key ('=').
const TDW_RS_FinalDelayKeyConfirm  = 187;
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
var TDW_RS_ActQuestList = [
	[  TDW_RS_DoAct1_DenOfEvil,
		TDW_RS_DoAct1_BloodRaven,
		null,
		TDW_RS_DoAct1_Countess,
		TDW_RS_DoAct1_TheSmith,
		TDW_RS_DoAct1_Andariel
	],
	[	TDW_RS_DoAct2_Radament,
		TDW_RS_DoAct2_HallsOfTheDead,
//		TDW_RS_DoAct2_MaggotLair,
		TDW_RS_DoAct2_ClawViperTemple,
		TDW_RS_DoAct2_Arcane,
		TDW_RS_DoAct2_Summoner,
		TDW_RS_DoAct2_TalRashaTomb
	],
	[  null,
		null,
		null,
		TDW_RS_DoAct3_LamEsensTome,
		TDW_RS_DoAct3_Council,
		TDW_RS_DoAct3_Mephisto
	],
	[  TDW_RS_DoAct4_Izual,
		TDW_RS_DoAct4_HellForge,
		TDW_RS_DoAct4_Diablo
	],
	[  TDW_RS_DoAct5_Shenk,
		TDW_RS_DoAct5_Rescue,
		TDW_RS_DoAct5_Anya,
		TDW_RS_DoAct5_Pindleskin,
		TDW_RS_DoAct5_Ancients,
		TDW_RS_DoAct5_Baal
	]
];
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
var TDW_RS_AllQuestList = [
	[  [TDW_RS_DoAct1_DenOfEvil],
		[TDW_RS_DoAct1_BloodRaven],
		[TDW_RS_DoAct1_TreeOfInifuss, TDW_RS_DoAct1_CairnStones, TDW_RS_DoAct1_CainGibbit],
		[TDW_RS_DoAct1_Countess],
		[TDW_RS_DoAct1_TheSmith],
		[TDW_RS_DoAct1_Andariel]
	],
	[	[TDW_RS_DoAct2_Radament],
		[TDW_RS_DoAct2_HallsOfTheDead, TDW_RS_DoAct2_MaggotLair],
		[TDW_RS_DoAct2_ClawViperTemple],
		[TDW_RS_DoAct2_Arcane],
		[TDW_RS_DoAct2_Summoner],
		[TDW_RS_DoAct2_TalRashaTomb, TDW_RS_DoAct2_Duriel]
	],
	[  [],
		[],
		[TDW_RS_DoAct3_KhalimsWill_Eye, TDW_RS_DoAct3_KhalimsWill_Heart, TDW_RS_DoAct3_KhalimsWill_Brain],
		[TDW_RS_DoAct3_LamEsensTome],
		[TDW_RS_DoAct3_Council],
		[TDW_RS_DoAct3_Mephisto]
	],
	[  [TDW_RS_DoAct4_Izual],
		[TDW_RS_DoAct4_HellForge],
		[TDW_RS_DoAct4_Diablo]
	],
	[  [TDW_RS_DoAct5_Shenk],
		[TDW_RS_DoAct5_Rescue],
		[TDW_RS_DoAct5_Anya],
		[TDW_RS_DoAct5_Pindleskin],
		[TDW_RS_DoAct5_Ancients],
		[TDW_RS_DoAct5_Baal]
	]
];
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
var TDW_RS_RQNameList = new Array();
TDW_RS_RQNameList["a1q1"]                    = TDW_RS_ActQuestList[0][0];
TDW_RS_RQNameList["a1q2"]                    = TDW_RS_ActQuestList[0][1];
TDW_RS_RQNameList["a1q3"]                    = TDW_RS_ActQuestList[0][2];
TDW_RS_RQNameList["a1q4"]                    = TDW_RS_ActQuestList[0][3];
TDW_RS_RQNameList["a1q5"]                    = TDW_RS_ActQuestList[0][4];
TDW_RS_RQNameList["a1q6"]                    = TDW_RS_ActQuestList[0][5];
TDW_RS_RQNameList["den of evil"]             = TDW_RS_ActQuestList[0][0];
TDW_RS_RQNameList["den"]                     = TDW_RS_ActQuestList[0][0];
TDW_RS_RQNameList["sisters' burial grounds"] = TDW_RS_ActQuestList[0][1];
TDW_RS_RQNameList["sister's burial grounds"] = TDW_RS_ActQuestList[0][1];
TDW_RS_RQNameList["sisters burial grounds"]  = TDW_RS_ActQuestList[0][1];
TDW_RS_RQNameList["sister burial grounds"]   = TDW_RS_ActQuestList[0][1];
TDW_RS_RQNameList["burial grounds"]          = TDW_RS_ActQuestList[0][1];
TDW_RS_RQNameList["burial"]                  = TDW_RS_ActQuestList[0][1];
TDW_RS_RQNameList["blood raven"]             = TDW_RS_ActQuestList[0][1];
TDW_RS_RQNameList["bloodraven"]              = TDW_RS_ActQuestList[0][1];
TDW_RS_RQNameList["raven"]                   = TDW_RS_ActQuestList[0][1];
TDW_RS_RQNameList["tree of inifuss"]         = TDW_RS_DoAct1_TreeOfInifuss;
TDW_RS_RQNameList["tree of inifus"]          = TDW_RS_DoAct1_TreeOfInifuss;
TDW_RS_RQNameList["tree inifuss"]            = TDW_RS_DoAct1_TreeOfInifuss;
TDW_RS_RQNameList["tree inifus"]             = TDW_RS_DoAct1_TreeOfInifuss;
TDW_RS_RQNameList["inifuss tree"]            = TDW_RS_DoAct1_TreeOfInifuss;
TDW_RS_RQNameList["inifus tree"]             = TDW_RS_DoAct1_TreeOfInifuss;
TDW_RS_RQNameList["inifuss"]                 = TDW_RS_DoAct1_TreeOfInifuss;
TDW_RS_RQNameList["inifus"]                  = TDW_RS_DoAct1_TreeOfInifuss;
TDW_RS_RQNameList["tree"]                    = TDW_RS_DoAct1_TreeOfInifuss;
TDW_RS_RQNameList["scroll of inifuss"]       = TDW_RS_DoAct1_TreeOfInifuss;
TDW_RS_RQNameList["scroll of inifus"]        = TDW_RS_DoAct1_TreeOfInifuss;
TDW_RS_RQNameList["scroll inifuss"]          = TDW_RS_DoAct1_TreeOfInifuss;
TDW_RS_RQNameList["scroll inifus"]           = TDW_RS_DoAct1_TreeOfInifuss;
TDW_RS_RQNameList["inifuss scroll"]          = TDW_RS_DoAct1_TreeOfInifuss;
TDW_RS_RQNameList["inifus scroll"]           = TDW_RS_DoAct1_TreeOfInifuss;
TDW_RS_RQNameList["scroll"]                  = TDW_RS_DoAct1_TreeOfInifuss;
TDW_RS_RQNameList["cairn"]                   = TDW_RS_DoAct1_CairnStones;
TDW_RS_RQNameList["stones"]                  = TDW_RS_DoAct1_CairnStones;
TDW_RS_RQNameList["stone"]                   = TDW_RS_DoAct1_CairnStones;
TDW_RS_RQNameList["cairn stones"]            = TDW_RS_DoAct1_CairnStones;
TDW_RS_RQNameList["cairn stone"]             = TDW_RS_DoAct1_CairnStones;
TDW_RS_RQNameList["cain"]                    = TDW_RS_DoAct1_CainGibbit;
TDW_RS_RQNameList["gibbit"]                  = TDW_RS_DoAct1_CainGibbit;
TDW_RS_RQNameList["tristram"]                = TDW_RS_DoAct1_CainGibbit;
TDW_RS_RQNameList["the forgotten tower"]     = TDW_RS_RQNameList["a1q4"];
TDW_RS_RQNameList["forgotten tower"]         = TDW_RS_RQNameList["a1q4"];
TDW_RS_RQNameList["tower"]                   = TDW_RS_RQNameList["a1q4"];
TDW_RS_RQNameList["the countess"]            = TDW_RS_RQNameList["a1q4"];
TDW_RS_RQNameList["countess"]                = TDW_RS_RQNameList["a1q4"];
TDW_RS_RQNameList["the smith"]               = TDW_RS_RQNameList["a1q5"];
TDW_RS_RQNameList["smith"]                   = TDW_RS_RQNameList["a1q5"];
TDW_RS_RQNameList["the malus"]               = TDW_RS_RQNameList["a1q5"];
TDW_RS_RQNameList["malus"]                   = TDW_RS_RQNameList["a1q5"];
TDW_RS_RQNameList["tools of the trade"]      = TDW_RS_RQNameList["a1q5"];
TDW_RS_RQNameList["tools of trade"]          = TDW_RS_RQNameList["a1q5"];
TDW_RS_RQNameList["tools"]                   = TDW_RS_RQNameList["a1q5"];
TDW_RS_RQNameList["andariel"]                = TDW_RS_RQNameList["a1q6"];
TDW_RS_RQNameList["andy"]                    = TDW_RS_RQNameList["a1q6"];
TDW_RS_RQNameList["andi"]                    = TDW_RS_RQNameList["a1q6"];

TDW_RS_RQNameList["a2q1"]                    = TDW_RS_ActQuestList[1][0];
TDW_RS_RQNameList["a2q2"]                    = TDW_RS_ActQuestList[1][1];
TDW_RS_RQNameList["a2q3"]                    = TDW_RS_ActQuestList[1][2];
TDW_RS_RQNameList["a2q4"]                    = TDW_RS_ActQuestList[1][3];
TDW_RS_RQNameList["a2q5"]                    = TDW_RS_ActQuestList[1][4];
TDW_RS_RQNameList["a2q6"]                    = TDW_RS_ActQuestList[1][5];
TDW_RS_RQNameList["radament"]                = TDW_RS_RQNameList["a2q1"];
TDW_RS_RQNameList["rada"]                    = TDW_RS_RQNameList["a2q1"];
TDW_RS_RQNameList["radi"]                    = TDW_RS_RQNameList["a2q1"];
TDW_RS_RQNameList["atma"]                    = TDW_RS_RQNameList["a2q1"];
TDW_RS_RQNameList["radamant"]                = TDW_RS_RQNameList["a2q1"];
TDW_RS_RQNameList["horadric cube"]           = TDW_RS_DoAct2_HallsOfTheDead;
TDW_RS_RQNameList["cube"]                    = TDW_RS_DoAct2_HallsOfTheDead;
TDW_RS_RQNameList["halls of the dead"]       = TDW_RS_DoAct2_HallsOfTheDead;
TDW_RS_RQNameList["halls of dead"]           = TDW_RS_DoAct2_HallsOfTheDead;
TDW_RS_RQNameList["staff of kings"]          = TDW_RS_DoAct2_MaggotLair;
TDW_RS_RQNameList["staff"]                   = TDW_RS_DoAct2_MaggotLair;
TDW_RS_RQNameList["maggot lair"]             = TDW_RS_DoAct2_MaggotLair;
TDW_RS_RQNameList["maggot"]                  = TDW_RS_DoAct2_MaggotLair;
TDW_RS_RQNameList["amulet"]                  = TDW_RS_DoAct2_ClawViperTemple;
TDW_RS_RQNameList["viper amulet"]            = TDW_RS_DoAct2_ClawViperTemple;
TDW_RS_RQNameList["amulet of the viper"]     = TDW_RS_DoAct2_ClawViperTemple;
TDW_RS_RQNameList["amulet of viper"]         = TDW_RS_DoAct2_ClawViperTemple;
TDW_RS_RQNameList["headpiece"]               = TDW_RS_DoAct2_ClawViperTemple;
TDW_RS_RQNameList["head piece"]              = TDW_RS_DoAct2_ClawViperTemple;
TDW_RS_RQNameList["claw viper temple"]       = TDW_RS_DoAct2_ClawViperTemple;
TDW_RS_RQNameList["claw viper"]              = TDW_RS_DoAct2_ClawViperTemple;
TDW_RS_RQNameList["claw"]                    = TDW_RS_DoAct2_ClawViperTemple;
TDW_RS_RQNameList["viper"]                   = TDW_RS_DoAct2_ClawViperTemple;
TDW_RS_RQNameList["arcane sanctuary"]        = TDW_RS_ActQuestList[1][3];
TDW_RS_RQNameList["arcane"]                  = TDW_RS_ActQuestList[1][3];
TDW_RS_RQNameList["harem"]                   = TDW_RS_ActQuestList[1][3];
TDW_RS_RQNameList["palace"]                  = TDW_RS_ActQuestList[1][3];
TDW_RS_RQNameList["the summoner"]            = TDW_RS_ActQuestList[1][4];
TDW_RS_RQNameList["summoner"]                = TDW_RS_ActQuestList[1][4];
TDW_RS_RQNameList["tomb"]                    = TDW_RS_DoAct2_TalRashaTomb;
TDW_RS_RQNameList["orifice"]                 = TDW_RS_DoAct2_TalRashaTomb;
TDW_RS_RQNameList["duriel's lair"]           = TDW_RS_DoAct2_Duriel;
TDW_RS_RQNameList["duriels lair"]            = TDW_RS_DoAct2_Duriel;
TDW_RS_RQNameList["duriel"]                  = TDW_RS_DoAct2_Duriel;
TDW_RS_RQNameList["durial"]                  = TDW_RS_DoAct2_Duriel;
TDW_RS_RQNameList["duri"]                    = TDW_RS_DoAct2_Duriel;
TDW_RS_RQNameList["dury"]                    = TDW_RS_DoAct2_Duriel;

TDW_RS_RQNameList["a3q1"]                    = TDW_RS_ActQuestList[2][0];
TDW_RS_RQNameList["a3q2"]                    = TDW_RS_ActQuestList[2][1];
TDW_RS_RQNameList["a3q3"]                    = TDW_RS_ActQuestList[2][2];
TDW_RS_RQNameList["a3q4"]                    = TDW_RS_ActQuestList[2][3];
TDW_RS_RQNameList["a3q5"]                    = TDW_RS_ActQuestList[2][4];
TDW_RS_RQNameList["a3q6"]                    = TDW_RS_ActQuestList[2][5];
TDW_RS_RQNameList["khalim's eye"]            = TDW_RS_DoAct3_KhalimsWill_Eye;
TDW_RS_RQNameList["khalims eye"]             = TDW_RS_DoAct3_KhalimsWill_Eye;
TDW_RS_RQNameList["khalim eye"]              = TDW_RS_DoAct3_KhalimsWill_Eye;
TDW_RS_RQNameList["eye"]                     = TDW_RS_DoAct3_KhalimsWill_Eye;
TDW_RS_RQNameList["khalim's heart"]          = TDW_RS_DoAct3_KhalimsWill_Heart;
TDW_RS_RQNameList["khalims heart"]           = TDW_RS_DoAct3_KhalimsWill_Heart;
TDW_RS_RQNameList["khalim heart"]            = TDW_RS_DoAct3_KhalimsWill_Heart;
TDW_RS_RQNameList["heart"]                   = TDW_RS_DoAct3_KhalimsWill_Heart;
TDW_RS_RQNameList["khalim's brain"]          = TDW_RS_DoAct3_KhalimsWill_Brain;
TDW_RS_RQNameList["khalims brain"]           = TDW_RS_DoAct3_KhalimsWill_Brain;
TDW_RS_RQNameList["khalim brain"]            = TDW_RS_DoAct3_KhalimsWill_Brain;
TDW_RS_RQNameList["brain"]                   = TDW_RS_DoAct3_KhalimsWill_Brain;
TDW_RS_RQNameList["lam esen's tome"]         = TDW_RS_ActQuestList[2][3];
TDW_RS_RQNameList["lam esens tome"]          = TDW_RS_ActQuestList[2][3];
TDW_RS_RQNameList["lam esen tome"]           = TDW_RS_ActQuestList[2][3];
TDW_RS_RQNameList["lam esen's book"]         = TDW_RS_ActQuestList[2][3];
TDW_RS_RQNameList["lam esens book"]          = TDW_RS_ActQuestList[2][3];
TDW_RS_RQNameList["lam esen book"]           = TDW_RS_ActQuestList[2][3];
TDW_RS_RQNameList["lam esen's"]              = TDW_RS_ActQuestList[2][3];
TDW_RS_RQNameList["lam esen"]                = TDW_RS_ActQuestList[2][3];
TDW_RS_RQNameList["black book"]              = TDW_RS_ActQuestList[2][3];
TDW_RS_RQNameList["the ruined temple"]       = TDW_RS_ActQuestList[2][3];
TDW_RS_RQNameList["ruined temple"]           = TDW_RS_ActQuestList[2][3];
TDW_RS_RQNameList["travincal"]               = TDW_RS_ActQuestList[2][4];
TDW_RS_RQNameList["trav"]                    = TDW_RS_ActQuestList[2][4];
TDW_RS_RQNameList["the blackened temple"]    = TDW_RS_ActQuestList[2][4];
TDW_RS_RQNameList["blackened temple"]        = TDW_RS_ActQuestList[2][4];
TDW_RS_RQNameList["the high council"]        = TDW_RS_ActQuestList[2][4];
TDW_RS_RQNameList["high council"]            = TDW_RS_ActQuestList[2][4];
TDW_RS_RQNameList["the council"]             = TDW_RS_ActQuestList[2][4];
TDW_RS_RQNameList["council"]                 = TDW_RS_ActQuestList[2][4];
TDW_RS_RQNameList["flail"]                   = TDW_RS_ActQuestList[2][4];
TDW_RS_RQNameList["mephisto"]                = TDW_RS_ActQuestList[2][5];
TDW_RS_RQNameList["meph"]                    = TDW_RS_ActQuestList[2][5];
TDW_RS_RQNameList["mephi"]                   = TDW_RS_ActQuestList[2][5];
TDW_RS_RQNameList["mephy"]                   = TDW_RS_ActQuestList[2][5];

TDW_RS_RQNameList["a4q1"]                    = TDW_RS_ActQuestList[3][0];
TDW_RS_RQNameList["a4q2"]                    = TDW_RS_ActQuestList[3][1];
TDW_RS_RQNameList["a4q3"]                    = TDW_RS_ActQuestList[3][2];
TDW_RS_RQNameList["izual"]                   = TDW_RS_ActQuestList[3][0];
TDW_RS_RQNameList["izzy"]                    = TDW_RS_ActQuestList[3][0];
TDW_RS_RQNameList["izzi"]                    = TDW_RS_ActQuestList[3][0];
TDW_RS_RQNameList["the fallen angel"]        = TDW_RS_ActQuestList[3][0];
TDW_RS_RQNameList["fallen angel"]            = TDW_RS_ActQuestList[3][0];
TDW_RS_RQNameList["the angel"]               = TDW_RS_ActQuestList[3][0];
TDW_RS_RQNameList["angel"]                   = TDW_RS_ActQuestList[3][0];
TDW_RS_RQNameList["hell forge"]              = TDW_RS_ActQuestList[3][1];
TDW_RS_RQNameList["hellforge"]               = TDW_RS_ActQuestList[3][1];
TDW_RS_RQNameList["forge"]                   = TDW_RS_ActQuestList[3][1];
TDW_RS_RQNameList["soul stone"]              = TDW_RS_ActQuestList[3][1];
TDW_RS_RQNameList["soulstone"]               = TDW_RS_ActQuestList[3][1];
TDW_RS_RQNameList["hephasto the armorer"]    = TDW_RS_ActQuestList[3][1];
TDW_RS_RQNameList["hephasto"]                = TDW_RS_ActQuestList[3][1];
TDW_RS_RQNameList["heph"]                    = TDW_RS_ActQuestList[3][1];
TDW_RS_RQNameList["diablo"]                  = TDW_RS_ActQuestList[3][2];
TDW_RS_RQNameList["big d"]                   = TDW_RS_ActQuestList[3][2];

TDW_RS_RQNameList["a5q1"]                    = TDW_RS_ActQuestList[4][0];
TDW_RS_RQNameList["a5q2"]                    = TDW_RS_ActQuestList[4][1];
TDW_RS_RQNameList["a5q3"]                    = TDW_RS_ActQuestList[4][2];
TDW_RS_RQNameList["a5q4"]                    = TDW_RS_ActQuestList[4][3];
TDW_RS_RQNameList["a5q5"]                    = TDW_RS_ActQuestList[4][4];
TDW_RS_RQNameList["a5q6"]                    = TDW_RS_ActQuestList[4][5];
TDW_RS_RQNameList["shenk the overseer"]      = TDW_RS_ActQuestList[4][0];
TDW_RS_RQNameList["shrenk the overseer"]     = TDW_RS_ActQuestList[4][0];
TDW_RS_RQNameList["shenk overseer"]          = TDW_RS_ActQuestList[4][0];
TDW_RS_RQNameList["shrenk overseer"]         = TDW_RS_ActQuestList[4][0];
TDW_RS_RQNameList["shenk"]                   = TDW_RS_ActQuestList[4][0];
TDW_RS_RQNameList["shrenk"]                  = TDW_RS_ActQuestList[4][0];
TDW_RS_RQNameList["overseer"]                = TDW_RS_ActQuestList[4][0];
TDW_RS_RQNameList["rescue on mount arreat"] 	= TDW_RS_ActQuestList[4][1];
TDW_RS_RQNameList["rescue on mt. arreat"]   	= TDW_RS_ActQuestList[4][1];
TDW_RS_RQNameList["rescue on mt arreat"]     = TDW_RS_ActQuestList[4][1];
TDW_RS_RQNameList["rescue barbarians"]       = TDW_RS_ActQuestList[4][1];
TDW_RS_RQNameList["rescue barbs"]            = TDW_RS_ActQuestList[4][1];
TDW_RS_RQNameList["rescue"]                  = TDW_RS_ActQuestList[4][1];
TDW_RS_RQNameList["barbarians"]              = TDW_RS_ActQuestList[4][1];
TDW_RS_RQNameList["barbs"]                   = TDW_RS_ActQuestList[4][1];
TDW_RS_RQNameList["prison of ice"]           = TDW_RS_ActQuestList[4][2];
TDW_RS_RQNameList["prisoner of ice"]         = TDW_RS_ActQuestList[4][2];
TDW_RS_RQNameList["anya"]                    = TDW_RS_ActQuestList[4][2];
TDW_RS_RQNameList["pindleskin"]              = TDW_RS_DoAct5_Pindleskin;
TDW_RS_RQNameList["pindle"]                  = TDW_RS_DoAct5_Pindleskin;
TDW_RS_RQNameList["pindy"]                   = TDW_RS_DoAct5_Pindleskin;
TDW_RS_RQNameList["pindi"]                   = TDW_RS_DoAct5_Pindleskin;
TDW_RS_RQNameList["ancients"]                = TDW_RS_DoAct5_Ancients;
TDW_RS_RQNameList["ancient"]                 = TDW_RS_DoAct5_Ancients;
TDW_RS_RQNameList["baal"]                    = TDW_RS_ActQuestList[4][5];
// ////////////////////////////////////////////////////////////////////////////

var TDW_RS_DefaultWaits = [
	[15, 15, 15, 15, 15, 15],
	[15, 15, 15, 15, 15, 15, 15],
	[15, 15, 15, 15, 15, 15],
	[15, 15, 15],
	[15, 15, 15, 15, 15, 15],
];
var TDW_RS_DefaultWaits = [
	[30, 30, 30, 30, 30, 30],
	[30, 30, 30, 30, 30, 30, 30],
	[30, 30, 30, 30, 30, 30],
	[30, 30, 30],
	[30, 30, 30, 30, 30, 30],
];
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
// CODE NOTE: To be removed.
if (false) {
var TDW_RS_AttackNPCList = new Array();
// Location: D2JSP_AREA_DEN_OF_EVIL
TDW_RS_AttackNPCList.push(new TDW_BOT_ATTACK_SpecialNPC("Corpsefire",
	TDW_BOT_ATTACK_NPC_FLAG_NONE, 5, 11, 18));
/*
// Location: D2JSP_AREA_COLD_PLAINS
TDW_RS_AttackNPCList.push(new TDW_BOT_ATTACK_SpecialNPC("Bishibosh",
	TDW_BOT_ATTACK_NPC_FLAG_NONE, 5, 11, 18));
*/
// Location: D2JSP_AREA_CAVE_LEVEL_1
TDW_RS_AttackNPCList.push(new TDW_BOT_ATTACK_SpecialNPC("Coldcrow",
	TDW_BOT_ATTACK_NPC_FLAG_NONE, 5, 11, 18));
// Location: D2JSP_AREA_BURIAL_GROUNDS
TDW_RS_AttackNPCList.push(new TDW_BOT_ATTACK_SpecialNPC("Blood Raven",
	TDW_BOT_ATTACK_NPC_FLAG_NONE, 5, 11, 18));
// Location: D2JSP_AREA_CRYPT
TDW_RS_AttackNPCList.push(new TDW_BOT_ATTACK_SpecialNPC("Bonebreaker",
	TDW_BOT_ATTACK_NPC_FLAG_NONE, 5, 11, 18));
// Location: D2JSP_AREA_DARK_WOOD
// Class ID = 24 / Preset ID = 616
TDW_RS_AttackNPCList.push(new TDW_BOT_ATTACK_SpecialNPC("Treehead Woodfist",
	TDW_BOT_ATTACK_NPC_FLAG_NONE, 5, 11, 18));
// Location: D2JSP_AREA_STONY_FIELD
TDW_RS_AttackNPCList.push(new TDW_BOT_ATTACK_SpecialNPC("Rakanishu",
	TDW_BOT_ATTACK_NPC_FLAG_NONE, 5, 11, 18));
/*
// Location: D2JSP_AREA_TRISTRAM
TDW_RS_AttackNPCList.push(new TDW_BOT_ATTACK_SpecialNPC("Griswold",
	TDW_BOT_ATTACK_NPC_FLAG_NONE, 5, 11, 18));
// Location: D2JSP_AREA_TOWER_CELLAR_LEVEL_5
// The Countess is classid 45
TDW_RS_AttackNPCList.push(new TDW_BOT_ATTACK_SpecialNPC("The Countess",
	TDW_BOT_ATTACK_NPC_FLAG_NONE, 5, 11, 18));
// Location: D2JSP_AREA_CATHEDRAL
TDW_RS_AttackNPCList.push(new TDW_BOT_ATTACK_SpecialNPC("Bone Ash",
	TDW_BOT_ATTACK_NPC_FLAG_NONE, 5, 11, 18));
// Location: D2JSP_AREA_BARRACKS
TDW_RS_AttackNPCList.push(new TDW_BOT_ATTACK_SpecialNPC("The Smith",
	TDW_BOT_ATTACK_NPC_FLAG_NONE, 5, 11, 18));
// Location: D2JSP_AREA_JAIL_LEVEL_2
TDW_RS_AttackNPCList.push(new TDW_BOT_ATTACK_SpecialNPC("Pitspawn Fouldog",
	TDW_BOT_ATTACK_NPC_FLAG_NONE, 5, 11, 18));
*/
/*
// Location: D2JSP_AREA_CATACOMBS_LEVEL_4
TDW_RS_AttackNPCList.push(new TDW_BOT_ATTACK_SpecialNPC("Andariel",
	TDW_BOT_ATTACK_NPC_FLAG_NONE, 5, 11, 18));
// Location: D2JSP_AREA_MOO_MOO_FARM
TDW_RS_AttackNPCList.push(new TDW_BOT_ATTACK_SpecialNPC("The Cow King",
	TDW_BOT_ATTACK_NPC_FLAG_NONE, 5, 11, 18));
*/

// Location: D2JSP_AREA_A2_SEWERS_LEVEL_3
TDW_RS_AttackNPCList.push(new TDW_BOT_ATTACK_SpecialNPC("Radament",
	TDW_BOT_ATTACK_NPC_FLAG_NONE, 5, 11, 18));
// Location: D2JSP_AREA_STONY_TOMB_LEVEL_2
TDW_RS_AttackNPCList.push(new TDW_BOT_ATTACK_SpecialNPC("Creeping Feature",
	TDW_BOT_ATTACK_NPC_FLAG_NONE, 5, 11, 18));
// Location: D2JSP_AREA_HALLS_OF_THE_DEAD_LEVEL_3
TDW_RS_AttackNPCList.push(new TDW_BOT_ATTACK_SpecialNPC("Bloodwitch the Wild",
	TDW_BOT_ATTACK_NPC_FLAG_NONE, 5, 11, 18));
// Location: D2JSP_AREA_FAR_OASIS
TDW_RS_AttackNPCList.push(new TDW_BOT_ATTACK_SpecialNPC("Beetleburst",
	TDW_BOT_ATTACK_NPC_FLAG_NONE, 5, 11, 18));
// Location: D2JSP_AREA_LOST_CITY
TDW_RS_AttackNPCList.push(new TDW_BOT_ATTACK_SpecialNPC("Dark Elder",
	TDW_BOT_ATTACK_NPC_FLAG_NONE, 5, 11, 18));
// Location: D2JSP_AREA_MAGGOT_LAIR_LEVEL_3
TDW_RS_AttackNPCList.push(new TDW_BOT_ATTACK_SpecialNPC("Coldworm the Burrower",
	TDW_BOT_ATTACK_NPC_FLAG_NONE, 5, 0, 5));
// Location: D2JSP_AREA_CLAW_VIPER_TEMPLE_LEVEL_2
TDW_RS_AttackNPCList.push(new TDW_BOT_ATTACK_SpecialNPC("Fangskin",
	TDW_BOT_ATTACK_NPC_FLAG_NONE, 5, 8, 18));
/*
// Location: D2JSP_AREA_PALACE_CELLAR_LEVEL_3
TDW_RS_AttackNPCList.push(new TDW_BOT_ATTACK_SpecialNPC("Fire Eye",
	TDW_BOT_ATTACK_NPC_FLAG_NONE, 5, 11, 18));
*/
// Location: D2JSP_AREA_ARCANE_SANCTUARY
TDW_RS_AttackNPCList.push(new TDW_BOT_ATTACK_SpecialNPC("The Summoner",
	TDW_BOT_ATTACK_NPC_FLAG_NONE, 5, 0, 8));
// Location: One of the seven tombs.
TDW_RS_AttackNPCList.push(new TDW_BOT_ATTACK_SpecialNPC("Ancient Kaa the Soulless",
	TDW_BOT_ATTACK_NPC_FLAG_NONE, 5, 0, 8));
// Location: D2JSP_AREA_DURIELS_LAIR
TDW_RS_AttackNPCList.push(new TDW_BOT_ATTACK_SpecialNPC("Duriel",
	TDW_BOT_ATTACK_NPC_FLAG_NONE, 20, 0, 3));

// Location: D2JSP_AREA_SPIDER_CAVERN
TDW_RS_AttackNPCList.push(new TDW_BOT_ATTACK_SpecialNPC("Sszark the Burning",
	TDW_BOT_ATTACK_NPC_FLAG_NONE, 5, 8, 18));
// Location: D2JSP_AREA_FLAYER_DUNGEON_LEVEL_3
TDW_RS_AttackNPCList.push(new TDW_BOT_ATTACK_SpecialNPC("Witch Doctor Endugu",
	TDW_BOT_ATTACK_NPC_FLAG_NONE, 5, 8, 18));
// Location: D2JSP_AREA_A3_SEWERS_LEVEL_1
TDW_RS_AttackNPCList.push(new TDW_BOT_ATTACK_SpecialNPC("Icehawk Riftwing",
	TDW_BOT_ATTACK_NPC_FLAG_NONE, 5, 8, 18));
// Location: D2JSP_AREA_LOWER_KURAST
TDW_RS_AttackNPCList.push(new TDW_BOT_ATTACK_SpecialNPC("Stormtree",
	TDW_BOT_ATTACK_NPC_FLAG_NONE, 5, 8, 18));
// Location: D2JSP_AREA_RUINED_TEMPLE
TDW_RS_AttackNPCList.push(new TDW_BOT_ATTACK_SpecialNPC("Battlemaid Sarina",
	TDW_BOT_ATTACK_NPC_FLAG_NONE, 5, 8, 18));

// Location: D2JSP_AREA_TRAVINCAL
TDW_RS_AttackNPCList.push(new TDW_BOT_ATTACK_SpecialNPC("Ismail Vilehand",
	TDW_BOT_ATTACK_NPC_FLAG_NONE, 10, 8, 16));
// Location: D2JSP_AREA_TRAVINCAL
TDW_RS_AttackNPCList.push(new TDW_BOT_ATTACK_SpecialNPC("Geleb Flamefinger",
	TDW_BOT_ATTACK_NPC_FLAG_NONE, 10, 8, 16));
// Location: D2JSP_AREA_TRAVINCAL
TDW_RS_AttackNPCList.push(new TDW_BOT_ATTACK_SpecialNPC("Toorc Icefist",
	TDW_BOT_ATTACK_NPC_FLAG_NONE, 10, 8, 16));

// Location: D2JSP_AREA_DURANCE_OF_HATE_LEVEL_3
TDW_RS_AttackNPCList.push(new TDW_BOT_ATTACK_SpecialNPC("Maffer Dragonhand",
	TDW_BOT_ATTACK_NPC_FLAG_NONE, 10, 8, 16));
// Location: D2JSP_AREA_DURANCE_OF_HATE_LEVEL_3
TDW_RS_AttackNPCList.push(new TDW_BOT_ATTACK_SpecialNPC("Wyand Voidbringer",
	TDW_BOT_ATTACK_NPC_FLAG_NONE, 10, 8, 16));
// Location: D2JSP_AREA_DURANCE_OF_HATE_LEVEL_3
TDW_RS_AttackNPCList.push(new TDW_BOT_ATTACK_SpecialNPC("Bremm Sparkfist",
	TDW_BOT_ATTACK_NPC_FLAG_NONE, 10, 8, 16));
/*
// Location: D2JSP_AREA_DURANCE_OF_HATE_LEVEL_3
TDW_RS_AttackNPCList.push(new TDW_BOT_ATTACK_SpecialNPC("Mephisto",
	TDW_BOT_ATTACK_NPC_FLAG_NONE, 5, 11, 18));
*/

/*
// Location: D2JSP_AREA_PLAINS_OF_DESPAIR
TDW_RS_AttackNPCList.push(new TDW_BOT_ATTACK_SpecialNPC("Izual",
	TDW_BOT_ATTACK_NPC_FLAG_NONE, 5, 3, 6));
*/
// Location: D2JSP_AREA_RIVER_OF_FLAME
TDW_RS_AttackNPCList.push(new TDW_BOT_ATTACK_SpecialNPC("Hephasto The Armorer",
	TDW_BOT_ATTACK_NPC_FLAG_NONE, 1, 8, 18));
// Location: D2JSP_AREA_CHAOS_SANCTUM
TDW_RS_AttackNPCList.push(new TDW_BOT_ATTACK_SpecialNPC("Infector of Souls",
	TDW_BOT_ATTACK_NPC_FLAG_NONE, 1, 12, 25));
// Location: D2JSP_AREA_CHAOS_SANCTUM
TDW_RS_AttackNPCList.push(new TDW_BOT_ATTACK_SpecialNPC("Lord De Seis",
	TDW_BOT_ATTACK_NPC_FLAG_NONE, 1, 8, 20));
// Location: D2JSP_AREA_CHAOS_SANCTUM
TDW_RS_AttackNPCList.push(new TDW_BOT_ATTACK_SpecialNPC("Grand Vizier of Chaos",
	TDW_BOT_ATTACK_NPC_FLAG_NONE, 2, 8, 18));
// Location: D2JSP_AREA_CHAOS_SANCTUM
TDW_RS_AttackNPCList.push(new TDW_BOT_ATTACK_SpecialNPC("Diablo",
	TDW_BOT_ATTACK_NPC_FLAG_NONE, 5, 8, 16));

// Diablo Clone
TDW_RS_AttackNPCList.push(new TDW_BOT_ATTACK_SpecialNPC("Diablo",
	TDW_BOT_ATTACK_NPC_FLAG_NONE, 1, 12, 24));

// Location: D2JSP_AREA_BLOODY_FOOTHILLS
TDW_RS_AttackNPCList.push(new TDW_BOT_ATTACK_SpecialNPC("Dac Farren",
	TDW_BOT_ATTACK_NPC_FLAG_NONE, 5, 11, 18));
// Location: D2JSP_AREA_BLOODY_FOOTHILLS
TDW_RS_AttackNPCList.push(new TDW_BOT_ATTACK_SpecialNPC("Shenk the Overseer",
	TDW_BOT_ATTACK_NPC_FLAG_NONE, 5, 11, 18));
// Location: D2JSP_AREA_RIGID_HIGHLANDS
TDW_RS_AttackNPCList.push(new TDW_BOT_ATTACK_SpecialNPC("Eldritch the Rectifier",
	TDW_BOT_ATTACK_NPC_FLAG_NONE, 5, 11, 18));
// Location: D2JSP_AREA_RIGID_HIGHLANDS
TDW_RS_AttackNPCList.push(new TDW_BOT_ATTACK_SpecialNPC("Thresh Socket",
	TDW_BOT_ATTACK_NPC_FLAG_NONE, 5, 11, 18));
// Location: D2JSP_AREA_RIGID_HIGHLANDS
TDW_RS_AttackNPCList.push(new TDW_BOT_ATTACK_SpecialNPC("Eyeback the Unleashed",
	TDW_BOT_ATTACK_NPC_FLAG_NONE, 5, 11, 18));
// Location: D2JSP_AREA_ARREAT_PLATEAU
TDW_RS_AttackNPCList.push(new TDW_BOT_ATTACK_SpecialNPC("Sharptooth Slayer",
	TDW_BOT_ATTACK_NPC_FLAG_NONE, 5, 11, 18));
// Location: D2JSP_AREA_CELLAR_OF_PITY
TDW_RS_AttackNPCList.push(new TDW_BOT_ATTACK_SpecialNPC("Frozenstein",
	TDW_BOT_ATTACK_NPC_FLAG_NONE, 5, 11, 18));
// Location: D2JSP_AREA_CRYSTALIZED_CAVERN_LEVEL_2
TDW_RS_AttackNPCList.push(new TDW_BOT_ATTACK_SpecialNPC("Bonesaw Breaker",
	TDW_BOT_ATTACK_NPC_FLAG_NONE, 5, 11, 18));
// Location: D2JSP_AREA_NIHLATHAKS_TEMPLE
TDW_RS_AttackNPCList.push(new TDW_BOT_ATTACK_SpecialNPC("Pindleskin",
	TDW_BOT_ATTACK_NPC_FLAG_NONE, 5, 11, 18));
/*
// Location: D2JSP_AREA_HALLS_OF_VAUGHT
TDW_RS_AttackNPCList.push(new TDW_BOT_ATTACK_SpecialNPC("Nihlathak",
		TDW_BOT_ATTACK_NPC_FLAG_NONE, 10, 0, 4));
*/
// Location: D2JSP_AREA_GLACIAL_CAVES_LEVEL_2
TDW_RS_AttackNPCList.push(new TDW_BOT_ATTACK_SpecialNPC("Snapchip Shatter",
	TDW_BOT_ATTACK_NPC_FLAG_NONE, 3, 11, 18));
// Location: D2JSP_AREA_ROCKY_SUMMIT
TDW_RS_AttackNPCList.push(new TDW_BOT_ATTACK_SpecialNPC("Talic",
	TDW_BOT_ATTACK_NPC_FLAG_NONE, 3, 11, 18));
// Location: D2JSP_AREA_ROCKY_SUMMIT
TDW_RS_AttackNPCList.push(new TDW_BOT_ATTACK_SpecialNPC("Korlic",
	TDW_BOT_ATTACK_NPC_FLAG_NONE, 3, 11, 18));
// Location: D2JSP_AREA_ROCKY_SUMMIT
TDW_RS_AttackNPCList.push(new TDW_BOT_ATTACK_SpecialNPC("Madawc",
	TDW_BOT_ATTACK_NPC_FLAG_NONE, 3, 11, 18));
// Location: D2JSP_AREA_THRONE_OF_DESTRUCTION
TDW_RS_AttackNPCList.push(new TDW_BOT_ATTACK_SpecialNPC("Colenzo the Annihilator",
	TDW_BOT_ATTACK_NPC_FLAG_NONE, 5, 7, 18));
// Location: D2JSP_AREA_THRONE_OF_DESTRUCTION
TDW_RS_AttackNPCList.push(new TDW_BOT_ATTACK_SpecialNPC("Achmel the Cursed",
	TDW_BOT_ATTACK_NPC_FLAG_NONE, 5, 7, 18));
// Location: D2JSP_AREA_THRONE_OF_DESTRUCTION
TDW_RS_AttackNPCList.push(new TDW_BOT_ATTACK_SpecialNPC("Bartuc the Bloody",
	TDW_BOT_ATTACK_NPC_FLAG_NONE, 1, 7, 18));
// Location: D2JSP_AREA_THRONE_OF_DESTRUCTION
TDW_RS_AttackNPCList.push(new TDW_BOT_ATTACK_SpecialNPC("Ventar the Unholy",
	TDW_BOT_ATTACK_NPC_FLAG_NONE, 5, 7, 18));
// Location: D2JSP_AREA_THRONE_OF_DESTRUCTION
TDW_RS_AttackNPCList.push(new TDW_BOT_ATTACK_SpecialNPC("Lister the Tormentor",
	TDW_BOT_ATTACK_NPC_FLAG_NONE, 1, 7, 18));
/*
// Location: D2JSP_AREA_THE_WORLDSTONE_CHAMBER
TDW_RS_AttackNPCList.push(new TDW_BOT_ATTACK_SpecialNPC("Baal",
		TDW_BOT_ATTACK_NPC_FLAG_NONE, 1, 5, 20));
*/

for (var count_1 = 0; count_1 < TDW_RS_AttackNPCList.length; count_1++)
	TDW_BOT_AttackNPCSpec.addNPC(TDW_RS_AttackNPCList[count_1]);
delete count_1;
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function main()
{
	var config_list = new Array();

	// 35.30 core is broken...
//	TDW_BOT_ConfigureList["tdw.bot.rush.server.wait.for.party"] = true;

/*
	CODE NOTE: Un-comment to prevent merc revival and other baby-sitting...
	TDW_BOT_ConfigureList["town.heal.mercenary.hp"]           = 0;
	TDW_BOT_ConfigureList["chicken.mercenary.hp"]             = 0;
	TDW_BOT_ConfigureList["town.revive.mercenary"]            = false;
	TDW_BOT_ConfigureList["mercernary.needed"]                = false;
*/
//	TDW_BOT_ConfigureList["skill.attack.remove"]              = ["Frozen Orb", "Meteor"];

	TDW_RS_Start(config_list);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TDW_RS_Start(config_list)
{
/*
while (true) {
	D2JSP_UTIL_BNET_OverheadSafe(D2JSP_COMM_GetMyMaxLife() + "/" + D2JSP_COMM_GetMyMaxMana());
	delay(500);
}
*/

//TDW_BOT_ConfigureList["operation.log.level.file"] = D2JSP_UTIL_LOG_Level_MINUTIAE;
//TDW_BOT_ConfigureList["operation.log.level.file"] = D2JSP_UTIL_LOG_Level_DEBUG;
//TDW_BOT_ConfigureList["operation.log.level.file"] = D2JSP_UTIL_LOG_Level_DETAIL;
//TDW_BOT_ConfigureList["operation.log.sync.mode"]  = true;

	var init_err_msg = TDW_BOT_Init("TDW_RushServer", null, config_list);

	if (init_err_msg)
		TDW_BOT_SUPP_DoExitWithMsg(init_err_msg);

	TDW_MOVE_GetMyWayPointAccess();

	TDW_RS_HandleQuestRequest();

	TDW_BOT_FinalComplete();
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TDW_RS_SetAllWaits(wait_seconds)
{
	var count_1;
	var count_2;

	for (count_1 = 0; count_1 < TDW_RS_DefaultWaits.length; count_1++) {
		for (count_2 = 0; count_2 < TDW_RS_DefaultWaits[count_1].length;
			count_2++)
			TDW_RS_DefaultWaits[count_1][count_2] = wait_seconds;
	}
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function hostilemsgHandler()
{
	var log_obj = D2JSP_UTIL_LOG_GetALog();

	log_obj.logInfoQuiet(arguments[0]);

	if (arguments[0].match(/^\S+ has expressed hostility towards you.$/i)) {
		if (TDW_BOT_ContextList["operation.hostility.fight"]) {
			var player_name = arguments[0].split(/[\s]/)[0];
			TDW_BOT_AttackNPCSpec.addPlayer(player_name);
			log_obj.logHostile(D2JSP_UTIL_COLOR_RED + "Player " + player_name +
				" has gone hostile; you are prepared to duel.");
		}
		else if (TDW_BOT_ContextList["operation.quit.on.hostile"]) {
			log_obj.logHostile(D2JSP_UTIL_COLOR_RED +
				"********** HOSTILITY EXIT: " + arguments[0]);
			log_obj.closeLog();
			quit();								// We're in trouble. REALLY quit()!
		}
		else
			log_obj.logHostile(D2JSP_UTIL_COLOR_RED + "Player " + player_name +
				" has gone hostile.");
	}
	else if (arguments[0].match(/^\S+ is no longer hostile towards you.$/i)) {
		var player_name = arguments[0].split(/[\s]/)[0];
		if (TDW_BOT_AttackNPCSpec.findNPC(player_name)) {
			TDW_BOT_AttackNPCSpec.deleteNPC(player_name);
			log_obj.logInfo(D2JSP_UTIL_COLOR_YELLOW + "Player " + player_name +
				" is no longer hostile; you are no longer prepared to duel.");
		}
		else
			log_obj.logInfo(D2JSP_UTIL_COLOR_YELLOW + "Player " + player_name +
				" is no longer hostile.");
	}
	else
		log_obj.logInfo(arguments[0]);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function partymsgHandler()
{
	var log_obj = D2JSP_UTIL_LOG_GetALog();

	log_obj.logInfoQuiet(arguments[0]);

	if (arguments[0].
		match(/^\S+ invites you to ally against the forces of evil\.$/i)) {
		var player_name = arguments[0].split(/[\s]/)[0];
		if (player_name != "") {
			var player_obj = D2JSP_COMM_GetPlayerByName(player_name);
			if (player_obj) {
				if (TDW_BOT_ContextList["operation.party"]) {
					clickParty(player_obj, D2JSP_UTIL_PARTY_MODE_PARTY);
					log_obj.logInfo("Accepted party invitation from player " +
						player_name + ".");
				}
				else
					log_obj.logInfo("Party invitation from player " + player_name +
						" ignored.");
			}
			else
				log_obj.logWarning("Unable to accept party invitation from player "+
					player_name + " because the player object could not be located.");
		}
		else
			log_obj.logWarning("Unable to resolve a party invitation because the "+
				"inviting player name could not be parsed.");
	}
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function gamemsgHandler()
{
	var log_obj = D2JSP_UTIL_LOG_GetALog();

	if (arguments[0].
		match(/^\S+ joined our world. Diablo's minions grow stronger\.$/i)) {
		log_obj.logInfoQuiet(arguments[0]);
		var player_name = arguments[0].split(/[\s]/)[0];
		if (player_name != "")
			;
		else
			log_obj.logWarning("Unable to resolve a character game join message " +
				"because the joining player name could not be parsed.");
	}
	else if (arguments[0].
		match(/^\S+ left our world\. Diablo's minions weaken.$/i)) {
		log_obj.logInfoQuiet(arguments[0]);
		var player_name = arguments[0].split(/[\s]/)[0];
		if ((player_name != "") && TDW_BOT_AttackNPCSpec.findNPC(player_name))
			TDW_BOT_AttackNPCSpec.deleteNPC(player_name);
	}
	else if (arguments[0].match(/^\S+ dropped due to timeout\.$/i)) {
		log_obj.logInfoQuiet(arguments[0]);
		var player_name = arguments[0].split(/[\s]/)[0];
		if ((player_name != "") && TDW_BOT_AttackNPCSpec.findNPC(player_name))
			TDW_BOT_AttackNPCSpec.deleteNPC(player_name);
	}
	else if (TDW_RUSH_QuestRequestReady) {
		var msg_data = D2JSP_UTIL_GEN_ParseNetString(arguments[0]);
		if (msg_data && (msg_data[1].charAt(0) == ">"))
		  TDW_RUSH_QuestRequest.push(msg_data);
	}
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function inputlineHandler()
{
//	var log_obj = D2JSP_UTIL_LOG_GetALog();

	if (TDW_RUSH_QuestRequestReady) {
		var this_arg = D2JSP_UTIL_FORMAT_Trim(arguments[0]).split(/\s+/);
		if ((this_arg[0] != ".exec") && (this_arg[0] != ".quit")  &&
			(this_arg[0] != ".stop"))
		  TDW_RUSH_QuestRequest.push([me.name, ">" + arguments[0].substr(1)]);
	}
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function keypressHandler()
{
	if (TDW_RS_FinalDelayReady) {
		TDW_RS_FinalDelayLastKey = arguments[0];
	}
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TDW_RS_SaySomething(in_text)
{
	if (TDW_BOT_ContextList["operation.public.speech"]) {
		D2JSP_UTIL_BNET_SaySafe(in_text);
		var old_log_screen_flag = D2JSP_UTIL_LOG_GetALog().screenOff();
		D2JSP_UTIL_LOG_GetALog().logInfo(in_text);
		if (old_log_screen_flag)
			D2JSP_UTIL_LOG_GetALog().screenOn();
	}
	else
		D2JSP_UTIL_LOG_GetALog().logInfo(D2JSP_UTIL_COLOR_RED + "[" +
			D2JSP_UTIL_COLOR_WHITE + in_text + D2JSP_UTIL_COLOR_RED + "]");
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TDW_RS_SayStatus(in_text)
{
	TDW_RS_SaySomething("STATUS: " + in_text);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TDW_RS_SayError(in_text)
{
	TDW_RS_SaySomething("ERROR: " + in_text);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TDW_RS_SayOrders(in_text, machine_orders)
{
	TDW_RS_SaySomething("ORDERS: " + in_text);

	if (TDW_BOT_ContextList["operation.public.speech"] &&
		(arguments.length > 1) && (machine_orders != null) &&
		(machine_orders != ""))
		D2JSP_UTIL_BNET_SaySafe("&" + machine_orders);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TDW_RS_FinalDelay(quest_name, delay_seconds, other_text, machine_orders)
{
	var portal_status;

TDW_BOT_Log.logInfo("***** IGNORING PARTY PLAYER COUNT AS IT IS BROKEN");

	if ((D2JSP_COMM_GetMyPartyPlayerCount() == 1) &&
		(!TDW_BOT_ContextList["tdw.bot.rush.server.wait.for.party"]))
		return(0);

	delay_seconds = ((arguments.length > 1) && (delay_seconds >= 0)) ?
		delay_seconds : 15;

	if (!delay_seconds)
		return(0);

	for (var count_1 = 0; count_1 < 5; count_1++) {
		if (!(portal_status = TDW_MOVE_OpenTownPortal()))
			break;
		TDW_RS_SayError("Unable to use Tome of Town Portal... re-trying.");
		delay(250);
	}

	if (portal_status)
		TDW_BOT_SUPP_DoExitWithMsg("Multiple failures in attempt to open a " +
			"town portal.");

	TDW_RS_SayOrders("Take my TP *NOW* to " + D2JSP_AREA_AreaToName() +
		" to complete the " + quest_name + " quest.",
		(machine_orders != null) ? machine_orders : null);
	if ((arguments.length > 2) && (other_text != null)  && (other_text != ""))
		TDW_RS_SayOrders(other_text);

	var delay_result = TDW_RS_FinalDelayLoop(delay_seconds);

	if (!delay_result)
		TDW_RS_SayStatus("Time's up!");
	else if (delay_result > 0)
		TDW_RS_SayStatus("I'm off early!");
	else
		TDW_RS_SayStatus("Quest cancelled by console operator.");

	return((delay_result < 0) ? -1 : 0);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TDW_RS_FinalDelayLoop(delay_seconds)
{
	var message = D2JSP_UTIL_COLOR_GREEN + "Press = to cancel";
	var count_1;
	var count_2;
	var count_3;

	TDW_RS_FinalDelayReady         = true;
	TDW_RS_FinalDelayCancelPending = false;
	TDW_RS_FinalDelayLastKey       = null;

	TDW_RS_SayStatus("You have " + delay_seconds + " seconds...");

	if (D2JSP_COMM_IsMyPartyInMyArea() &&
		(!TDW_BOT_ContextList["tdw.bot.rush.server.wait.for.party"])) {
		TDW_RS_SayStatus("As we're all here...");
		return(1);
	}

//	delay(1000);

	for (count_1 = delay_seconds; count_1 > -1; count_1--) {
		if (!(count_1 % 10))
			TDW_RS_SayStatus("Waiting " + count_1 +
				" seconds for all rush characters to arrive at " +
				D2JSP_AREA_AreaToName() + ".");
		else if (count_1 <= 5)
			TDW_RS_SayStatus(count_1 + " seconds");
		for (count_2 = 0; count_2 < 2; count_2++) {
			for (count_3 = 0; count_3 < 5; count_3++) {
				if (TDW_RS_FinalDelayLastKey == null)
					;
				else if (TDW_RS_FinalDelayCancelPending == true) {
					if (TDW_RS_FinalDelayLastKey == TDW_RS_FinalDelayKeyConfirm) {
						print(D2JSP_UTIL_COLOR_RED + "Operation cancelled. " +
							"Press = again to stop or any other key to continue.");
						message = D2JSP_UTIL_COLOR_RED + "Press = again to stop";
						TDW_RS_FinalDelayLastKey = null;
						while (TDW_RS_FinalDelayLastKey == null) {
							D2JSP_UTIL_BNET_OverheadSafe(message);
							delay(250);
						}
						var final_key                  = TDW_RS_FinalDelayLastKey;
						TDW_RS_FinalDelayReady         = false;
						TDW_RS_FinalDelayCancelPending = false;
						TDW_RS_FinalDelayLastKey       = null;
						D2JSP_UTIL_BNET_OverheadSafe("");
						return((final_key == TDW_RS_FinalDelayKeyConfirm) ? -1 : 1);
					}
					TDW_RS_FinalDelayCancelPending = false;
					TDW_RS_FinalDelayLastKey       = null;
					message                        = D2JSP_UTIL_COLOR_GREEN +
						"Press = to cancel";
				}
				else if (TDW_RS_FinalDelayLastKey == TDW_RS_FinalDelayKeyCancel) {
					TDW_RS_FinalDelayCancelPending = true;
					TDW_RS_FinalDelayLastKey       = null;
					message                        = D2JSP_UTIL_COLOR_RED +
						"Press = again to confirm";
				}
				if (D2JSP_COMM_IsMyPartyInMyArea() &&
					(!TDW_BOT_ContextList["tdw.bot.rush.server.wait.for.party"])) {
					TDW_RS_SayStatus("As we're all here...");
					return(1);
				}
				delay(50);
			}
			D2JSP_UTIL_BNET_OverheadSafe(message);
		}
	}

	TDW_RS_FinalDelayReady         = false;
	TDW_RS_FinalDelayCancelPending = false;
	TDW_RS_FinalDelayLastKey       = null;

	D2JSP_UTIL_BNET_OverheadSafe("");

	return(0);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TDW_RS_HandleQuestRequest()
{
	TDW_RUSH_QuestRequest      = new Array();
	TDW_RUSH_QuestRequestReady = true;

	if (D2JSP_COMM_GetPlayerCount() > 1)
		D2JSP_UTIL_BNET_SaySafe("&serverrestart");

	while (true) {
		if (TDW_RUSH_QuestRequest.length) {
			D2JSP_UTIL_BNET_OverheadSafe("");
			TDW_RUSH_QuestRequestReady = false;
			TDW_RUSH_QuestRequest[0][0].replace(/^\s+|\s+$/g, "");
			TDW_RUSH_QuestRequest[0][1].replace(/^\s+|\s+$/g, "");
			TDW_RUSH_QuestRequest[0][0].replace(/\s+/g, " ");
			TDW_RUSH_QuestRequest[0][1].replace(/\s+/g, " ");
			var this_cmd     = TDW_RUSH_QuestRequest.shift();
			var this_src     = this_cmd[0];
			var this_params  = this_cmd[1];
			var this_params  = this_params.split(/[\s]/);
			var this_request = this_params[0];
			var player_obj   = D2JSP_COMM_IsInMyParty(this_src);
			this_params.shift();
			if (this_request.toLowerCase() == ">query:serverisready")
				D2JSP_UTIL_BNET_SaySafe("?serverisready");
			else if ((!player_obj) && (this_src != me.name))
				TDW_BOT_Log.logInfo("Ignored quest command request '" +
					this_request + "' because the requestor (" + this_src +
					") is not in my party.");
			else if ((this_request.toLowerCase() == ">help") ||
				(this_request.toLowerCase() == ">?"))
				TDW_RS_DoAQuest(TDW_RS_DoHelp, this_params);
			else if (this_request.toLowerCase() == ">quit") {
				print("TDW RS quit request noted... exiting request mode.");
				break;
			}
			else if (this_request.toLowerCase() == ">partyon") {
				TDW_BOT_ContextList["operation.party"] = true;
				TDW_RS_SayStatus("Rush Server auto-party is now on.");
			}
			else if (this_request.toLowerCase() == ">partyoff") {
				TDW_BOT_ContextList["operation.party"] = false;
				TDW_RS_SayStatus("Rush Server auto-party is now off.");
			}
			else if (this_request.toLowerCase() == ">public") {
				TDW_BOT_ContextList["operation.public.speech"] = true;
				TDW_RS_SayStatus("Rush Server speech is now public.");
			}
			else if (this_request.toLowerCase() == ">private") {
				TDW_BOT_ContextList["operation.public.speech"] = false;
				TDW_RS_SayStatus("Rush Server speech is now private.");
			}
			else if (this_request.toLowerCase() == ">location")
				TDW_RS_SayStatus("Location: Area=" + me.area + ", room=" +
					getRoom(0).number + ", X=" + me.x + ", Y=" + me.y);
			else if (this_request.toLowerCase() == ">logglobals") {
				TDW_RS_SayStatus("Logging JavaScript global symbols to file '" +
					TDW_BOT_Log.file_name + "'...");
				D2JSP_UTIL_GEN_LogGlobalSymbols(TDW_BOT_Log);
				TDW_RS_SayStatus("JavaScript global symbols have been logged " +
					"to file '" + TDW_BOT_Log.file_name + "'.");
			}
			else if (this_request.toLowerCase() == ">duel")
				TDW_RS_DoAQuest(TDW_RS_Duel);
			else if ((this_request.toLowerCase() == ">fill") ||
				(this_request.toLowerCase() == ">fillall"))
				TDW_RS_DoAQuest(TDW_RS_EquipAll, TDW_BOT_MOVE_TOWN_FLAG_FILL_ALL);
			else if ((this_request.toLowerCase() == ">stash") ||
				(this_request.toLowerCase() == ">stashall"))
				TDW_RS_DoAQuest(TDW_RS_EquipAll, TDW_BOT_MOVE_TOWN_FLAG_FORCE_ISF);
			else if ((this_request.toLowerCase() == ">sell") ||
				(this_request.toLowerCase() == ">sellall"))
				TDW_RS_DoAQuest(TDW_RS_EquipAll,
					TDW_BOT_MOVE_TOWN_FLAG_FORCE_ISF_SELL);
			else if ((this_request.toLowerCase() == ">equip") ||
				(this_request.toLowerCase() == ">equipall"))
				TDW_RS_DoAQuest(TDW_RS_EquipAll, TDW_BOT_MOVE_TOWN_FLAG_FILL_ALL |
					TDW_BOT_MOVE_TOWN_FLAG_FORCE_ISF);
			else if (this_request.toLowerCase() == ">act")
				TDW_RS_DoAQuest(TDW_RS_Act, this_params);
			else if (this_request.toLowerCase() == ">townmove")
				TDW_RS_DoAQuest(TDW_RS_TownMove, this_params);
			else if (this_request.toLowerCase() == ">goto")
				TDW_RS_DoAQuest(TDW_RS_Goto, this_params);
			else if (this_request.toLowerCase() == ">tour")
				TDW_RS_DoAQuest(TDW_RS_Tour, this_params);
			else if (this_request.toLowerCase() == ">waypoints")
				TDW_RS_DoAQuest(TDW_RS_AcquireWaypointsAll);
			else if ((this_request.toLowerCase() == ">givewaypoints") ||
				(this_request.toLowerCase() == ">givewaypoint") ||
				(this_request.toLowerCase() == ">givewp") ||
				(this_request.toLowerCase() == ">givewps"))
				TDW_RS_DoAQuest(TDW_RS_GiveWaypoints, this_params);
			else if (this_request.toLowerCase() == ">chests")
				TDW_RS_DoAQuest(TDW_RS_ChestPop);
			else if (this_request.toLowerCase() == ">poparea")
				TDW_RS_DoAQuest(TDW_RS_PopArea, this_params);
			else if (this_request.toLowerCase() == ">cleararea")
				TDW_RS_DoAQuest(TDW_RS_ClearArea, this_params);
			else if (this_request.toLowerCase() == ">specialchests")
				TDW_RS_DoAQuest(TDW_RS_DoSpecialChests);
			else if (this_request.toLowerCase() == ">leg")
				TDW_RS_DoAQuest(TDW_RS_DoAct1_WirtsLeg);
			else if (this_request.toLowerCase() == ">npcs")
				TDW_RS_DoAQuest(TDW_RS_GotoNPCs);
			else if ((this_request.toLowerCase() == ">gotonpc") ||
				(this_request.toLowerCase() == ">gotonpcs"))
				TDW_RS_DoAQuest(TDW_RS_GotoNPCs, this_params);
			else if ((this_request.toLowerCase() == ">killnpc") ||
				(this_request.toLowerCase() == ">killnpcs"))
				TDW_RS_DoAQuest(TDW_RS_KillNPCs, this_params);
			else if (this_request.toLowerCase() == ">all") {
				var tmp_all_quests = D2JSP_UTIL_GEN_CloneObject(TDW_RS_AllQuestList);
				TDW_RS_AllQuestList[2][2][0] = null;				
				TDW_RS_AllQuestList[2][2][1] = null;				
				TDW_RS_AllQuestList[3][1][0] = null;				
				TDW_RS_DoAQuest(TDW_RS_DoQuests, true);
				TDW_RS_AllQuestList[2][2][0] = tmp_all_quests[2][2][0];
				TDW_RS_AllQuestList[2][2][1] = tmp_all_quests[2][2][1];
				TDW_RS_AllQuestList[3][1][0] = tmp_all_quests[3][1][0];
			}
			else if (this_request.toLowerCase() == ">catapults")
				TDW_RS_DoAQuest(TDW_RS_CatapultKill);
			else if ((this_request.length < 2) || (this_request.charAt(0) != ">"))
				print("Invalid TDW RS quest request (" + this_request + ")");
			else if (this_request.match(/^>GimmeGoldPlz=\d+\|\d+,\d+$/i)) {
				var gold_spec =
					this_request.match(/^>GimmeGoldPlz=(\d+)\|(\d+),(\d+)$/i);
				TDW_RS_GiveGoldPlz(player_obj.name, gold_spec[1], player_obj.area,
					gold_spec[2], gold_spec[3]);
			}
			else {
				this_request = this_request.substr(1);
				if (!(this_request.toLowerCase() in TDW_RS_RQNameList))
					print("Invalid TDW RS quest request ('" + this_request + "')");
				else if (TDW_RS_RQNameList[this_request.toLowerCase()] == null)
					print("That quest is not yet supported.");
				else
					TDW_RS_DoAQuest(TDW_RS_RQNameList[this_request.toLowerCase()],
						this_params);
			}
			TDW_RUSH_QuestRequest      = new Array();
			TDW_RUSH_QuestRequestReady = true;
		}
		D2JSP_UTIL_BNET_OverheadSafe("Ready for requests");
		delay(250);
	}
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TDW_RS_DoHelp(in_params)
{
var TDW_RS_HelpList = new Array();
TDW_RS_HelpList["a#q#"]          = [">a<act-number>q<quest-number>",
												"   Performs the quest specified by the <act-number> and <quest-number> components (if supported). For example, the Izual quest would be specified as \'a4q1\'. A number of synonyms are supported: the Izual quest can also be specified as \'Izual\' or \'Izzy\'."];
TDW_RS_HelpList["act"]           = [">act <act-number>",
												"   Moves you to the town waypoint in the specified act."];
TDW_RS_HelpList["all"]           = [">all",
												"   Attempts to perform all supported quests in order."];
TDW_RS_HelpList["catapults"]     = [">catapults",
												"   Locates and destroys the catapults in Act 5."];
TDW_RS_HelpList["chests"]        = [">chests",
												"   Opens the chests in Act 5."];
TDW_RS_HelpList["cleararea"]     = [">cleararea <area-number> [<area-number>...]",
												"   Clears the specified area(s) of monsters."];
TDW_RS_HelpList["equip"]         = [">equip",
												"   Performs any necessary selling and/or stashing and fills tomes and keys where required."];
TDW_RS_HelpList["fill"]          = [">fill",
												"   Fills tomes and keys (if necessary)."];
TDW_RS_HelpList["givewp"]        = [">givewp <area-number> [<area-number>...]",
												"   Gives the specified waypoint(s)."];
TDW_RS_HelpList["goto"]          = [">goto <area-number> [<area-number>...]",
												"   Goes the specified area(s)."];
//TDW_RS_HelpList["gotonpc"]       = [">gotonpc",
//												"   >gotonpc"];
TDW_RS_HelpList["help"]          = [">help [<command-name>]",
												"   Dumps this listing to the screen (and the log file for later reference). If the <command-name> parameter is included, describes only the specified command."];
TDW_RS_HelpList["killnpc"]       = [">killnpc <npc-name> [<npc-name>...]",
												"   Attempts to kill the specified monster NPC(s). You must use a single word for each NPC (e.g.: \'Snapchip\' or \'Shatter\' for \'Snapchip Shatter\'). A number of synonyms are supported (e.g.: \'Raka\' for \'Rakanishu\')."];
TDW_RS_HelpList["location"]      = [">location",
												"   Displays the current area, room, and X-Y coordinates."];
TDW_RS_HelpList["logglobals"]    = [">logglobals",
												"   Logs all JavaScript global symbols to the log file."];
TDW_RS_HelpList["partyon"]       = [">partyon",
													"Turns the auto-party feature on."];
TDW_RS_HelpList["partyoff"]      = [">partyoff",
													"Turns the auto-party feature off."];
TDW_RS_HelpList["poparea"]       = [">poparea <area-number> [<area-number>...]",
												"   Pops the chests in the specified area(s)."];
TDW_RS_HelpList["quit"]          = [">quit",
												"   Stops the TDW Rush Server."];
TDW_RS_HelpList["sell"]          = [">sell",
												"   Evaluates items in inventory, selling any which are not wanted and stashing the rest."];
TDW_RS_HelpList["specialchests"] = [">specialchests",
												"   Pops the special (for example the golden chests) in the game."];
TDW_RS_HelpList["stash"]         = [">stash",
												"   Evaluates items in inventory, stashing any which are wanted (may be overriden by configuration to always sell then stash)."];
TDW_RS_HelpList["tour"]          = [">tour [<act-number> [<act-number>...]]",
												"   Performs a tour of the areas in current act if none are specified, or the specified acts."];
TDW_RS_HelpList["townmove"]      = [">townmove <argument-one> [<argument-two>]",
												"   Performs the specified action using Scavenger's TownMove library."];
TDW_RS_HelpList["waypoints"]     = [">waypoints",
												"   Acquires any waypoints you don't have (except the Hall of Pain Waypoint)."];

	if ((!in_params) || (!D2JSP_UTIL_GEN_TypeOfArray(in_params)) ||
		(!in_params.length)) {
		for (var this_prop in TDW_RS_HelpList)
			TDW_BOT_Log.logInfo(TDW_RS_HelpList[this_prop]);
	}
	else {
		for (var count_1 = 0; count_1 < in_params.length; count_1++) {
			if (in_params[count_1].toLowerCase() in TDW_RS_HelpList)
				TDW_BOT_Log.logInfo(TDW_RS_HelpList[in_params[count_1].
					toLowerCase()]);
			else
				TDW_BOT_Log.logInfo("No help for command '" + in_params[count_1] +
					"'.");
		}
	}
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TDW_RS_DoQuests(continue_flag)
{
	for (var count_1 = 0; count_1 < TDW_RS_AllQuestList.length; count_1++) {
		if (TDW_RS_DoQuestsForAct(count_1 + 1, continue_flag) &&
			(continue_flag != true))
			return(-1);
	}

	return(0);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TDW_RS_DoQuestsForAct(in_act, continue_flag)
{
	if ((in_act >= 1) && (in_act <= 5)) {
		in_act--;
		for (var count_1 = 0; count_1 < TDW_RS_AllQuestList[in_act].length;
			count_1++) {
			if (TDW_RS_DoQuestList(TDW_RS_AllQuestList[in_act][count_1],
				continue_flag) && (continue_flag != true))
				return(-1);
		}
	}

	return(0);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TDW_RS_DoQuestList(quest_list, continue_flag)
{
	for (var count_1 = 0; count_1 < quest_list.length; count_1++) {
		if (quest_list[count_1] != null) {
			if (TDW_RS_DoAQuest(quest_list[count_1]) && (continue_flag != true))
				return(-1);
		}
	}

	return(0);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TDW_RS_DoAQuest(quest_func, quest_params)
{
	runGC();

	if (!D2JSP_AREA_IsTown()) {
		if (TDW_MOVE_ReturnToTown(TDW_BOT_CHECK_ChickenChecksBasicMe, null)) {
			TDW_BOT_SUPP_DoExitWithMsg("Unable to return to town.");
			return(-1);
		}
		TDW_MOVE_TownReturnFinalize();
	}

	if (TDW_BOT_MOVE_TownLogic((TDW_BOT_ContextList["mercernary.needed"]) ?
		TDW_BOT_MOVE_TOWN_FLAG_MERC_NEEDED : TDW_BOT_MOVE_TOWN_FLAG_NONE,
		TDW_ISF_Cfg)) {
		D2JSP_UTIL_LOG_GetALog().logError("Unable to complete town logic.");
		return(-1);
	}

	var inited_area_list = TDW_PATH_GetInitedAreas();

	TDW_BOT_AttackNPCSpec.setDoAttackOn();
	if (quest_func(quest_params))
		D2JSP_UTIL_BNET_SaySafe("&CancelQuestRequest");
	TDW_BOT_AttackNPCSpec.setDoAttackOn();

	runGC();

	TDW_BOT_Log.flushLog();

	if (!D2JSP_AREA_IsTown()) {
		if (TDW_MOVE_ReturnToTown(TDW_BOT_CHECK_ChickenChecksBasicMe, null)) {
			TDW_BOT_SUPP_DoExitWithMsg("Unable to return to town.");
			return(-1);
		}
		TDW_MOVE_TownReturnFinalize();
	}

	TDW_PATH_FreeInitedAreas(inited_area_list, TDW_BOT_Log);

	if (TDW_BOT_MOVE_TownLogic(
		((TDW_BOT_ContextList["mercernary.needed"]) ?
		TDW_BOT_MOVE_TOWN_FLAG_MERC_NEEDED : TDW_BOT_MOVE_TOWN_FLAG_NONE) |
		((TDW_BOT_ContextList["mercernary.wanted"]) ?
		TDW_BOT_MOVE_TOWN_FLAG_MERC_WANTED : TDW_BOT_MOVE_TOWN_FLAG_NONE),
		TDW_ISF_Cfg)) {
		D2JSP_UTIL_LOG_GetALog().logError("Unable to complete town logic.");
		return(-1);
	}

	var way_point_obj = getUnit(D2JSP_UTIL_GETUNIT_OBJECT, "Waypoint");
	if ((!way_point_obj) || (myDist(way_point_obj.x, way_point_obj.y) > 5))
		TDW_MOVE_COMPAT_TownMove("waypoint");

	TDW_BOT_Log.flushLog();

	return(0);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TDW_RS_GiveGoldPlz(player_name, gold_amount, dest_area, dest_x, dest_y)
{
	var my_total_gold = D2JSP_ITEM_MyGoldTotal();

	if ((!my_total_gold) || (!gold_amount))
		return;

	gold_amount = Math.min(my_total_gold, gold_amount);
	gold_amount = Math.min(60000, gold_amount);
	gold_amount = Math.min(me.getStat(D2JSP_STAT_GOLD), gold_amount);

	if (gold_amount >= my_total_gold)
		gold_amount = gold_amount / 10;

	if (!gold_amount)
		return;

	if (me.area != dest_area)
		TDW_MOVE_COMPAT_TownMove(D2JSP_AREA_GetAct(dest_area), "waypoint");

	if (myDist(dest_x, dest_y) > 5)
		TDW_MOVE_COMPAT_TownMoveXY(me.act, dest_x, dest_y);

	gold(gold_amount, D2JSP_ITEM_GOLD_MOVE_INV_TO_GROUND);

	D2JSP_UTIL_BNET_SaySafe("&PickupGoldPlz:" + player_name + "=" + gold_amount);

	var way_point_obj = getUnit(D2JSP_UTIL_GETUNIT_OBJECT, "Waypoint");
	if ((!way_point_obj) || (myDist(way_point_obj.x, way_point_obj.y) > 5))
		TDW_MOVE_COMPAT_TownMove("waypoint");

	TDW_BOT_Log.flushLog();
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TDW_RS_Duel()
{
	var dueling_area    = D2JSP_AREA_COLD_PLAINS;
	var dueling_town    = D2JSP_AREA_AreaToTown(dueling_area);
	var access_strategy = TDW_BOT_MOVE_GetDefaultLinkAccessStrategy();
	var action_flags    = TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_ALL |
		TDW_BOT_SUPP_TP2DEST_FLAG_PICKUP_ISF;
	var move_control    = new TDW_BOT_ATTACK_MoveControl(action_flags);
	var context_list    = D2JSP_UTIL_GEN_CloneObject(TDW_BOT_ContextList);

	move_control.no_change_max   = 2;

	TDW_BOT_CHECK_PrecastChecks(30000);

	TDW_BOT_AttackNPCSpec = new TDW_BOT_ATTACK_SpecialNPCSpec();

	TDW_BOT_ContextList["chicken.mercenary.hp"]             = -1;
	TDW_BOT_ContextList["town.revive.mercenary"]            = false;
	TDW_BOT_ContextList["town.heal.mercenary.hp"]           = -1;
	TDW_BOT_ContextList["mercernary.needed"]                = false;
	TDW_BOT_ContextList["mercernary.wanted"]                = false;

	if (me.area != dueling_area) {
		TDW_BOT_AttackNPCSpec = new TDW_BOT_ATTACK_SpecialNPCSpec();
		if (TDW_PATH_GotoTargetArea(dueling_town, access_strategy,
			TDW_PATHL_AREA_LOAD_FLAG_DEFAULT)) {
			TDW_BOT_ContextList   = context_list;
			return(0);
		}
		TDW_PATH_CreateArea(dueling_area);
		if (D2JSP_AREA_IsNextToTown(dueling_area)) {
			TDW_PATH_CreateArea(dueling_town);
			var area_exit = TDW_PATH_GetAreaExit(dueling_town, dueling_area);
			if (TDW_PATH_GotoTargetArea(dueling_area, access_strategy,
				TDW_PATHL_AREA_LOAD_FLAG_DEFAULT)) {
				TDW_BOT_ContextList   = context_list;
				return(0);
			}
			var dir_delta  =
				D2JSP_ROOM_GetDirectionDeltas()[area_exit.direction_delta];
			var next_coord = [
				area_exit.exit_coord[0] + (dir_delta[0] * 60) + rnd(-20, 20),
				area_exit.exit_coord[1] + (dir_delta[1] * 60) + rnd(-20, 20)];
			access_strategy.callback_func(access_strategy,
				TDW_PATH_ASCB_GOTO_XYPAIR, next_coord);
		}
		else if (TDW_PATH_GotoTargetArea(dueling_area, access_strategy,
			TDW_PATHL_AREA_LOAD_FLAG_DEFAULT)) {
			TDW_BOT_ContextList   = context_list;
			return(0);
		}
	}

	TDW_BOT_AttackNPCSpec.updatePlayers();

	if (me.area == dueling_area) {
		D2JSP_SKILL_TeleportTo(me.x + rnd(-10, 10), me.y + rnd(-10, 10));
		access_strategy.action_flags = action_flags;
		access_strategy.move_control = move_control;
		while (true) {
			TDW_BOT_AttackNPCSpec.updatePlayers();
			TDW_BOT_CHECK_DoChecks();
			TDW_BOT_AttackNPCSpec.killAny();
			TDW_BOT_CHECK_DoChecks();
			delay(50);
		}
	}

	TDW_BOT_ContextList   = context_list;
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TDW_RS_Act(in_params)
{
	var return_code = 0;
	var act_list    = new Array();

	if (D2JSP_UTIL_GEN_TypeOfArray(in_params) && in_params.length) {
		for (var count_1 = 0; count_1 < in_params.length; count_1++) {
			var this_act = (D2JSP_UTIL_GEN_TypeOfString(in_params[count_1])) ?
				parseInt(in_params[count_1], 10) : in_params[count_1];
			if ((this_act < 1) || (this_act > 5)) {
				TDW_RS_SayError("Invalid destination act specified (" +
					in_params[count_1] + ").");
				return(-1);
			}
			act_list.push(this_act);
		}
		for (var count_1 = 0; count_1 < act_list.length; count_1++) {
			var this_act = act_list[count_1];
			if (me.act != D2JSP_AREA_GetAct(this_act)) {
				if (!D2JSP_AREA_IsTown(me.area))
					TDW_MOVE_ReturnToTown(null, null, 20, 50);
			}
			else if (!D2JSP_AREA_IsTown(me.area))
				TDW_MOVE_ReturnToTown(null, null, 20, 50);
			TDW_MOVE_COMPAT_TownMove(this_act, "waypoint");
		}
	}

	return(return_code);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TDW_RS_EquipAll(in_flags)
{
	if (TDW_BOT_MOVE_TownLogic(in_flags, TDW_ISF_Cfg))
		TDW_BOT_SUPP_DoExitWithMsg("Unable to complete town logic.");

	return(0);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TDW_RS_TownMove(in_params)
{
	var return_code = 0;

	if (D2JSP_UTIL_GEN_TypeOfArray(in_params) && in_params.length) {
		if ((in_params.length == 2) && D2JSP_UTIL_FORMAT_IsDigit(in_params[0]))
			TDW_MOVE_COMPAT_TownMove(in_params[0], in_params[1]);
		else {
			for (var count_1 = 0; count_1 < in_params.length; count_1++)
				TDW_MOVE_COMPAT_TownMove(in_params[count_1]);
		}
	}

	return(return_code);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TDW_RS_GetNPCList()
{
	var npc_list = [
									"Corpsefire",
									"Bishibosh",
									"Coldcrow",
									"Blood Raven",
									"Bonebreaker",
									"Rakanishu",
									"Griswold",
									"Treehead Woodfist",
									"The Countess",
									"The Smith",
									"Pitspawn Fouldog",
									"Bone Ash",
									"Andariel",
//									"The Cow King",
									"Radament",
									"Creeping Feature",
									"Bloodwitch the Wild",
									"Beetleburst",
									"Coldworm the Burrower",
									"Dark Elder",
									"Fangskin",
									"Fire Eye",
									"The Summoner",
									"Ancient Kaa the Soulless",
									"Duriel",
									"Sszark the Burning",
									"Witch Doctor Endugu",
									"Stormtree",
									"Icehawk Riftwing",
									"Battlemaid Sarina",
									"Ismail Vilehand",
									"Geleb Flamefinger",
									"Toorc Icefist",
									"Maffer Dragonhand",
									"Wyand Voidbringer",
									"Bremm Sparkfist",
									"Mephisto",
									"Izual",
									"Hephasto The Armorer",
//									"Infector of Souls",
//									"Lord De Seis",
//									"Grand Vizier of Chaos",
//									"Diablo",
									"Dac Farren",
									"Shenk the Overseer",
									"Eldritch the Rectifier",
									"Thresh Socket",
									"Eyeback the Unleashed",
									"Sharptooth Slayer",
									"Frozenstein",
									"Bonesaw Breaker",
									"Snapchip Shatter",
//									"Nihlathak",
//									"Pindleskin",
//									"Talic",
//									"Korlic",
//									"Madawc",
//									"Colenzo the Annihilator",
//									"Achmel the Cursed",
//									"Bartuc the Bloody",
//									"Ventar the Unholy",
//									"Lister the Tormentor",
//									"Baal",
								];

	return(D2JSP_UTIL_GEN_CloneObject(npc_list));
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TDW_RS_GotoNPCs(in_params)
{
	return(TDW_RS_GotoNPCsBasic(((in_params == null) || (!in_params.length)) ?
		TDW_RS_GetNPCList() : in_params, false));
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TDW_RS_GotoNPCsBasic(npc_list, attack_flag)
{
	return(TDW_BOT_ATTACK_GenericNPCs(npc_list, null,
		TDW_PATHL_AREA_LOAD_FLAG_DEFAULT, attack_flag));
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TDW_RS_KillNPCs(in_params)
{
	return(TDW_RS_GotoNPCsBasic(((in_params == null) || (!in_params.length)) ?
		TDW_RS_GetNPCList() : in_params, true));
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TDW_RS_Goto(in_params)
{
	var return_code     = 0;
	var area_list       = new Array();
	var access_strategy = TDW_BOT_MOVE_GetDefaultLinkAccessStrategy();

	if (D2JSP_UTIL_GEN_TypeOfArray(in_params) && in_params.length) {
		for (var count_1 = 0; count_1 < in_params.length; count_1++) {
			var this_area = (D2JSP_UTIL_GEN_TypeOfString(in_params[count_1])) ?
				parseInt(in_params[count_1], 10) : in_params[count_1];
			if (!D2JSP_AREA_IsValidInGame(this_area)) {
				TDW_RS_SayError("Invalid destination area specified (" +
					in_params[count_1] + ").");
				return(-1);
			}
			area_list.push(this_area);
		}
	}

	if (area_list.length) {
		for (var count_1 = 0; count_1 < area_list.length; count_1++) {
			var this_area = area_list[count_1];
			access_strategy.callback_func(access_strategy,
				TDW_PATH_ASCB_MSG_STATUS, "Target area is number " + this_area +
				" (" + D2JSP_AREA_AreaToName(this_area) + ").");
			TDW_PATH_FixUpAct();
			if (me.act != D2JSP_AREA_GetAct(this_area)) {
				if (!D2JSP_AREA_IsTown(me.area))
					TDW_BOT_MOVE_RecoverInTown(false);
				TDW_MOVE_COMPAT_TownMove(D2JSP_AREA_GetAct(this_area), "waypoint");
			}
			if (me.area != this_area) {
				var path_links = TDW_PATH_ConstructTargetList(this_area, me.area,
					access_strategy, TDW_PATHL_AREA_LOAD_FLAG_DEFAULT);
				if (path_links == null)
					return(-1);
/*
				var last_area = this_area;
				for (var count_2 = (count_1 + 1); (count_2 < area_list.length) &&
					(me.act == D2JSP_AREA_GetAct(area_list[count_2])); count_2++) {
					TDW_PATH_ConstructTargetList(area_list[count_2], last_area,
						access_strategy, TDW_PATHL_AREA_LOAD_FLAG_DEFAULT);
					last_area = area_list[count_2];
				}
*/
				if ((!path_links.length) && (!D2JSP_AREA_IsTown(me.area))) {
					TDW_MOVE_ReturnToTown(null, null, 20, 50);
					TDW_BOT_MOVE_TownLogic(TDW_BOT_MOVE_TOWN_FLAG_NONE, TDW_ISF_Cfg);
//					TDW_MOVE_COMPAT_TownMove(D2JSP_AREA_GetAct(this_area), "waypoint");
					path_links = TDW_PATH_ConstructTargetList(this_area, me.area,
						access_strategy, TDW_PATHL_AREA_LOAD_FLAG_DEFAULT);
				}
				if ((path_links == null) || (!path_links.length))
					return(-1);
				if ((return_code = TDW_PATH_DoPathList(path_links,
					access_strategy)))
					return(return_code);
			}
//			return_code = TDW_PATH_GotoTargetArea(this_area, access_strategy,
//				TDW_PATHL_AREA_LOAD_FLAG_DEFAULT);
		}
	}
	else {
		TDW_RS_SayError("No destination area specified to which to go!!!");
		return_code = -1;
	}
		
	return(return_code);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TDW_RS_Tour(tour_params)
{
	var return_code = 0;
	var area_list   = new Array(5);

	area_list[0] = [
							D2JSP_AREA_BLOOD_MOOR,
							D2JSP_AREA_DEN_OF_EVIL,
							D2JSP_AREA_BLOOD_MOOR,
							D2JSP_AREA_COLD_PLAINS,
							D2JSP_AREA_CAVE_LEVEL_1,
							D2JSP_AREA_CAVE_LEVEL_2,
							D2JSP_AREA_CAVE_LEVEL_1,
							D2JSP_AREA_COLD_PLAINS,
							D2JSP_AREA_BURIAL_GROUNDS,
							D2JSP_AREA_CRYPT,
							D2JSP_AREA_BURIAL_GROUNDS,
							D2JSP_AREA_MAUSOLEUM,
							D2JSP_AREA_BURIAL_GROUNDS,
							D2JSP_AREA_COLD_PLAINS,
							D2JSP_AREA_STONY_FIELD,
							D2JSP_AREA_UNDERGROUND_PASSAGE_LEVEL_1,
							D2JSP_AREA_UNDERGROUND_PASSAGE_LEVEL_2,
							D2JSP_AREA_UNDERGROUND_PASSAGE_LEVEL_1,
							D2JSP_AREA_DARK_WOOD,
							D2JSP_AREA_BLACK_MARSH,
							D2JSP_AREA_FORGOTTEN_TOWER,
							D2JSP_AREA_TOWER_CELLAR_LEVEL_1,
							D2JSP_AREA_TOWER_CELLAR_LEVEL_2,
							D2JSP_AREA_TOWER_CELLAR_LEVEL_3,
							D2JSP_AREA_TOWER_CELLAR_LEVEL_4,
							D2JSP_AREA_TOWER_CELLAR_LEVEL_5,
							D2JSP_AREA_TOWER_CELLAR_LEVEL_4,
							D2JSP_AREA_TOWER_CELLAR_LEVEL_3,
							D2JSP_AREA_TOWER_CELLAR_LEVEL_2,
							D2JSP_AREA_TOWER_CELLAR_LEVEL_1,
							D2JSP_AREA_FORGOTTEN_TOWER,
							D2JSP_AREA_BLACK_MARSH,
							D2JSP_AREA_HOLE_LEVEL_1,
							D2JSP_AREA_HOLE_LEVEL_2,
							D2JSP_AREA_HOLE_LEVEL_1,
							D2JSP_AREA_BLACK_MARSH,
							D2JSP_AREA_TAMOE_HIGHLAND,
							D2JSP_AREA_PIT_LEVEL_1,
							D2JSP_AREA_PIT_LEVEL_2,
							D2JSP_AREA_PIT_LEVEL_1,
							D2JSP_AREA_TAMOE_HIGHLAND,
							D2JSP_AREA_MONASTERY_GATE,
							D2JSP_AREA_OUTER_CLOISTER,
							D2JSP_AREA_BARRACKS,
							D2JSP_AREA_JAIL_LEVEL_1,
							D2JSP_AREA_JAIL_LEVEL_2,
							D2JSP_AREA_JAIL_LEVEL_3,
							D2JSP_AREA_INNER_CLOISTER,
							D2JSP_AREA_CATHEDRAL,
							D2JSP_AREA_CATACOMBS_LEVEL_1,
							D2JSP_AREA_CATACOMBS_LEVEL_2,
							D2JSP_AREA_CATACOMBS_LEVEL_3,
							D2JSP_AREA_CATACOMBS_LEVEL_4
						];

	area_list[1] = [
							D2JSP_AREA_A2_SEWERS_LEVEL_1,
							D2JSP_AREA_A2_SEWERS_LEVEL_2,
							D2JSP_AREA_A2_SEWERS_LEVEL_3,
							D2JSP_AREA_A2_SEWERS_LEVEL_2,
							D2JSP_AREA_A2_SEWERS_LEVEL_1,
							D2JSP_AREA_LUT_GHOLEIN,
							D2JSP_AREA_ROCKY_WASTE,
							D2JSP_AREA_STONY_TOMB_LEVEL_1,
							D2JSP_AREA_STONY_TOMB_LEVEL_2,
							D2JSP_AREA_STONY_TOMB_LEVEL_1,
							D2JSP_AREA_ROCKY_WASTE,
							D2JSP_AREA_DRY_HILLS,
							D2JSP_AREA_HALLS_OF_THE_DEAD_LEVEL_1,
							D2JSP_AREA_HALLS_OF_THE_DEAD_LEVEL_2,
							D2JSP_AREA_HALLS_OF_THE_DEAD_LEVEL_3,
							D2JSP_AREA_HALLS_OF_THE_DEAD_LEVEL_2,
							D2JSP_AREA_HALLS_OF_THE_DEAD_LEVEL_1,
							D2JSP_AREA_DRY_HILLS,
							D2JSP_AREA_FAR_OASIS,
							D2JSP_AREA_MAGGOT_LAIR_LEVEL_1,
							D2JSP_AREA_MAGGOT_LAIR_LEVEL_2,
							D2JSP_AREA_MAGGOT_LAIR_LEVEL_3,
							D2JSP_AREA_MAGGOT_LAIR_LEVEL_2,
							D2JSP_AREA_MAGGOT_LAIR_LEVEL_1,
							D2JSP_AREA_FAR_OASIS,
							D2JSP_AREA_LOST_CITY,
							D2JSP_AREA_ANCIENT_TUNNELS,
							D2JSP_AREA_LOST_CITY,
							D2JSP_AREA_VALLEY_OF_SNAKES,
							D2JSP_AREA_CLAW_VIPER_TEMPLE_LEVEL_1,
							D2JSP_AREA_CLAW_VIPER_TEMPLE_LEVEL_2,
							D2JSP_AREA_HAREM_LEVEL_1,
							D2JSP_AREA_HAREM_LEVEL_2,
							D2JSP_AREA_PALACE_CELLAR_LEVEL_1,
							D2JSP_AREA_PALACE_CELLAR_LEVEL_2,
							D2JSP_AREA_PALACE_CELLAR_LEVEL_3,
							D2JSP_AREA_ARCANE_SANCTUARY,
							D2JSP_AREA_CANYON_OF_THE_MAGI,
							D2JSP_AREA_TAL_RASHAS_TOMB1,
							D2JSP_AREA_TAL_RASHAS_TOMB2,
							D2JSP_AREA_TAL_RASHAS_TOMB3,
							D2JSP_AREA_TAL_RASHAS_TOMB4,
							D2JSP_AREA_TAL_RASHAS_TOMB5,
							D2JSP_AREA_TAL_RASHAS_TOMB6,
							D2JSP_AREA_TAL_RASHAS_TOMB7,
						];

	area_list[2] = [
//							D2JSP_AREA_SPIDER_FOREST,
//							D2JSP_AREA_SPIDER_CAVE,
//							D2JSP_AREA_SPIDER_FOREST,
//							D2JSP_AREA_SPIDER_CAVERN,
//							D2JSP_AREA_SPIDER_FOREST,
//							D2JSP_AREA_GREAT_MARSH,
//							D2JSP_AREA_FLAYER_JUNGLE,
							D2JSP_AREA_SWAMPY_PIT_LEVEL_1,
							D2JSP_AREA_SWAMPY_PIT_LEVEL_2,
							D2JSP_AREA_SWAMPY_PIT_LEVEL_3,
							D2JSP_AREA_SWAMPY_PIT_LEVEL_2,
							D2JSP_AREA_SWAMPY_PIT_LEVEL_1,
							D2JSP_AREA_FLAYER_JUNGLE,
							D2JSP_AREA_FLAYER_DUNGEON_LEVEL_1,
							D2JSP_AREA_FLAYER_DUNGEON_LEVEL_2,
							D2JSP_AREA_FLAYER_DUNGEON_LEVEL_3,
							D2JSP_AREA_FLAYER_DUNGEON_LEVEL_2,
							D2JSP_AREA_FLAYER_DUNGEON_LEVEL_1,
							D2JSP_AREA_FLAYER_JUNGLE,
							D2JSP_AREA_LOWER_KURAST,
							D2JSP_AREA_KURAST_BAZAAR,
							D2JSP_AREA_RUINED_TEMPLE,
							D2JSP_AREA_KURAST_BAZAAR,
							D2JSP_AREA_DISUSED_FANE,
							D2JSP_AREA_KURAST_BAZAAR,
							D2JSP_AREA_A3_SEWERS_LEVEL_1,
							D2JSP_AREA_A3_SEWERS_LEVEL_2,
							D2JSP_AREA_A3_SEWERS_LEVEL_1,
							D2JSP_AREA_KURAST_BAZAAR,
							D2JSP_AREA_UPPER_KURAST,
							D2JSP_AREA_FORGOTTEN_RELIQUARY,
							D2JSP_AREA_UPPER_KURAST,
							D2JSP_AREA_FORGOTTEN_TEMPLE,
							D2JSP_AREA_UPPER_KURAST,
							D2JSP_AREA_A3_SEWERS_LEVEL_1,
							D2JSP_AREA_A3_SEWERS_LEVEL_2,
							D2JSP_AREA_A3_SEWERS_LEVEL_1,
							D2JSP_AREA_UPPER_KURAST,
							D2JSP_AREA_KURAST_CAUSEWAY,
							D2JSP_AREA_RUINED_FANE,
							D2JSP_AREA_KURAST_CAUSEWAY,
							D2JSP_AREA_DISUSED_RELIQUARY,
							D2JSP_AREA_KURAST_CAUSEWAY,
							D2JSP_AREA_TRAVINCAL,
							D2JSP_AREA_DURANCE_OF_HATE_LEVEL_1,
							D2JSP_AREA_DURANCE_OF_HATE_LEVEL_2,
							D2JSP_AREA_DURANCE_OF_HATE_LEVEL_3
						];

	area_list[3] = [
							D2JSP_AREA_OUTER_STEPPES,
							D2JSP_AREA_PLAINS_OF_DESPAIR,
							D2JSP_AREA_CITY_OF_THE_DAMNED,
							D2JSP_AREA_RIVER_OF_FLAME,
							D2JSP_AREA_CHAOS_SANCTUM
						];

	area_list[4] = [
						D2JSP_AREA_BLOODY_FOOTHILLS,
						D2JSP_AREA_RIGID_HIGHLANDS,
						D2JSP_AREA_HELL1,
						D2JSP_AREA_RIGID_HIGHLANDS,
						D2JSP_AREA_ARREAT_PLATEAU,
						D2JSP_AREA_HELL2,
						D2JSP_AREA_ARREAT_PLATEAU,
						D2JSP_AREA_CRYSTALIZED_CAVERN_LEVEL_1,
						D2JSP_AREA_CELLAR_OF_PITY,
						D2JSP_AREA_CRYSTALIZED_CAVERN_LEVEL_1,
						D2JSP_AREA_CRYSTALIZED_CAVERN_LEVEL_2,
						D2JSP_AREA_ECHO_CHAMBER,
						D2JSP_AREA_CRYSTALIZED_CAVERN_LEVEL_2,
						D2JSP_AREA_TUNDRA_WASTELANDS,
						D2JSP_AREA_HELL3,
						D2JSP_AREA_TUNDRA_WASTELANDS,
						D2JSP_AREA_GLACIAL_CAVES_LEVEL_1,
						D2JSP_AREA_GLACIAL_CAVES_LEVEL_2,
						D2JSP_AREA_GLACIAL_CAVES_LEVEL_1,
						D2JSP_AREA_ROCKY_SUMMIT,
						D2JSP_AREA_THE_WORLDSTONE_KEEP_LEVEL_1,
						D2JSP_AREA_THE_WORLDSTONE_KEEP_LEVEL_2,
						D2JSP_AREA_THE_WORLDSTONE_KEEP_LEVEL_3,
						D2JSP_AREA_THRONE_OF_DESTRUCTION
						];

/*
	var area_list[4] = [
									D2JSP_AREA_BLOODY_FOOTHILLS,
									D2JSP_AREA_RIGID_HIGHLANDS,
//									D2JSP_AREA_HELL1,
//									D2JSP_AREA_RIGID_HIGHLANDS,
									D2JSP_AREA_ARREAT_PLATEAU,
//									D2JSP_AREA_HELL2,
//									D2JSP_AREA_ARREAT_PLATEAU,
									D2JSP_AREA_CRYSTALIZED_CAVERN_LEVEL_1
								];
	area_list[0] = [
							D2JSP_AREA_JAIL_LEVEL_2,
							D2JSP_AREA_JAIL_LEVEL_3,
							D2JSP_AREA_INNER_CLOISTER,
							D2JSP_AREA_CATHEDRAL,
							D2JSP_AREA_CATACOMBS_LEVEL_1,
						];
*/


	var act              = me.act;
	var inited_area_list = TDW_PATH_GetInitedAreas();

	if (D2JSP_UTIL_GEN_TypeOfArray(tour_params) && tour_params.length) {
		if ((tour_params[0] < 1) || (tour_params[0] > 5)) {
			TDW_RS_SayError("Invalid tour act specified (" + tour_params[0] + ").");
			return(-1);
		}
		act = tour_params[0];
	}
		
	if (me.act != act) {
		if (!D2JSP_AREA_IsTown(me.area))
			TDW_BOT_MOVE_RecoverInTown(false);
		TDW_MOVE_COMPAT_TownMove(act, "waypoint");
	}

	var tmp_area_list = D2JSP_UTIL_GEN_CloneObject(area_list);

	if (act == 3) {
for (var count_1 = 0; count_1 < tmp_area_list[2].length; count_1++)
	TDW_BOT_Log.logInfoQuiet("ACT 3 TOUR BEFORE: " +
		D2JSP_UTIL_FORMAT_RJust(count_1, 5) + ": " +
		D2JSP_UTIL_FORMAT_RJust(tmp_area_list[2][count_1], 3) + " = " +
		D2JSP_AREA_AreaToName(tmp_area_list[2][count_1]));
		TDW_PATH_FixUpAct();
		var tmp_list = new Array();
		if (TDW_PATH_AreaLink[D2JSP_AREA_SPIDER_FOREST].
			getLinkForSource(D2JSP_AREA_GREAT_MARSH) &&
			TDW_PATH_AreaLink[D2JSP_AREA_GREAT_MARSH].
			getLinkForSource(D2JSP_AREA_FLAYER_JUNGLE))
			tmp_list.push(D2JSP_AREA_SPIDER_FOREST,
				D2JSP_AREA_GREAT_MARSH, D2JSP_AREA_FLAYER_JUNGLE);
		else if (TDW_PATH_AreaLink[D2JSP_AREA_SPIDER_FOREST].
			getLinkForSource(D2JSP_AREA_GREAT_MARSH))
			tmp_list.push(D2JSP_AREA_SPIDER_FOREST,
				D2JSP_AREA_GREAT_MARSH, D2JSP_AREA_SPIDER_FOREST,
				D2JSP_AREA_FLAYER_JUNGLE);
		else
			tmp_list.push(D2JSP_AREA_SPIDER_FOREST,
				D2JSP_AREA_FLAYER_JUNGLE, D2JSP_AREA_GREAT_MARSH,
				D2JSP_AREA_FLAYER_JUNGLE);
		tmp_area_list[2] = tmp_list.concat(tmp_area_list[2]);
for (var count_1 = 0; count_1 < tmp_area_list[2].length; count_1++)
	TDW_BOT_Log.logInfoQuiet("ACT 3 TOUR AFTER : " +
		D2JSP_UTIL_FORMAT_RJust(count_1, 5) + ": " +
		D2JSP_UTIL_FORMAT_RJust(tmp_area_list[2][count_1], 3) + " = " +
		D2JSP_AREA_AreaToName(tmp_area_list[2][count_1]));
	}

	TDW_BOT_AttackNPCSpec.setDoAttackOff();

	TDW_RS_Goto(tmp_area_list[act - 1])

	TDW_PATH_FreeInitedAreas(inited_area_list, TDW_BOT_Log);

	return(0);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
/*
	CODE NOTE: To be removed.
function TDW_RS_TourAct(act, area_list)
{
	var return_code = 0;
	var access_strategy = new TDW_PATH_LinkAccessStrategy(
		TDW_BOT_MOVE_DefaultAccessStrategy, null, 35);
//	var area_list       = D2JSP_UTIL_GEN_CloneObject(area_list);

	if (me.act != act)
		TDW_MOVE_COMPAT_TownMove(act, "waypoint");

	if (act == 3) {
		print("Starting in Flayer Jungle until Great Marsh issues are resolved.");
		TDW_MOVE_COMPAT_TownMove("waypoint");
		if (TDW_BOT_MOVE_WaypointOutbound(D2JSP_AREA_FLAYER_JUNGLE))
			return(-1);
	}

//TDW_MOVE_COMPAT_TownMove(act, "exit");

	for (var count_1 = 0; count_1 < 2; count_1++) {
		for (var count_2 = 0; count_2 < area_list.length; count_2++) {
			if (return_code = TDW_PATH_GotoTargetArea(area_list[count_2],
				access_strategy, TDW_PATHL_AREA_LOAD_FLAG_DEFAULT))
				break;
		}
		if (return_code)
			break;
		print(D2JSP_UTIL_COLOR_GREEN + "Made it to " +
			D2JSP_AREA_AreaToName() + "!!!");
		// Pop the last area (we're already there).
		area_list.pop();
		//	Reverse in order to go back from whence we came.
		area_list.reverse();
		// And push starting town as the final destination.
//		if (act != 3)
		if ((act != 1) && (act != 3))
			area_list.push(D2JSP_AREA_AreaToTown());
	}

	return(return_code);
}
*/
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TDW_RS_PopArea(in_params)
{
	return(TDW_BOTLIB_ClearArea(in_params, null,
		TDW_BOTLIB_CLEARAREA_FLAG_NO_KILL, TDW_PATHL_AREA_LOAD_FLAG_DEFAULT |
		TDW_PATHL_AREA_LOAD_FLAG_COLL_DATA_COMPLEX));
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TDW_RS_ClearArea(in_params)
{
	return(TDW_BOTLIB_ClearArea(in_params, null, TDW_BOTLIB_CLEARAREA_FLAG_NONE,
		TDW_PATHL_AREA_LOAD_FLAG_DEFAULT |
		TDW_PATHL_AREA_LOAD_FLAG_COLL_DATA_COMPLEX));
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TDW_RS_ChestPop()
{
	var return_code     = 0;

	var area_list =	[
						D2JSP_AREA_BLOODY_FOOTHILLS,
						D2JSP_AREA_RIGID_HIGHLANDS,
						D2JSP_AREA_HELL1,
						D2JSP_AREA_RIGID_HIGHLANDS,
						D2JSP_AREA_ARREAT_PLATEAU,
						D2JSP_AREA_HELL2,
						D2JSP_AREA_ARREAT_PLATEAU,
						D2JSP_AREA_CRYSTALIZED_CAVERN_LEVEL_1,
						D2JSP_AREA_CELLAR_OF_PITY,
						D2JSP_AREA_CRYSTALIZED_CAVERN_LEVEL_1,
						D2JSP_AREA_CRYSTALIZED_CAVERN_LEVEL_2,
						D2JSP_AREA_ECHO_CHAMBER,
						D2JSP_AREA_CRYSTALIZED_CAVERN_LEVEL_2,
						D2JSP_AREA_TUNDRA_WASTELANDS,
						D2JSP_AREA_HELL3,
						D2JSP_AREA_TUNDRA_WASTELANDS,
						D2JSP_AREA_GLACIAL_CAVES_LEVEL_1,
						D2JSP_AREA_GLACIAL_CAVES_LEVEL_2,
						D2JSP_AREA_GLACIAL_CAVES_LEVEL_1,
						D2JSP_AREA_ROCKY_SUMMIT,
						D2JSP_AREA_THE_WORLDSTONE_KEEP_LEVEL_1,
						D2JSP_AREA_THE_WORLDSTONE_KEEP_LEVEL_2,
						D2JSP_AREA_THE_WORLDSTONE_KEEP_LEVEL_3,
						D2JSP_AREA_THRONE_OF_DESTRUCTION
					];

	return(TDW_BOTLIB_ClearArea(area_list, null,
		TDW_BOTLIB_CLEARAREA_FLAG_NO_KILL, TDW_PATHL_AREA_LOAD_FLAG_DEFAULT |
		TDW_PATHL_AREA_LOAD_FLAG_COLL_DATA_COMPLEX));

	return(return_code);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TDW_RS_DoSpecialChests()
{
	var return_code;
	var chest_list = D2JSP_UTIL_GEN_CloneObject(TDW_PATHL_SpecialChestList);

	var access_strategy = TDW_BOT_MOVE_GetDefaultLinkAccessStrategy();

	TDW_BOT_AttackNPCSpec = new TDW_BOT_ATTACK_SpecialNPCSpec();

	for (var count_1 = 0; count_1 < chest_list.length; count_1++) {
//if (chest_list[count_1].dst_area < D2JSP_AREA_DURANCE_OF_HATE_LEVEL_3)
//	continue;
if (chest_list[count_1].dst_area == me.area)
	continue;
		var this_chest = chest_list[count_1];
		if ((me.act == 2) && (this_chest.dst_area == getRoom(0).correcttomb)) {
			access_strategy.callback_func(access_strategy,
				TDW_PATH_ASCB_MSG_STATUS, "Target area number " +
					this_chest.dst_area + " (" +
					D2JSP_AREA_AreaToName(this_chest.dst_area) + ") skipped " +
					"because it is the True Tomb of Tal Rasha.");
			continue;
		}
		access_strategy.callback_func(access_strategy,
			TDW_PATH_ASCB_MSG_STATUS, "Target area is number " +
			this_chest.dst_area + " (" +
			D2JSP_AREA_AreaToName(this_chest.dst_area) + ").");
		if (TDW_PATH_GotoTargetArea(this_chest.dst_area, access_strategy,
			TDW_PATHL_AREA_LOAD_FLAG_DEFAULT))
			continue;
/*
		var coord_list = TDW_PATH_GetPresetCoordsList(this_chest.room_spec,
			D2JSP_UTIL_GETUNIT_OBJECT, this_chest.unit_id_spec,
			this_chest.first_only_flag);
*/
		var coord_list = TDW_PATHL_FindSpecialChestListInAreaPresetCoordsList();
		coord_list = D2JSP_UTIL_PATH_ProgressivePathSort(coord_list);
		if (coord_list.length == 1) {
			if (return_code = access_strategy.callback_func(access_strategy,
				TDW_PATH_ASCB_GOTO_XYPAIR, coord_list[0]))
				continue;
			TDW_BOT_SUPP_PopNearbyChests(
				TDW_BOT_ContextList["mysnagit.pop.chests.radius"], coord_list[0]);
			var adj_coords = new Array();
			var adj_list   = TDW_PATH_GetAdjacentRoomsByXYPair(coord_list[0]);
			for (var count_2 = 0; count_2 < adj_list.length; count_2++) {
				var center = adj_list[count_2].getCenterAccessible();
				if (center != null) {
					access_strategy.callback_func(access_strategy,
						TDW_PATH_ASCB_GOTO_XYPAIR, center);
					TDW_BOT_SUPP_PopNearbyChests(
						TDW_BOT_ContextList["mysnagit.pop.chests.radius"], center);
					adj_coords.push(center);
					if (adj_coords.length == 3)
						break;
				}
			}
			adj_coords.push(coord_list[0]);
			adj_coords.reverse();
			for (var count_2 = 0; count_2 < adj_coords.length; count_2++) {
				access_strategy.callback_func(access_strategy,
					TDW_PATH_ASCB_GOTO_XYPAIR, adj_coords[count_2]);
				TDW_BOT_SUPP_MySnagIt(adj_coords[count_2]);
			}
		}
		else if (coord_list.length > 1) {
			for (var count_2 = 0; count_2 < 2; count_2++) {
				for (var count_3 = 0; count_3 < coord_list.length; count_3++) {
					access_strategy.callback_func(access_strategy,
						TDW_PATH_ASCB_GOTO_XYPAIR, coord_list[count_3]);
					if (!count_2)
						TDW_BOT_SUPP_PopNearbyChests(
							TDW_BOT_ContextList["mysnagit.pop.chests.radius"],
							coord_list[count_3]);
					else
						TDW_BOT_SUPP_MySnagIt(coord_list[count_3]);
				}
//				coord_list.reverse();
			}
		}
		if (D2JSP_COMM_CountTomesLessThan("tbk", 10) ||
			D2JSP_COMM_CountKeysLessThan(6)) {
//			TDW_BOT_MOVE_RecoverInTown(true);
			var start_area = me.area;
			TDW_MOVE_ReturnToTown(TDW_BOT_CHECK_ChickenChecksBasicMe);
			TDW_BOT_MOVE_TownLogic(TDW_BOT_MOVE_TOWN_FLAG_FILL_ALL |
				((TDW_BOT_ContextList["mercernary.needed"]) ?
				TDW_BOT_MOVE_TOWN_FLAG_MERC_NEEDED :
				TDW_BOT_MOVE_TOWN_FLAG_NONE), TDW_ISF_Cfg);
			TDW_MOVE_COMPAT_TownMove("portalspot");
			TDW_BOT_CHECK_PrecastChecks(30000);
			TDW_MOVE_LookForAndTakePortal(start_area, me.name, 50, 50, false);
			if (me.area != start_area) {
				TDW_RS_SayError("Unable to return to " +
					D2JSP_AREA_AreaToName(start_area) + ".");
				return(-2);
			}
		}
	}

	return(return_code);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TDW_RS_CatapultKill()
{
	var return_code     = 0;
	var access_strategy = TDW_BOT_MOVE_GetDefaultLinkAccessStrategy();
	var area_list       = [	D2JSP_AREA_BLOODY_FOOTHILLS,
									D2JSP_AREA_RIGID_HIGHLANDS,
									D2JSP_AREA_ARREAT_PLATEAU,
									D2JSP_AREA_TUNDRA_WASTELANDS];

	if (me.act != 5)
		TDW_BOT_MOVE_RecoverInTown(false);

	if (me.area != D2JSP_AREA_HARROGATH)
		TDW_MOVE_COMPAT_TownMove(5, "waypoint");

	for (var count_1 = 0; count_1 < area_list.length; count_1++) {
		if (return_code = TDW_PATH_GotoTargetArea(area_list[count_1],
			access_strategy, TDW_PATHL_AREA_LOAD_FLAG_DEFAULT))
			continue;
		var coord_list = TDW_PATH_GetPresetCoordsList(null,
			D2JSP_UTIL_GETUNIT_NPC, [497, 498]);
		if (coord_list.length) {
			coord_list = D2JSP_UTIL_PATH_ProgressivePathSort(coord_list);
			while (coord_list.length) {
				if (access_strategy.callback_func(access_strategy,
					TDW_PATH_ASCB_GOTO_XYPAIR_LOCAL, coord_list[0]))
					return(-1);
				coord_list.shift();
			}
		}
	}

	return(return_code);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TDW_RS_AcquireWaypointsAll()
{
	var return_code      = 0;
	var wp_needed_count  = 0;
	var wp_done_count    = 0;
	var access_strategy  = TDW_BOT_MOVE_GetDefaultLinkAccessStrategy();
	var wp_access        = access_strategy.wp_access;
	var inited_area_list = TDW_PATH_GetInitedAreas();

	TDW_BOT_AttackNPCSpec.setDoAttackOff();

	for (var count_1 = 0; count_1 < wp_access.length; count_1++) {
		if (!wp_access[count_1][0])
			break;
		for (var count_2 = 0; count_2 < wp_access[count_1].length; count_2++) {
			if ((!wp_access[count_1][count_2]) &&
            (D2JSP_WayPoints[count_1][count_2] !=
				D2JSP_AREA_HALLS_OF_DEATHS_CALLING))
				wp_needed_count++;
		}
	}

	for (var count_1 = 0; count_1 < wp_access.length; count_1++) {
		TDW_PATH_FreeInitedAreas(inited_area_list, TDW_BOT_Log);
		inited_area_list = TDW_PATH_GetInitedAreas();
		area_list        = new Array();
		for (var count_2 = 0; count_2 < wp_access[count_1].length; count_2++) {
			var area_number = D2JSP_WayPoints[count_1][count_2];
			if ((!wp_access[count_1][count_2]) &&
				(area_number != D2JSP_AREA_HALLS_OF_DEATHS_CALLING) &&
				(!D2JSP_AREA_IsTown(area_number)))
				area_list.push(area_number);
		}
		if (!area_list.length)
			continue;
		if (me.act != D2JSP_AREA_GetAct(D2JSP_WayPoints[count_1][0])) {
			if (!D2JSP_AREA_IsTown(me.area))
				TDW_BOT_MOVE_RecoverInTown(false);
			TDW_MOVE_COMPAT_TownMove(D2JSP_AREA_GetAct(D2JSP_WayPoints[count_1][0]),
				"waypoint");
		}
		for (var count_2 = 0; count_2 < wp_access[count_1].length; count_2++) {
			if (!wp_access[count_1][count_2]) {
				var area_number = D2JSP_WayPoints[count_1][count_2];
				var return_code = TDW_BOT_WP_AcquireWaypointOneBasic(area_number,
					access_strategy, false);
				if (!return_code)
					wp_done_count++;
				else if (return_code < 0)
					break;
			}
		}
	}

	TDW_RS_SayStatus("Waypoints needed = " + wp_needed_count +
		" / waypoints done = " + wp_done_count);

	TDW_PATH_FreeInitedAreas(inited_area_list, TDW_BOT_Log);

	return(return_code);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TDW_RS_GiveWaypoints(in_params)
{
	var return_code      = 0;
	var area_list        = new Array();
	var access_strategy  = TDW_BOT_MOVE_GetDefaultLinkAccessStrategy();
	var inited_area_list = TDW_PATH_GetInitedAreas();

	if (D2JSP_UTIL_GEN_TypeOfArray(in_params) && in_params.length) {
		for (var count_1 = 0; count_1 < in_params.length; count_1++) {
			var this_area = (D2JSP_UTIL_GEN_TypeOfString(in_params[count_1])) ?
				parseInt(in_params[count_1], 10) : in_params[count_1];
			if (!D2JSP_AREA_IsValidInGame(this_area))
				TDW_RS_SayWarning("Invalid destination area specified (" +
					in_params[count_1] + ") --- ignored.");
			else if (D2JSP_AREA_IsTown(this_area))
				TDW_RS_SayWarning("Destination area specified (" +
					in_params[count_1] + ") is a town --- ignored.");
			else if (!D2JSP_AREA_HasWayPoint(this_area))
				TDW_RS_SayWarning("Destination area specified (" +
					in_params[count_1] + ") does not have a waypoint --- ignored.");
			else
				area_list.push(this_area);
		}
	}

	if (!area_list.length) {
		TDW_RS_SayError("No valid areas specified.");
		return(-1);
	}

	TDW_BOT_AttackNPCSpec.setDoAttackOff();

	for (var count_1 = 0; count_1 < area_list.length; count_1++) {
		var this_area = area_list[count_1];
		access_strategy.action_flags = TDW_BOT_SUPP_TP2DEST_FLAG_NONE;
		access_strategy.move_control = null;
		access_strategy.callback_func(access_strategy, TDW_PATH_ASCB_MSG_STATUS,
			"Target area is number " + this_area +
			" (" + D2JSP_AREA_AreaToName(this_area) + ").");
		TDW_BOT_CHECK_PrecastChecks(30000);
		if (TDW_BOT_WP_GotoWaypoint(this_area, access_strategy)) {
			D2JSP_UTIL_BNET_SaySafe("&CancelQuestRequest");
			continue;
		}
		if (TDW_RS_FinalDelay(D2JSP_AREA_AreaToName() + " waypoint acquisition",
			30, null, "AcquireWaypoint=" + this_area) < 0) {
			TDW_RS_SayOrders("Waypoint acquistion aborted. Return to town.",
				"ReturnToTown");
			break;
		}
	}

	TDW_PATH_FreeInitedAreas(inited_area_list, TDW_BOT_Log);

	return(return_code);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TDW_RS_DoAct1_DenOfEvil()
{
	var this_act   = 0;
	var this_quest = 1;
	var this_wait  = TDW_RS_DefaultWaits[this_act][this_quest];
	var return_code;

	if (TDW_BOT_MOVE_GotoActTown(1))
		return(-1);

	var access_strategy = TDW_BOT_MOVE_GetDefaultLinkAccessStrategy();

	TDW_BOT_AttackNPCSpec.copyFromMaster("Corpsefire");
	TDW_BOT_AttackNPCSpec.setMustKillOn("Corpsefire");
	TDW_BOT_AttackNPCSpec.setDoAttackOn();

	if (me.area == D2JSP_AREA_ROGUE_ENCAMPMENT)
		TDW_BOT_CHECK_PrecastChecks();
	else if (TDW_BOT_MOVE_WaypointOutbound(D2JSP_AREA_ROGUE_ENCAMPMENT))
		return(-1);

	if (!(return_code = TDW_PATH_DoSourceList([D2JSP_AREA_BLOOD_MOOR,
		D2JSP_AREA_DEN_OF_EVIL], null, access_strategy))) {
		if (!TDW_MOVE_OpenTownPortal()) {
			TDW_RS_SayOrders("Take my TP *NOW* for the Den of Evil quest.",
				"A1Q1_1");
			var start_coord = [me.x, me.y];
			var coord_list  = TDW_PATH_GetCenterList();
			for (var count_1 = 0; count_1 < 2; count_1++) {
				coord_list = D2JSP_UTIL_PATH_ProgressivePathSort(coord_list);
				TDW_RS_SayStatus("Performing pass " + (count_1 + 1) +
					" of the Den of Evil clearance.");
				var new_coord_list = new Array();
				while (coord_list.length) {
					var next_room  = TDW_PATH_FindRoomByXYPair(coord_list[0]);
					if (next_room && (!next_room.isExcluded())) {
						next_center = next_room.getCenterAccessible();
						if (next_center) {
							TDW_BOT_MOVE_TeleportToDestination(next_center,
								TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_ALL);
							new_coord_list.push(next_center);
						}
					}
					coord_list.shift();
				}
				coord_list = new_coord_list;
			}
			TDW_RS_SayOrders("Return to town and speak with Akara.", "A1Q1_2");
		}
		else {
			TDW_RS_SayError("Unable to use Tome of Town Portal.");
			return_code = -1;
		}
	}

	return(return_code);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TDW_RS_DoAct1_BloodRaven()
{
	var this_act   = 0;
	var this_quest = 1;
	var this_wait  = TDW_RS_DefaultWaits[this_act][this_quest];
	var return_code;

	if (TDW_BOT_MOVE_GotoActTown(1))
		return(-1);

	var access_strategy = TDW_BOT_MOVE_GetDefaultLinkAccessStrategy();

	TDW_BOT_AttackNPCSpec.copyFromMaster("Blood Raven");
	TDW_BOT_AttackNPCSpec.setMustKillOn("Blood Raven");
	TDW_BOT_AttackNPCSpec.setDoAttackOn();

	TDW_BOT_CHECK_PrecastChecks();

	if ((return_code = TDW_PATH_GotoTargetArea(D2JSP_AREA_BURIAL_GROUNDS,
		access_strategy, TDW_PATHL_AREA_LOAD_FLAG_DEFAULT)))
		return_code = -1;
	else {
		TDW_BOT_CHECK_PrecastChecks();
		var npc_list = TDW_PATH_GetPresetList(null, D2JSP_UTIL_GETUNIT_NPC, 580,
			true);
		if (npc_list.length)
			TDW_BOT_MOVE_TeleportToDestination([npc_list[0].area_x,
				npc_list[0].area_y], TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_NONE);
		if (TDW_BOT_AttackNPCSpec.findNPC("Blood Raven"))
			TDW_BOT_MOVE_TeleportToDestinationList(
				D2JSP_UTIL_PATH_ProgressivePathSort(
				TDW_PATH_GetCenterAccessibleList()),
				TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_NONE);
	}

	return(return_code);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TDW_RS_DoAct1_TreeOfInifuss()
{
	var this_act   = 0;
	var this_quest = 3;
	var this_wait  = TDW_RS_DefaultWaits[this_act][this_quest];
	var return_code;
	var count_1;
	var count_2;

var TDW_RS_Act1_TreeOfInifuss = "Inifuss";

	var quest_done      = D2JSP_QUEST_GetQuestDone(1, 3);
	var access_strategy = TDW_BOT_MOVE_GetDefaultLinkAccessStrategy();

// After Akara, the scroll is named 'Key to the Cairn Stones', classid=525

	if (TDW_BOT_MOVE_GotoActTown(1))
		return(-1);

	TDW_BOT_AttackNPCSpec.copyFromMaster("Treehead Woodfist");
	TDW_BOT_AttackNPCSpec.setMustKillOn("Treehead Woodfist");
	TDW_BOT_AttackNPCSpec.setDoAttackOn();

	TDW_BOT_CHECK_PrecastChecks();
	if (TDW_PATH_GotoTargetArea(D2JSP_AREA_DARK_WOOD, access_strategy,
		TDW_PATHL_AREA_LOAD_FLAG_DEFAULT))
		return(-1);
	TDW_BOT_CHECK_PrecastChecks();

	if (TDW_BOT_MOVE_GotoRoom(161, TDW_PATH_MAP_BUILD_FLAG_NO_ACCESS_CHECK))
		return(-1);

	var desired_spot = [me.x, me.y];

	for (count_1 = 0; count_1 < 100; count_1++) {
		var tree_obj = getUnit(D2JSP_UTIL_GETUNIT_OBJECT,
			TDW_RS_Act1_TreeOfInifuss);
		if (tree_obj) {
			desired_spot = [tree_obj.x, tree_obj.y];
			break;
		}
		TDW_BOT_MOVE_DoArrival(TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_ALL, desired_spot);
		TDW_BOT_MOVE_DoDeparture(TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_ALL, desired_spot);
		delay(100);
	}

	TDW_BOT_MOVE_TeleportToDestination(desired_spot,
		TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_ALL);

	TDW_RS_SayStatus("Clearing area around the Tree of " +
		TDW_RS_Act1_TreeOfInifuss);
	for (count_1 = -30; count_1 <= 30; count_1 += 30) {
		for (count_2 = -30; count_2 <= 30; count_2 += 30) {
			TDW_BOT_MOVE_TeleportToDestination([desired_spot[0] + count_1,
				desired_spot[1] + count_2], TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_ALL);
			delay(100);
		}
	}

	// Open the Tree of Inifuss and look for the Scroll
	if ((!quest_done) && (!D2JSP_ITEM_HasScrollOfInifuss()) &&
		(!D2JSP_ITEM_HasKeyToTheCairnStones()))
		TDW_BOT_RUSH_ManageQuestUnit(true, "Tree of Inifuss", 30,
			D2JSP_MODE_OBJECT_OPERATING, "Scroll of Inifuss", "bks");
	else
		TDW_BOT_MOVE_TeleportToDestination(desired_spot,
			TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_ALL);

	if (TDW_MOVE_OpenTownPortal()) {
		TDW_RS_SayError("Unable to use Tome of Town Portal.");
		return(-1);
	}

	TDW_RS_SayOrders("Take my TP to the Tree of Inifuss and retrieve the Scroll",
		"A1Q3_1");

	return(0);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TDW_RS_DoAct1_CairnStones()
{
	var this_act   = 0;
	var this_quest = 3;
	var this_wait  = TDW_RS_DefaultWaits[this_act][this_quest];
	var return_code;
	var count_1;
	var count_2;

/*
	StoneAlpha		= Class ID 17
	StoneDelta		= Class ID 20
	StoneLambda		= Class ID 21
	StoneTheta		= Class ID 22 (Stand-alone stone which is not used)
	StoneGamma		= Class ID 19
	StoneBeta		= Class ID 18

	In additon, the mode of object class ID 61 ("Dummy") changes as the Cairn
	Stones are activated. Before any are activated, its mode is 0. It becomes
	2 after the first stone is activated and increments by one for each
	subsequent stone.
*/

	if (TDW_BOT_MOVE_GotoActTown(1))
		return(-1);

	var access_strategy = TDW_BOT_MOVE_GetDefaultLinkAccessStrategy();

/*
	TDW_BOT_CHECK_PrecastChecks();
	if (TDW_PATH_GotoTargetArea(D2JSP_AREA_STONY_FIELD, access_strategy,
		TDW_PATHL_AREA_LOAD_FLAG_DEFAULT))
		return(-1);
	TDW_BOT_CHECK_PrecastChecks();

	if (TDW_BOT_MOVE_GotoRoom(160, TDW_PATH_MAP_BUILD_FLAG_NO_ACCESS_CHECK))
		return(-1);

	var desired_spot = [me.x, me.y];

	for (count_1 = 0; count_1 < 100; count_1++) {
		var results_data;
		results_data = D2JSP_OBJ_IterateObject(TDW_MOVE_Act1_CairnStones,
			D2JSP_OBJ_FilterName, D2JSP_OBJ_ActionStop);
		if (results_data[D2JSP_OBJ_ACTION_COUNT]) {
			desired_spot = [results_data[D2JSP_OBJ_LAST_OBJECT].x,
				results_data[D2JSP_OBJ_LAST_OBJECT].y];
			break;
		}
		TDW_BOT_MOVE_DoArrival(TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_ALL, desired_spot);
		TDW_BOT_MOVE_DoDeparture(TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_ALL, desired_spot);
		delay(100);
	}

	TDW_BOT_MOVE_TeleportToDestination(desired_spot,
		TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_ALL);

	TDW_BOT_MOVE_TeleportToDestination(desired_spot,
		TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_ALL);

	var target_obj;
*/

	if (TDW_BOT_MOVE_GotoActTownForArea(D2JSP_AREA_STONY_FIELD))
		return(-1);

	TDW_BOT_AttackNPCSpec.copyFromMaster("Rakanishu");
	TDW_BOT_AttackNPCSpec.setMustKillOn("Rakanishu");
	TDW_BOT_AttackNPCSpec.setDoAttackOn();

	TDW_RS_SayStatus("Analyzing " +
		D2JSP_AREA_AreaToName(D2JSP_AREA_STONY_FIELD) +
		" topology to determine safe rushee clearance area...");

	if (TDW_BOT_ClearRoomsNearbyByRoomNumber(D2JSP_AREA_STONY_FIELD, 160,
		TDW_BOT_CLEAR_ROOMS_NEARBY_FLAG_CLEAR_TARGET |
		TDW_BOT_CLEAR_ROOMS_NEARBY_FLAG_END_TARGET |
		TDW_BOT_CLEAR_ROOMS_NEARBY_FLAG_DEPTH_2, access_strategy,
		"Clearing the area around the Cairn Stones..."))
		return(-1);

	var desired_spot = [me.x, me.y];

	if (D2JSP_COMM_CountIdleCairnStones(TDW_MOVE_Act1_CairnStones)) {
/*
		TDW_RS_SayStatus("Clearing area around the Cairn Stones");
		for (count_1 = -30; count_1 <= 30; count_1 += 30) {
			for (count_2 = -30; count_2 <= 30; count_2 += 30) {
				TDW_BOT_MOVE_TeleportToDestination([desired_spot[0] + count_1,
					desired_spot[1] + count_2], TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_ALL);
				delay(100);
			}
		}
*/
		TDW_BOT_MOVE_TeleportToDestination(desired_spot,
			TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_ALL);
		var check_count = 0;
		do {
			var unopened_count =
				D2JSP_COMM_CountIdleCairnStones(TDW_MOVE_Act1_CairnStones);
			if (!unopened_count)
				break;
			if (!check_count++) {
				if (TDW_MOVE_OpenTownPortal()) {
					TDW_RS_SayError("Unable to use Tome of Town Portal.");
					return(-1);
				}
				TDW_RS_SayOrders("Take my TP to operate the Cairn Stones.",
					"A1Q3_2");
			}
			TDW_BOT_MOVE_DoArrival(TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_ALL, desired_spot);
			TDW_BOT_MOVE_DoDeparture(TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_ALL, desired_spot);
			delay(100);
		} while (unopened_count);
	}

	TDW_RS_SayStatus("The Cairn Stones are active.");

	return(0);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TDW_RS_DoAct1_CainGibbit()
{
	var this_act   = 0;
	var this_quest = 3;
	var this_wait  = TDW_RS_DefaultWaits[this_act][this_quest];
	var return_code;
	var count_1;
	var count_2;

	if (TDW_BOT_MOVE_GotoActTown(1))
		return(-1);

	var access_strategy = TDW_BOT_MOVE_GetDefaultLinkAccessStrategy();

	TDW_BOT_AttackNPCSpec.copyFromMaster("Griswold");
//	TDW_BOT_AttackNPCSpec.setMustKillOn("Griswold");
	TDW_BOT_AttackNPCSpec.setDoAttackOn();

	TDW_BOT_CHECK_PrecastChecks();
	if (TDW_PATH_GotoTargetArea(D2JSP_AREA_STONY_FIELD, access_strategy,
		TDW_PATHL_AREA_LOAD_FLAG_DEFAULT))
		return(-1);
	TDW_BOT_CHECK_PrecastChecks();

	if (TDW_BOT_MOVE_GotoRoom(160, TDW_PATH_MAP_BUILD_FLAG_NO_ACCESS_CHECK))
		return(-1);

	TDW_RS_SayStatus("Looking for red portal to Tristram.");

	var desired_spot = [me.x, me.y];

	for (count_1 = 0; count_1 < 100; count_1++) {
		var results_data;
		results_data = D2JSP_OBJ_IterateObject(TDW_MOVE_Act1_CairnStones,
			D2JSP_OBJ_FilterName, D2JSP_OBJ_ActionStop);
		if (results_data[D2JSP_OBJ_ACTION_COUNT]) {
			desired_spot = [results_data[D2JSP_OBJ_LAST_OBJECT].x,
				results_data[D2JSP_OBJ_LAST_OBJECT].y];
			break;
		}
		TDW_BOT_MOVE_DoArrival(TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_ALL, desired_spot);
		TDW_BOT_MOVE_DoDeparture(TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_ALL, desired_spot);
		delay(100);
	}

	var target_obj;

	if (D2JSP_COMM_CountIdleCairnStones(TDW_MOVE_Act1_CairnStones)) {
		TDW_RS_SayError("The Cairn Stones have not been activated.");
		return(-1);
	}

	while (TDW_MOVE_LookForAndTakePortal(D2JSP_AREA_TRISTRAM, "",
		1, 50, true)) {
		TDW_BOT_MOVE_DoArrival(TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_ALL, desired_spot);
		TDW_BOT_MOVE_DoDeparture(TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_ALL, desired_spot);
		delay(50);
	}

	if (me.area != D2JSP_AREA_TRISTRAM) {
		TDW_RS_SayError("Unable to get to " +
			D2JSP_AREA_AreaToName(D2JSP_AREA_TRISTRAM));
		return(-1);
	}

	desired_spot = [25126, 5137];

	TDW_BOT_MOVE_TeleportToDestination(desired_spot,
		TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_FINAL);

	// Open Cain's gibbet.
	TDW_BOT_RUSH_ManageQuestUnit(true, "Gibbet", 26, D2JSP_MODE_OBJECT_OPENED);

	TDW_RS_SayStatus("Clearing area around Cain's gibbit");
	for (count_1 = -30; count_1 <= 30; count_1 += 30) {
		for (count_2 = -30; count_2 <= 30; count_2 += 30) {
			TDW_BOT_MOVE_TeleportToDestination([desired_spot[0] + count_1,
				desired_spot[1] + count_2], TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_ALL);
			delay(100);
		}
	}

	TDW_BOT_MOVE_TeleportToDestination(desired_spot,
		TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_ALL);


	if (getUnit(D2JSP_UTIL_GETUNIT_OBJECT, 26) != null)
		TDW_RS_SayOrders("Take my TP to free Cain from his gibbet.", "A1Q3_3");

	return(0);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TDW_RS_DoAct1_Countess()
{
	var this_act   = 0;
	var this_quest = 4;
	var this_wait  = TDW_RS_DefaultWaits[this_act][this_quest];
	var return_code;

	if (TDW_BOT_MOVE_GotoActTown(1))
		return(-1);

	var access_strategy = TDW_BOT_MOVE_GetDefaultLinkAccessStrategy();

	TDW_BOT_AttackNPCSpec.copyFromMaster("The Countess");
	TDW_BOT_AttackNPCSpec.setMustKillOn("The Countess");
	TDW_BOT_AttackNPCSpec.setDoAttackOn();

/*
	if (TDW_BOT_MOVE_WaypointOutbound(D2JSP_AREA_BLACK_MARSH))
		return_code = -1;
	else if (!(return_code = TDW_PATH_GotoTargetArea(
		D2JSP_AREA_TOWER_CELLAR_LEVEL_5, access_strategy,
		TDW_PATHL_AREA_LOAD_FLAG_DEFAULT))) {
*/
	TDW_BOT_CHECK_PrecastChecks();

	if ((return_code = TDW_PATH_GotoTargetArea(D2JSP_AREA_TOWER_CELLAR_LEVEL_5,
		access_strategy, TDW_PATHL_AREA_LOAD_FLAG_DEFAULT)) != 0)
		return_code = -1;
	else {
		TDW_BOT_CHECK_PrecastChecks();
		var npc_list = TDW_PATH_GetPresetList(null, D2JSP_UTIL_GETUNIT_NPC, 710,
			true);
		if (npc_list.length)
			TDW_BOT_MOVE_TeleportToDestination([npc_list[0].area_x,
				npc_list[0].area_y], TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_NONE);
		if (TDW_BOT_AttackNPCSpec.findNPC("The Countess"))
			TDW_BOT_MOVE_TeleportToDestinationList(
				D2JSP_UTIL_PATH_ProgressivePathSort(
				TDW_PATH_GetCenterAccessibleList()),
				TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_NONE);
	}

	return(return_code);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TDW_RS_DoAct1_TheSmith()
{
	var this_act   = 0;
	var this_quest = 4;
	var this_wait  = TDW_RS_DefaultWaits[this_act][this_quest];
	var return_code;

	if (TDW_BOT_MOVE_GotoActTown(1))
		return(-1);

	var access_strategy = TDW_BOT_MOVE_GetDefaultLinkAccessStrategy();

	TDW_BOT_AttackNPCSpec.copyFromMaster("The Smith");
	TDW_BOT_AttackNPCSpec.setMustKillOn("The Smith");
	TDW_BOT_AttackNPCSpec.setDoAttackOn();

	TDW_BOT_CHECK_PrecastChecks();
	if ((return_code = TDW_PATH_GotoTargetArea(D2JSP_AREA_BARRACKS,
		access_strategy, TDW_PATHL_AREA_LOAD_FLAG_DEFAULT)))
		return_code = -1;
	else {
		TDW_BOT_CHECK_PrecastChecks();
		if (TDW_BOT_MOVE_GotoRoom([202, 203, 204, 205],
			TDW_PATH_MAP_BUILD_FLAG_NO_ACCESS_CHECK))
			return(-1);
		// Open the Malus Stand and look for the Malus
		var quest_result = TDW_BOT_RUSH_ManageQuestUnit(true, "Malus Stand", 108,
			D2JSP_MODE_OBJECT_OPENED, "Horadric Malus", "hdm", false);
		if (quest_result.quest_item_count)
			TDW_RS_SayOrders("Take my TP to retrieve the Horadric Malus.", "A1Q5_1");
		else if (getUnit(D2JSP_UTIL_GETUNIT_ITEM, "hdm") != null)
			TDW_RS_SayOrders("Take my TP to pickup the Horadric Malus.", "A1Q3_3");

	}

	return(return_code);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TDW_RS_DoAct1_Andariel()
{
	var this_act   = 0;
	var this_quest = 5;
	var this_wait  = TDW_RS_DefaultWaits[this_act][this_quest];
	var return_code;
	var count_1;

var Act1_Andariel_Clear = [
	[22606, 9612],
	[22607, 9633],
	[22606, 9650],
	[22607, 9633],
	[22606, 9613]
];

var Act1_Andariel_Kill = [
	[22582, 9595],
	[22560, 9582],
	[22547, 9565]
];

	if (TDW_BOT_MOVE_GotoActTown(1))
		return(-1);

	var quest_done      = D2JSP_QUEST_IsStartedAct(2);
	var access_strategy = TDW_BOT_MOVE_GetDefaultLinkAccessStrategy();

	TDW_BOT_CHECK_PrecastChecks();
	if (TDW_PATH_GotoTargetArea(D2JSP_AREA_CATACOMBS_LEVEL_4, access_strategy,
		TDW_PATHL_AREA_LOAD_FLAG_DEFAULT))
		return_code = -1;
	else {
		TDW_BOT_CHECK_PrecastChecks();
		if ((D2JSP_COMM_GetMyPartyPlayerCount() > 1) ||
			TDW_BOT_ContextList["tdw.bot.rush.server.wait.for.party"]) {
			TDW_RS_SayStatus("Clearing Andariel's antechamber.");
			TDW_BOT_MOVE_TeleportToDestinationList(Act1_Andariel_Clear,
				TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_TARGET);
			TDW_BOT_MOVE_DoArrival(TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_ALL);
			TDW_BOT_MOVE_DoDeparture(TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_ALL);
			TDW_BOT_CHECK_PrecastChecks(60000);	// Ensure pre-casts will last...
			if (TDW_RS_FinalDelay("Andariel", this_wait,
				"Stay at my portal location until Andariel is dead.",
				"A1Q6_1") < 0) {
				TDW_RS_SayOrders("Quest aborted. Return to town.", "ReturnToTown");
				return(0);
			}
		}
		if ((D2JSP_COMM_GetMyPartyPlayerCount() > 1) ||
			TDW_BOT_ContextList["tdw.bot.rush.server.wait.for.party"])
			TDW_RS_SayOrders("Stay at my portal location until Andariel is dead.");
		TDW_BOT_CHECK_PrecastChecks(60000);		// Ensure pre-casts will last...
		TDW_BOT_MOVE_TeleportToDestinationList(Act1_Andariel_Kill,
			TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_NONE);
		TDW_BOT_AttackNPCSpec.copyFromMaster("Andariel");
		TDW_BOT_AttackNPCSpec.setMustKillOn("Andariel");
		TDW_BOT_AttackNPCSpec.setDoAttackOn();
		var kill_npc = TDW_BOT_AttackNPCSpec.findNPC("Andariel");
		TDW_BOT_ATTACK_KillSpecifiedNPC(kill_npc);
		TDW_RS_SayStatus("Andariel is now dead!!!");
		TDW_RS_SayOrders("Ask Warriv to take you East.", "A1Q6_2");
		if (!quest_done) {
			TDW_BOT_MOVE_RecoverInTown(false);
			D2JSP_NPC_FinalizeAct1();
		}
	}

	return(return_code);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TDW_RS_DoAct1_WirtsLeg()
{
	var this_act   = 0;
	var this_quest = 3;
	var this_wait  = TDW_RS_DefaultWaits[this_act][this_quest];
	var leg_coords = [25047, 5178];
	var return_code;
	var count_1;
	var count_2;

	if (TDW_BOT_MOVE_GotoActTown(1))
		return(-1);

	var access_strategy = TDW_BOT_MOVE_GetDefaultLinkAccessStrategy();

	TDW_BOT_CHECK_PrecastChecks();
	if (TDW_PATH_GotoTargetArea(D2JSP_AREA_STONY_FIELD, access_strategy,
		TDW_PATHL_AREA_LOAD_FLAG_DEFAULT))
		return(-1);
	TDW_BOT_CHECK_PrecastChecks();

	if (TDW_BOT_MOVE_GotoRoom(160, TDW_PATH_MAP_BUILD_FLAG_NO_ACCESS_CHECK))
		return(-1);

	var desired_spot = [me.x, me.y];

	var target_obj;

	TDW_RS_SayStatus("Looking for red portal to Tristram.");

	for (count_1 = 0; count_1 < 50; count_1++) {
		if (!TDW_MOVE_LookForAndTakePortal(D2JSP_AREA_TRISTRAM, "",
			1, 50, true))
			break;
		TDW_BOT_MOVE_DoArrival(TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_ALL, desired_spot);
		TDW_BOT_MOVE_DoDeparture(TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_ALL, desired_spot);
		delay(100);
	}

	if (me.area != D2JSP_AREA_TRISTRAM) {
		TDW_RS_SayError("Unable to get to " +
			D2JSP_AREA_AreaToName(D2JSP_AREA_TRISTRAM));
		return(-1);
	}

	desired_spot = [25047, 5178];

	TDW_BOT_MOVE_TeleportToDestination(desired_spot,
		TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_NONE);

//print("STOPPING");
//stop();

	// Wirt's Body = ClassID 268
	// Wirt's Leg  = ClassID  88

	target_obj = getUnit(D2JSP_UTIL_GETUNIT_OBJECT, 268);
	if (!target_obj)
		TDW_RS_SayStatus("Hmmm... Can't find Wirt's body...");
	else {
		desired_spot = [target_obj.x, target_obj.y];
		if (target_obj.mode == D2JSP_MODE_OBJECT_IDLE) {
			TDW_RS_SayStatus("About to grave-rob Wirt's body...");
			D2JSP_UTIL_InteractObject(target_obj);
		}
		else
			TDW_RS_SayStatus("Hmmm... Wirt's body has already been disturbed...");
	}

	for (count_1 = 0; count_1 < 100; count_1++) {
		target_obj = getUnit(D2JSP_UTIL_GETUNIT_ITEM, 88);
		if (target_obj && (target_obj.mode == D2JSP_MODE_ITEM_ON_GROUND)) {
			D2JSP_UTIL_InteractObject(target_obj);
			delay(100);
			for (count_2 = 0; count_2 < 100; count_2++) {
				var results_data = D2JSP_OBJ_IterateItem(null,
					D2JSP_OBJ_FilterParentMe, D2JSP_OBJ_ActionStop, 88);
				if (results_data[D2JSP_OBJ_ACTION_COUNT]) {
					TDW_RS_SayStatus("Snagged Wirt's leg.");
					TDW_MOVE_ReturnToTown();
					if (D2JSP_AREA_IsTown()) {
						target_obj = getUnit(D2JSP_UTIL_GETUNIT_OBJECT, 39);
						if (target_obj)
							TDW_MOVE_MoveToXY(target_obj.x, target_obj.y);
					}
					return(0);
				}
				TDW_BOT_MOVE_DoArrival(TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_ALL, desired_spot);
				TDW_BOT_MOVE_DoDeparture(TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_ALL, desired_spot);
				delay(100);
			}
			break;
		}
		TDW_BOT_MOVE_DoArrival(TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_ALL, desired_spot);
		TDW_BOT_MOVE_DoDeparture(TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_ALL, desired_spot);
		delay(100);
	}

	TDW_RS_SayStatus("Unable to snag Wirt's leg.");
	
	return(0);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TDW_RS_DoAct2_Radament()
{
	var return_code   = 0;
	var this_act      = 1;
	var this_quest    = 0;
	var this_wait     = TDW_RS_DefaultWaits[this_act][this_quest];
	var desired_item  = "Book of Skill"
	var desired_alias = desired_item;
	var count_1;
	var tile_obj;

	var area_list;
	var quest_done      = D2JSP_QUEST_GetQuestDone(2, 1);
	var access_strategy = TDW_BOT_MOVE_GetDefaultLinkAccessStrategy();

	if (TDW_BOT_MOVE_GotoActTown(2))
		return(-1);

	TDW_RS_SayStatus("Analyzing " +
		D2JSP_AREA_AreaToName(D2JSP_AREA_A2_SEWERS_LEVEL_3) +
		" topology to determine safe rushee clearance area...");

	var enemy_obj = TDW_PATHL_GetEnemyByName("Radament");
	if (!enemy_obj) {
		TDW_RS_SayError("Unable to resolve Radament to an TDW enemy object.");
		return(-1);
	}
	var enemy_location_list = enemy_obj.getEnemyCoordList();
	if (enemy_location_list.length != 1) {
		TDW_RS_SayError("Unable to resolve Radament to a particular location.");
		return(-1);
	}

	TDW_BOT_AttackNPCSpec = new TDW_BOT_ATTACK_SpecialNPCSpec();

	if (TDW_BOT_ClearRoomsNearby(D2JSP_AREA_A2_SEWERS_LEVEL_3,
		enemy_location_list[0], TDW_BOT_CLEAR_ROOMS_NEARBY_FLAG_ADJACENT_1 |
		TDW_BOT_CLEAR_ROOMS_NEARBY_FLAG_DEPTH_2, access_strategy,
		"Clearing a safe rushee area for the imminent death of Radament..."))
		return(-1);

	// Area should now be clear for the rushee...
	if (TDW_RS_FinalDelay("Radament", this_wait,
		"Stay at my portal until I tell you to move.", "A2Q1_1") < 0)
		TDW_RS_SayOrders("Quest aborted. Return to town.", "ReturnToTown");
		return(0);

	var move_control =
		TDW_BOT_ATTACK_MoveControl(TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_ALL);

	TDW_BOT_CHECK_PrecastChecks(60000);		// Ensure pre-casts will last...
	TDW_RS_SayOrders("Stay at my portal until I tell you to move.");
	if (TDW_BOT_MOVE_GotoRoom([341, 342, 343, 344],
		TDW_PATH_MAP_BUILD_FLAG_NO_ACCESS_CHECK, move_control)) {
		return_code = -1;
	}
	else {
		TDW_BOT_AttackNPCSpec.copyFromMaster("Radament");
		TDW_BOT_AttackNPCSpec.setMustKillOn("Radament");
		TDW_BOT_AttackNPCSpec.setDoAttackOn();
		TDW_BOT_AttackNPCSpec.findNPC("Radament").flags |=
			TDW_BOT_ATTACK_NPC_FLAG_NO_RETURN;
		TDW_BOT_AttackNPCSpec.killAny();
		var this_npc = TDW_PATHL_GetEnemyByName("Radament");
		if (this_npc)
			this_npc.gotoEnemy(access_strategy);
		TDW_BOT_AttackNPCSpec.killAny();
		TDW_BOT_AttackNPCSpec.killAny();
		TDW_BOT_AttackNPCSpec.killAny();
	}

	if (return_code)
		return(return_code);

//	TDW_RS_SayOrders("Return to town and wait for my TP.", "ReturnToTown");

	TDW_BOT_SUPP_PopNearbyChests();

	for (var count_1 = 0; count_1 < 10; count_1++) {
		TDW_BOT_MOVE_DoArrival(TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_ALL);
		TDW_BOT_MOVE_DoDeparture(TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_ALL);
		delay(250);
	}

	TDW_BOT_SUPP_PopNearbyChests();

	// Look for Books of Skill
	var quest_result     = TDW_BOT_RUSH_ManageQuestUnit(true, null, null, null,
		"Book of Skill", "ass", ((!quest_done) && D2JSP_QUEST_GetQuestDone(2, 1)) ?
		true : false);
	var skill_book_count = quest_result.quest_item_count;

	if (quest_result.quest_item_count)
		TDW_RS_SayOrders("Take my TP to retrieve a Book of Skill. Don't forget " +
			"to speak with Atma afterwards.", "A2Q1_2");

	// Open Radamant's chest and look for Horadric Scrolls
	quest_result = TDW_BOT_RUSH_ManageQuestUnit(true, "Horadric Scroll Chest",
		355, D2JSP_MODE_OBJECT_OPENED, "Horadric Scroll", "tr1");
	if (quest_result.quest_item_count) {
		var out_msg = ((skill_book_count) ? "And" : "Take my TP") +
			"to retrieve a Horadric Scroll, if you want one.";
		say(out_msg);
	}

	return(0);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TDW_RS_DoAct2_HallsOfTheDead()
{
	var this_act      = 1;
	var this_quest    = 6;
	var this_wait     = TDW_RS_DefaultWaits[this_act][this_quest];
	var desired_item  = "Horadric Cube"
	var desired_alias = desired_item;
	var count_1;
	var tile_obj;

	if (TDW_BOT_MOVE_GotoActTown(2))
		return(-1);

	var access_strategy = TDW_BOT_MOVE_GetDefaultLinkAccessStrategy();

	TDW_BOT_AttackNPCSpec.copyFromMaster("Bloodwitch the Wild");
	TDW_BOT_AttackNPCSpec.setMustKillOn("Bloodwitch the Wild");
	TDW_BOT_AttackNPCSpec.setDoAttackOn();

/*
	TDW_BOT_MOVE_WaypointOutbound(D2JSP_AREA_HALLS_OF_THE_DEAD_LEVEL_2);

	if (me.area == D2JSP_AREA_HALLS_OF_THE_DEAD_LEVEL_2) {
		if ((return_code =
			TDW_PATH_DoSourceList([D2JSP_AREA_HALLS_OF_THE_DEAD_LEVEL_3], null,
			access_strategy)))
			return(return_code);
	}
	else {
		TDW_BOT_Log.logWarning("Unable to get to " +
			D2JSP_AREA_AreaToName(D2JSP_AREA_HALLS_OF_THE_DEAD_LEVEL_2) +
			" using the waypoint. Will try the waypoint to " +
			D2JSP_AREA_AreaToName(D2JSP_AREA_DRY_HILLS) + " instead.");
		TDW_BOT_MOVE_WaypointOutbound(D2JSP_AREA_DRY_HILLS);
		if (me.area != D2JSP_AREA_DRY_HILLS) {
			TDW_BOT_Log.logError("Unable to get to " +
				D2JSP_AREA_AreaToName(D2JSP_AREA_DRY_HILLS) +
				" using the waypoint. Giving up...");
			return(-1);
		}
		TDW_RS_SayStatus("In " + D2JSP_AREA_AreaToName() + ".");
		if ((return_code =
			TDW_PATH_DoSourceList([D2JSP_AREA_HALLS_OF_THE_DEAD_LEVEL_1,
			D2JSP_AREA_HALLS_OF_THE_DEAD_LEVEL_2,
			D2JSP_AREA_HALLS_OF_THE_DEAD_LEVEL_3], null, access_strategy)))
			return(return_code);
	}

	TDW_BOT_CHECK_PrecastChecks(30000);			// Ensure pre-casts will last...
	TDW_BOT_CHECK_DoChecks();
*/

	TDW_BOT_CHECK_PrecastChecks();
	if (TDW_PATH_GotoTargetArea(D2JSP_AREA_HALLS_OF_THE_DEAD_LEVEL_3,
		access_strategy, TDW_PATHL_AREA_LOAD_FLAG_DEFAULT))
		return(-1);
	TDW_BOT_CHECK_PrecastChecks();

	// Go to the Horadric Cube room...
	if (TDW_BOT_MOVE_GotoRoom([456, 457, 458, 459],
		TDW_PATH_MAP_BUILD_FLAG_NO_ACCESS_CHECK))
		return(-3);

	// Open the Horadric Cube chest and look for Horadric Cubes
	var quest_result = TDW_BOT_RUSH_ManageQuestUnit(true, "Horadric Cube Chest", 354,
		D2JSP_MODE_OBJECT_OPENED, "Horadric Cube", "Horadric Cube",
		(!D2JSP_ITEM_HasHoradricCube()) ? true : false);

	if (quest_result.quest_item_count)
		TDW_RS_SayOrders("Take my TP to retrieve a Horadric Cube.", "A2Q2_1");

	return(0);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TDW_RS_DoAct2_MaggotLair()
{
	var this_act      = 1;
	var this_quest    = 1;
	var this_wait     = TDW_RS_DefaultWaits[this_act][this_quest];
	var desired_item  = "Shaft of the Horadric Staff";
	var desired_alias = "msf";
	var count_1;

	if (TDW_BOT_MOVE_GotoActTown(2))
		return(-1);

	var access_strategy = TDW_BOT_MOVE_GetDefaultLinkAccessStrategy();

	TDW_BOT_AttackNPCSpec.copyFromMaster("Coldworm the Burrower");
	TDW_BOT_AttackNPCSpec.setMustKillOn("Coldworm the Burrower");
	TDW_BOT_AttackNPCSpec.setDoAttackOn();

/*
	if (TDW_BOT_MOVE_WaypointOutbound(D2JSP_AREA_FAR_OASIS))
		return(-1);
	else if ((return_code = TDW_PATH_DoSourceList([D2JSP_AREA_MAGGOT_LAIR_LEVEL_1,
		D2JSP_AREA_MAGGOT_LAIR_LEVEL_2, D2JSP_AREA_MAGGOT_LAIR_LEVEL_3],
		null, access_strategy)))
		return(return_code);

	TDW_BOT_CHECK_PrecastChecks(30000);			// Ensure pre-casts will last...
*/

	TDW_BOT_CHECK_PrecastChecks();
	if (TDW_PATH_GotoTargetArea(D2JSP_AREA_MAGGOT_LAIR_LEVEL_3, access_strategy,
		TDW_PATHL_AREA_LOAD_FLAG_DEFAULT))
		return(-1);
	TDW_BOT_CHECK_PrecastChecks();

	if (TDW_BOT_MOVE_GotoRoom(509, TDW_PATH_MAP_BUILD_FLAG_NO_ACCESS_CHECK))
		return(-1);

	var need_quest = ((!D2JSP_QUEST_IsStartedAct(3)) &&
		(!D2JSP_ITEM_HasStaffOfKings()) && (!D2JSP_ITEM_HasHoradricStaff())) ?
		true : false;

	// Open the Staff of Kings chest and look for Shafts of the Horadric Staff
	var quest_result = TDW_BOT_RUSH_ManageQuestUnit(true, "Staff of Kings Chest", 356,
		D2JSP_MODE_OBJECT_OPENED, "Shaft of the Horadric Staff", "msf",
		need_quest);
	var quest_spot   = quest_result.quest_coords;

	// We do this in order to clear out the tunnel leading to Coldworm...
	TDW_RS_SayStatus("Clearing the immediate area of Horadric Staff chest...");
	tunnel_spot  = [quest_spot[0][0] + 13, quest_spot[0][1] + 3];
	TDW_BOT_MOVE_TeleportToDestination(tunnel_spot,
		TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_ALL);
	TDW_BOT_MOVE_DoArrival(TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_ALL);
	TDW_BOT_MOVE_DoDeparture(TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_ALL);
	TDW_BOT_MOVE_TeleportToDestination(quest_spot[1],
		TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_NONE);

	if (quest_result.quest_item_count)
		TDW_RS_SayOrders("Take my TP to retrieve the Horadric Staff.", "A2Q2_2");

	return(0);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TDW_RS_DoAct2_ClawViperTemple()
{
	var this_act      = 1;
	var this_quest    = 2;
	var this_wait     = TDW_RS_DefaultWaits[this_act][this_quest];
	var desired_item  = "Amulet of the Viper";
	var desired_alias = "vip";
	var count_1;
	var count_2;
	var tile_obj;

var TDW_RS_ClawTempleMoves = [
	[15047, 14053],
	[15068, 14040],
	[15065, 14066],
	[15040, 14070],
	[15012, 14052],
	[15012, 14070],
	[15013, 14035],
	[15043, 14032],
	[15045, 14053]
];

	if (TDW_BOT_MOVE_GotoActTown(2))
		return(-1);

	var quest_done      = D2JSP_QUEST_GetQuestDone(2, 3);
	var access_strategy = TDW_BOT_MOVE_GetDefaultLinkAccessStrategy();

	TDW_BOT_AttackNPCSpec.copyFromMaster("Fangskin");
	TDW_BOT_AttackNPCSpec.setMustKillOn("Fangskin");
	TDW_BOT_AttackNPCSpec.setDoAttackOn();

/*
	TDW_BOT_CHECK_PrecastChecks();
	if (TDW_PATH_GotoTargetArea(D2JSP_AREA_CLAW_VIPER_TEMPLE_LEVEL_2,
		access_strategy, TDW_PATHL_AREA_LOAD_FLAG_DEFAULT))
		return(-1);
	TDW_BOT_CHECK_PrecastChecks();

	TDW_BOT_MOVE_TeleportToDestination(TDW_RS_ClawTempleMoves[0],
		TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_NONE);

	for (count_1 = 0; count_1 < 3; count_1++) {
		for (count_2 = 0; count_2 < TDW_RS_ClawTempleMoves.length; count_2++)
			TDW_BOT_MOVE_TeleportToDestination(TDW_RS_ClawTempleMoves[count_2],
				TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_TARGET);
	}
*/

	TDW_RS_SayStatus("Clearing the immediate area of Altar of the Tainted Sun...");
	if (TDW_BOTLIB_ClearArea([D2JSP_AREA_CLAW_VIPER_TEMPLE_LEVEL_2],
		access_strategy, TDW_BOTLIB_CLEARAREA_FLAG_NONE,
		TDW_PATHL_AREA_LOAD_FLAG_DEFAULT))
		return(-1);

	var need_quest = ((!D2JSP_QUEST_IsStartedAct(3)) &&
		(!D2JSP_ITEM_HasViperAmulet()) && (!D2JSP_ITEM_HasHoradricStaff())) ?
		true : false;

	// Open the Altar of the Tainted Sun and look for Amulets of the Viper
	var quest_result = TDW_BOT_RUSH_ManageQuestUnit(true, "Altar of the Tainted Sun",
		149, D2JSP_MODE_OBJECT_OPENED, "Amulet of the Viper", "vip", need_quest);
	var quest_spot   = quest_result.quest_coords;

	if ((quest_result.quest_item_count) ||
		(quest_result.source_obj_mode == D2JSP_MODE_OBJECT_IDLE))
		TDW_RS_SayOrders("Take my TP to retrieve the Amulet of the Viper.",
			"A2Q2_3");

	TDW_RS_SayOrders("Don't forget to talk to Drognan when you get back to town.");

	if (need_quest || ((!quest_done) && D2JSP_QUEST_GetQuestDone(2, 3))) {
		TDW_BOT_MOVE_RecoverInTown(false);
		if ((npc_obj = D2JSP_NPC_InteractWithNPC("Drognan")) != null)
			D2JSP_UTIL_GEN_CancelNPC(npc_obj);
	}

	return(0);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TDW_RS_DoAct2_Arcane()
{
	var this_act      = 1;
	var this_quest    = 4;
	var this_wait     = TDW_RS_DefaultWaits[this_act][this_quest];
	var count_1;
	var tile_obj;

	if (TDW_BOT_MOVE_GotoActTown(2))
		return(-1);

	var access_strategy = TDW_BOT_MOVE_GetDefaultLinkAccessStrategy();

/*
	TDW_MOVE_COMPAT_TownMove(2, "palace");

	TDW_BOT_CHECK_PrecastChecks(30000);

	if (TDW_PATH_DoSourceList([D2JSP_AREA_HAREM_LEVEL_1,
		D2JSP_AREA_HAREM_LEVEL_2, D2JSP_AREA_PALACE_CELLAR_LEVEL_1,
		D2JSP_AREA_PALACE_CELLAR_LEVEL_2, D2JSP_AREA_PALACE_CELLAR_LEVEL_3],
		me.area, access_strategy))
		return(-1);
*/

	TDW_BOT_CHECK_PrecastChecks();
	if (TDW_PATH_GotoTargetArea(D2JSP_AREA_PALACE_CELLAR_LEVEL_3,
		access_strategy, TDW_PATHL_AREA_LOAD_FLAG_DEFAULT))
		return(-1);
	TDW_BOT_CHECK_PrecastChecks();

	// Move to and take Rift device
	TDW_BOT_MOVE_TeleportToDestination([10075, 8672],
		TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_NONE);
	TDW_BOT_MOVE_DoArrival(TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_ALL);
	TDW_BOT_MOVE_DoDeparture(TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_ALL);
	TDW_BOT_MOVE_TeleportToDestination([10075, 8672],
		TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_NONE);
	if (TDW_MOVE_LookForAndTakeObjectToAreaByClassid(298, 10, 50))
		return(-2);

	if (me.area != D2JSP_AREA_ARCANE_SANCTUARY) {
		TDW_RS_SayError("Unable to get to " +
			D2JSP_AREA_AreaToName(D2JSP_AREA_ARCANE_SANCTUARY));
		return(-1);
	}

	TDW_RS_SayStatus("In " + D2JSP_AREA_AreaToName() + ".");

	TDW_BOT_CHECK_PrecastChecks(30000);

	var waypoint_obj = getUnit(D2JSP_UTIL_GETUNIT_OBJECT, "waypoint");
	if (waypoint_obj) {
		TDW_BOT_MOVE_TeleportToDestination([waypoint_obj.x, waypoint_obj.y],
			TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_TARGET);
		TDW_MOVE_WaypointUse(D2JSP_AREA_AreaToTown());
	}

	return(0);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TDW_RS_DoAct2_Summoner()
{
	var this_act   = 1;
	var this_quest = 5;
	var this_wait  = TDW_RS_DefaultWaits[this_act][this_quest];
	var summoner_path;

	if (TDW_BOT_MOVE_GotoActTown(2))
		return(-1);

	var quest_done      = D2JSP_QUEST_GetQuestDone(2, 5);
	var access_strategy = TDW_BOT_MOVE_GetDefaultLinkAccessStrategy();
	var enemy_obj       = TDW_PATHL_GetEnemyByName("The Summoner");

	TDW_BOT_AttackNPCSpec.setDoAttackOff();

	if ((return_code = TDW_PATH_GotoTargetArea(D2JSP_AREA_ARCANE_SANCTUARY,
		access_strategy, TDW_PATHL_AREA_LOAD_FLAG_DEFAULT)))
		return(return_code);

	summoner_path = TDW_BOT_PATH_ROOM_GetSummonerPath();

	TDW_RS_SayStatus("Heading " + summoner_path[0] + " to the Summoner.");

	if ((D2JSP_COMM_GetMyPartyPlayerCount() > 1) ||
		TDW_BOT_ContextList["tdw.bot.rush.server.wait.for.party"]) {
		for (var count_1 = 0; count_1 < summoner_path[1].length; count_1++) {
			TDW_BOT_MOVE_TeleportToDestination(summoner_path[1][count_1],
				TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_NONE);
			if (enemy_obj.getUnit()) {
				var first_index = (count_1) ? (count_1 - 1) : count_1;
//				var last_index  = (count_1 < (summoner_path[1].length - 1)) ?
//					(count_1 + 1) : count_1;
				var last_index  = count_1;
				TDW_RS_SayStatus("Clearing a rushee area for The Summoner's " +
					"imminent death...");
				for (var count_2 = first_index; count_2 <= last_index; count_2++) {
					do {
						npc_cluster = new TDW_BOT_ATTACK_Cluster(null, 20, null,
							TDW_BOT_COLL_BLOCK_ATTACK);
						TDW_BOT_MOVE_TeleportToDestination(summoner_path[1][count_2],
							TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_ALL);
						npc_cluster = new TDW_BOT_ATTACK_Cluster(null, 40, null);
						if (npc_cluster.count) {
							TDW_BOT_MOVE_TeleportToDestination(
								npc_cluster.coord[TDW_BOT_ATTACK_CLUSTER_MIN],
								TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_ALL);
							TDW_BOT_MOVE_TeleportToDestination(summoner_path[1][count_2],
								TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_ALL);
						}
					} while (npc_cluster.count);
				}
				TDW_BOT_MOVE_TeleportToDestination(summoner_path[1][count_1],
					TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_ALL);
				if (TDW_RS_FinalDelay("The Summoner", this_wait,
					"Stay at my portal until I tell you to move.", "A2Q5_1") < 0) {
					TDW_RS_SayOrders("Quest aborted. Return to town.", "ReturnToTown");
					return(0);
				}
/*
				for (var count_2 = count_1; count_2 < summoner_path[1].length;
					count_2++)
					TDW_BOT_MOVE_TeleportToDestination(summoner_path[1][count_2],
						TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_NONE);
*/
				break;
			}
		}
	}

	if (access_strategy.callback_func(access_strategy,
		TDW_PATH_ASCB_GOTO_XYPAIR_LOCAL,
		summoner_path[1][summoner_path[1].length - 1]))
		return(-1);

	TDW_BOT_AttackNPCSpec.copyFromMaster("The Summoner");
	TDW_BOT_AttackNPCSpec.setMustKillOn("The Summoner");
	TDW_BOT_AttackNPCSpec.setDoAttackOn();
	TDW_BOT_AttackNPCSpec.findNPC("The Summoner").flags |=
		TDW_BOT_ATTACK_NPC_FLAG_NO_RETURN | TDW_BOT_ATTACK_NPC_FLAG_MUST_KILL;

	TDW_BOT_AttackNPCSpec.killAny();
	TDW_BOT_MOVE_TeleportToDestination(
		summoner_path[1][summoner_path[1].length - 1],
		TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_ALL);

	TDW_BOT_AttackNPCSpec.killAny();
	TDW_BOT_MOVE_TeleportToDestination(
		summoner_path[1][summoner_path[1].length - 1],
		TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_ALL);
	TDW_BOT_AttackNPCSpec.killAny();
	TDW_BOT_AttackNPCSpec.setMustKillOff("The Summoner");

	if (TDW_BOT_AttackNPCSpec.findNPC("The Summoner"))
		TDW_RS_SayStatus("Hmmm... Unable to locate the Summoner. Proceeding...");

	TDW_RS_SayOrders("Looks like the Summoner is dead.", "ReturnToTown");

	if ((D2JSP_COMM_GetMyPartyPlayerCount() > 1) ||
		TDW_BOT_ContextList["tdw.bot.rush.server.wait.for.party"]) {
		TDW_BOT_MOVE_TeleportToDestination(
			summoner_path[1][summoner_path[1].length - 1],
			TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_ALL);
		for (var count_2 = count_1; count_2 < 10; count_2++) {
			TDW_BOT_MOVE_TeleportToDestination(
				summoner_path[1][summoner_path[1].length - 1],
				TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_ALL);
			delay(100);
		}
	}

	var tome_obj = getUnit(D2JSP_UTIL_GETUNIT_OBJECT, "Tome");
	if (!tome_obj) {
		TDW_RS_SayError("Unable to locate Horazon's Tome.");
		return(-1);
	}

	for (var count_1 = 0; count_1 < 10; count_1++) {
		TDW_BOT_MOVE_TeleportToDestination([tome_obj.x, tome_obj.y],
			TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_ALL);
		delay(100);
	}

/*
	if (TDW_RS_FinalDelay("The Summoner", this_wait,
		"Use my portal to come and read Horazon's Journal.", "A2Q5_2") < 0) {
		TDW_RS_SayOrders("Quest aborted. Return to town.", "ReturnToTown");
		return(0);
	}
*/

	for (var count_1 = 0; count_1 < 3; count_1++) {
		TDW_BOT_RUSH_ManageQuestUnit(true, "Tome", "Tome",
			D2JSP_MODE_OBJECT_OPENED, "Horazon's Journal", null, false);
		TDW_MOVE_LookForAndTakePortal(D2JSP_AREA_CANYON_OF_THE_MAGI, "*", 20,
			50, true);
		if (me.area == D2JSP_AREA_CANYON_OF_THE_MAGI)
			break;
	}

	if (me.area == D2JSP_AREA_ARCANE_SANCTUARY)
		TDW_MOVE_LookForAndTakePortal(D2JSP_AREA_AreaToTown(), me.name,
			20, 50, false);
	else
		TDW_MOVE_WaypointUse(D2JSP_AREA_AreaToTown());

	return(0);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TDW_RS_DoAct2_TalRashaTomb()
{
	var this_act   = 1;
	var this_quest = 5;
	var this_wait  = TDW_RS_DefaultWaits[this_act][this_quest];
	var count_1;
	var count_2;
	var count_3;
	var tile_obj;
	var orifice_obj;

	if (TDW_BOT_MOVE_GotoActTown(2))
		return(-1);

	var quest_done      = D2JSP_QUEST_IsStartedAct(3);
	var access_strategy = TDW_BOT_MOVE_GetDefaultLinkAccessStrategy();

/*
	if (TDW_BOT_MOVE_WaypointOutbound(D2JSP_AREA_CANYON_OF_THE_MAGI))
		return(-1);

	var tal_tomb_location;
	if ((tal_tomb_location = TDW_BOT_PATH_GetTrueTalRashaTombXY()) == null) {
		TDW_RS_SayError("Unable to locate the True Tomb of Tal Rasha.");
		return(-1);
	}

	TDW_BOT_MOVE_TeleportToDestination(tal_tomb_location,
		TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_NONE);
	if (TDW_MOVE_LookForAndTakeTileByArea(me.area, 10, 50))
		return(-3);
*/

	if (me.act != 2) {
		TDW_BOT_MOVE_RecoverInTown(false);
		TDW_MOVE_COMPAT_TownMove(2, "waypoint");
	}

	TDW_BOT_CHECK_PrecastChecks();
	if (TDW_PATH_GotoTargetArea(TDW_BOT_PATH_GetTrueTalRashaTombArea(),
		access_strategy, TDW_PATHL_AREA_LOAD_FLAG_DEFAULT))
		return(-1);
	TDW_BOT_CHECK_PrecastChecks();

	if (me.area != TDW_BOT_PATH_GetTrueTalRashaTombArea()) {
		TDW_RS_SayError("Unable to enter the True Tomb of Tal Rasha.");
		return(-1);
	}

	TDW_RS_SayStatus("Entered the True Tomb of Tal Rasha");

	// Go to the Orifice room...
	if (TDW_BOT_MOVE_GotoRoom([460, 461, 462, 463],
		TDW_PATH_MAP_BUILD_FLAG_NO_ACCESS_CHECK))
		return(-1);

	TDW_RS_SayStatus("In the room of the Circle of Seven Symbols (the Orifice Room).");

	TDW_RS_SayStatus("Clearing the Orifice Room...");
	for (count_1 = 0; count_1 < 30; count_1++) {
		orifice_obj = getUnit(D2JSP_UTIL_GETUNIT_OBJECT, "orifice");
		if (orifice_obj)
			break;
		TDW_BOT_MOVE_DoArrival(TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_ALL);
		delay(100);
		TDW_BOT_MOVE_DoDeparture(TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_ALL);
		delay(100);
	}

	if (!orifice_obj) {
		TDW_BOT_Log.logError("Unable to locate the Orifice!!!");
		return(-7);
	}

	for (count_1 = -10; count_1 <= 10; count_1 += 10) {
		if (getUnit(D2JSP_UTIL_GETUNIT_OBJECT, "Duriel's Lair"))
			break;
		for (count_2 = -10; count_2 <= 10; count_2 += 10) {
			D2JSP_SKILL_TeleportTo(orifice_obj.x + count_1, orifice_obj.y + count_2);
			TDW_BOT_MOVE_DoArrival(TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_ALL,
				[orifice_obj.x + count_1, orifice_obj.y + count_2]);
			TDW_BOT_MOVE_DoDeparture(TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_ALL,
				[orifice_obj.x + count_1, orifice_obj.y + count_2]);
			if (getUnit(D2JSP_UTIL_GETUNIT_OBJECT, "Duriel's Lair"))
				break;
		}
	}

	orifice_obj = getUnit(D2JSP_UTIL_GETUNIT_OBJECT, "orifice");
	if (!orifice_obj) {
		TDW_BOT_Log.logError("Unable to locate the Orifice!!!");
		return(-7);
	}

	// Duriel's Lair is object 100
	D2JSP_SKILL_TeleportTo(orifice_obj.x, orifice_obj.y);
	if (!getUnit(D2JSP_UTIL_GETUNIT_OBJECT, "Duriel's Lair")) {
		TDW_BOT_MOVE_DoArrival(TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_ALL,
			[orifice_obj.x, orifice_obj.y]);
		TDW_BOT_MOVE_DoDeparture(TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_ALL,
			[orifice_obj.x, orifice_obj.y]);
	}

	if (!getUnit(D2JSP_UTIL_GETUNIT_OBJECT, "Duriel's Lair")) {
		TDW_RS_SayOrders("Transmute the staff and take my TP for the Orifice.",
			"A2Q6_1");
		TDW_RS_SayOrders("Insert the staff and then return to town.");
		if (TDW_MOVE_OpenTownPortal()) {
			TDW_RS_SayError("Unable to use Tome of Town Portal.");
			return(-1);
		}
	}

	while (!getUnit(D2JSP_UTIL_GETUNIT_OBJECT, "Duriel's Lair")) {
		TDW_BOT_MOVE_DoArrival(TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_ALL,
			[orifice_obj.x, orifice_obj.y]);
		delay(250);
		TDW_BOT_MOVE_DoDeparture(TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_ALL,
			[orifice_obj.x, orifice_obj.y]);
		delay(250);
	}

	do {
		var lair_obj = getUnit(D2JSP_UTIL_GETUNIT_OBJECT, "Duriel's Lair");
		delay(250);
	} while ((!lair_obj) || (lair_obj.mode != D2JSP_MODE_OBJECT_OPENED));

/*
	TDW_RS_SayStatus("Moving into Duriel's Lair...");
//	TDW_MOVE_MoveToObject(lair_obj);
	TDW_BOT_MOVE_TeleportToDestination([lair_obj.x, lair_obj.y],
		TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_NONE);
	for (count_1 = 0; count_1 < 20; count_1++) {
		D2JSP_UTIL_InteractObject(lair_obj);
		for (count_2 = 0; count_2 < 50; count_2++) {
			if (me.area == D2JSP_AREA_DURIELS_LAIR)
				break;
			delay(50);
		}
	}

	if (me.area != D2JSP_AREA_DURIELS_LAIR) {
		TDW_RS_SayStatus("Unable to move into Duriel's Lair!!!");
		return(-8);
	}

	TDW_RS_SayStatus("In " + D2JSP_AREA_AreaToName() + ".");

	for (count_1 = 0; count_1 < 8; count_1++) {
		TDW_BOT_MOVE_DoArrival(TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_ALL);
		TDW_BOT_MOVE_DoDeparture(TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_ALL);
		delay(100);
	}

	TDW_BOT_SUPP_PopNearbyChests(
		TDW_BOT_ContextList["mysnagit.pop.chests.radius"], [me.x, me.y]);
	TDW_BOT_SUPP_MySnagIt([me.x, me.y]);
	TDW_BOT_SUPP_MySnagIt([me.x, me.y]);
	TDW_BOT_SUPP_MySnagIt([me.x, me.y]);

	TDW_BOT_MOVE_TeleportToDestinationList(TDW_BOT_PATH_DurielToTyrael,
		TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_NONE);

	TDW_RS_SayOrders("Take my TP to Duriel's Lair.", "A2Q6_2");
	TDW_RS_SayOrders("Wait until everyone who needs quest is in Duriel's Lair.");
	TDW_RS_SayOrders("Talk to Tyrael, Drognan, Jerhyn and Meshif.");
	TDW_RS_SayOrders("Ask Meshif to sail East.");

	if (TDW_MOVE_OpenTownPortal())
		TDW_RS_SayError("Unable to use Tome of Town Portal.");

	if (!quest_done) {
		if ((npc_obj = D2JSP_NPC_InteractWithNPC("Tyrael", 1)) != null)
			D2JSP_UTIL_GEN_CancelNPC(npc_obj);
		TDW_BOT_MOVE_RecoverInTown(false);
		D2JSP_NPC_FinalizeAct2();
	}
*/

	return(0);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TDW_RS_DoAct2_Duriel()
{
	var this_act   = 1;
	var this_quest = 5;
	var this_wait  = TDW_RS_DefaultWaits[this_act][this_quest];
	var count_1;
	var count_2;
	var count_3;
	var tile_obj;
	var orifice_obj;

	var quest_done      = D2JSP_QUEST_IsStartedAct(3);
	var access_strategy = TDW_BOT_MOVE_GetDefaultLinkAccessStrategy();

	if (TDW_BOT_MOVE_GotoActTown(2))
		return(-1);

	TDW_BOT_AttackNPCSpec.copyFromMaster("Duriel");
	TDW_BOT_AttackNPCSpec.setMustKillOn("Duriel");
	TDW_BOT_AttackNPCSpec.setDoAttackOn();

	TDW_BOT_CHECK_PrecastChecks();
	if (TDW_PATH_GotoTargetArea(TDW_BOT_PATH_GetTrueTalRashaTombArea(),
		access_strategy, TDW_PATHL_AREA_LOAD_FLAG_DEFAULT))
		return(-1);
	TDW_BOT_CHECK_PrecastChecks();

	if (me.area != TDW_BOT_PATH_GetTrueTalRashaTombArea()) {
		TDW_RS_SayError("Unable to enter the True Tomb of Tal Rasha.");
		return(-1);
	}

	TDW_RS_SayStatus("Entered the True Tomb of Tal Rasha");

	// Go to the Orifice room...
	if (TDW_BOT_MOVE_GotoRoom([460, 461, 462, 463],
		TDW_PATH_MAP_BUILD_FLAG_NO_ACCESS_CHECK))
		return(-1);

	TDW_RS_SayStatus("In the room of the Circle of Seven Symbols (the Orifice room.");

	for (count_1 = 0; count_1 < 30; count_1++) {
		orifice_obj = getUnit(D2JSP_UTIL_GETUNIT_OBJECT, "orifice");
		if (orifice_obj)
			break;
		TDW_BOT_MOVE_DoArrival(TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_ALL);
		delay(100);
		TDW_BOT_MOVE_DoDeparture(TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_ALL);
		delay(100);
	}

	if (!orifice_obj) {
		TDW_BOT_Log.logError("Unable to locate the Orifice!!!");
		return(-7);
	}

	for (count_1 = -10; count_1 <= 10; count_1 += 10) {
		if (getUnit(D2JSP_UTIL_GETUNIT_OBJECT, "Duriel's Lair"))
			break;
		for (count_2 = -10; count_2 <= 10; count_2 += 10) {
			D2JSP_SKILL_TeleportTo(orifice_obj.x + count_1, orifice_obj.y + count_2);
			TDW_BOT_MOVE_DoArrival(TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_ALL,
				[orifice_obj.x + count_1, orifice_obj.y + count_2]);
			TDW_BOT_MOVE_DoDeparture(TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_ALL,
				[orifice_obj.x + count_1, orifice_obj.y + count_2]);
			if (getUnit(D2JSP_UTIL_GETUNIT_OBJECT, "Duriel's Lair"))
				break;
		}
	}

	var lair_obj = getUnit(D2JSP_UTIL_GETUNIT_OBJECT, "Duriel's Lair");

	if (!lair_obj) {
		TDW_RS_SayError("Unable to locate the entrance to Duriel's Lair!");
		return(-1);
	}

	if (lair_obj.mode != D2JSP_MODE_OBJECT_OPENED) {
		TDW_RS_SayError("Duriel's Lair has not been opened! Has the Horadric " +
			"Staff been inserted in the orifice?");
		return(-1);
	}

	TDW_RS_SayStatus("Moving into Duriel's Lair...");
//	TDW_MOVE_MoveToObject(lair_obj);
	TDW_BOT_MOVE_TeleportToDestination([lair_obj.x, lair_obj.y],
		TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_NONE);
	for (count_1 = 0; count_1 < 20; count_1++) {
		D2JSP_UTIL_InteractObject(lair_obj);
		for (count_2 = 0; count_2 < 50; count_2++) {
			if (me.area == D2JSP_AREA_DURIELS_LAIR)
				break;
			delay(50);
		}
	}

	if (me.area != D2JSP_AREA_DURIELS_LAIR) {
		TDW_RS_SayStatus("Unable to move into Duriel's Lair!!!");
		return(-8);
	}

	TDW_RS_SayStatus("In " + D2JSP_AREA_AreaToName() + ".");

	for (count_1 = 0; count_1 < 8; count_1++) {
		TDW_BOT_MOVE_DoArrival(TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_ALL);
		TDW_BOT_MOVE_DoDeparture(TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_ALL);
		delay(100);
	}

	TDW_BOT_SUPP_PopNearbyChests(
		TDW_BOT_ContextList["mysnagit.pop.chests.radius"], [me.x, me.y]);
	TDW_BOT_SUPP_MySnagIt([me.x, me.y]);
	TDW_BOT_SUPP_MySnagIt([me.x, me.y]);
	TDW_BOT_SUPP_MySnagIt([me.x, me.y]);

	TDW_BOT_MOVE_TeleportToDestinationList(TDW_BOT_PATH_DurielToTyrael,
		TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_NONE);

	if (TDW_MOVE_OpenTownPortal()) {
		TDW_RS_SayError("Unable to use Tome of Town Portal.");
		return(-1);
	}

	TDW_RS_SayOrders("Take my TP to Duriel's Lair.", "A2Q6_2");
	TDW_RS_SayOrders("Wait until everyone who needs quest is in Duriel's Lair.");
	TDW_RS_SayOrders("Talk to Tyrael, Drognan, Jerhyn and Meshif.");
	TDW_RS_SayOrders("Ask Meshif to sail East.");

	if (!quest_done) {
		if ((npc_obj = D2JSP_NPC_InteractWithNPC("Tyrael", 1)) != null)
			D2JSP_UTIL_GEN_CancelNPC(npc_obj);
		TDW_BOT_MOVE_RecoverInTown(false);
		D2JSP_NPC_FinalizeAct2();
	}

	return(0);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TDW_RS_DoAct3_KhalimsWill_Eye()
{
	var this_act       = 2;
	var this_quest     = 2;
	var this_wait      = TDW_RS_DefaultWaits[this_act][this_quest];
	var desired_item   = "Khalim's Eye";
	var desired_alias  = desired_item;
	var dest_room_list = [575, 576, 577, 578, 579, 580, 581, 582, 583, 584];
	var count_1;

	if (TDW_BOT_MOVE_GotoActTown(3))
		return(-1);

	var access_strategy = TDW_BOT_MOVE_GetDefaultLinkAccessStrategy();

	TDW_BOT_AttackNPCSpec.copyFromMaster("Sszark the Burning");
	TDW_BOT_AttackNPCSpec.setMustKillOn("Sszark the Burning");
	TDW_BOT_AttackNPCSpec.setDoAttackOn();

	TDW_BOT_CHECK_PrecastChecks();
	if (TDW_PATH_GotoTargetArea(D2JSP_AREA_SPIDER_CAVERN, access_strategy,
		TDW_PATHL_AREA_LOAD_FLAG_DEFAULT))
		return(-1);
	TDW_BOT_CHECK_PrecastChecks();

	var coord_list = TDW_PATH_GetPresetCoordsList(null,
		D2JSP_UTIL_GETUNIT_OBJECT, 407);

	if (!coord_list.length) {
		TDW_RS_SayError("Unable to find the chest containing " + desired_item +
			" in " + D2JSP_AREA_AreaToName() + ".");
		return(-1);
	}

	var desired_spot = coord_list[0];

	if (TDW_BOT_MOVE_GotoXYPair(desired_spot,
		TDW_PATH_MAP_BUILD_FLAG_NO_ACCESS_CHECK))
		return(-1);

	TDW_RS_SayStatus("Clearing the immediate area of the chest which " +
		"contains " + desired_item + "...");
	for (count_1 = 0; count_1 < 10; count_1++) {
		TDW_BOT_MOVE_DoArrival(TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_ALL, desired_spot);
		TDW_BOT_MOVE_DoDeparture(TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_ALL, desired_spot);
		delay(100);
	}

	TDW_BOT_SUPP_PopNearbyChests(TDW_BOT_ContextList["mysnagit.pop.chests.radius"],
		desired_spot);
	TDW_BOT_SUPP_MySnagIt(desired_spot);
	TDW_BOT_SUPP_MySnagIt(desired_spot);

	TDW_RS_SayOrders("Take my TP to retrieve " + desired_item + ".");

	return(0);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TDW_RS_DoAct3_KhalimsWill_Heart()
{
	var this_act       = 2;
	var this_quest     = 2;
	var this_wait      = TDW_RS_DefaultWaits[this_act][this_quest];
	var desired_item   = "Khalim's Heart";
	var desired_alias  = desired_item;
	var dest_room_list = [595, 596, 597, 598, 599, 600, 601, 602, 603, 604];
	var count_1;

	if (TDW_BOT_MOVE_GotoActTown(3))
		return(-1);

	var access_strategy = TDW_BOT_MOVE_GetDefaultLinkAccessStrategy();

	TDW_BOT_AttackNPCSpec.copyFromMaster("Witch Doctor Endugu");
	TDW_BOT_AttackNPCSpec.setMustKillOn("Witch Doctor Endugu");
	TDW_BOT_AttackNPCSpec.setDoAttackOn();

	TDW_BOT_CHECK_PrecastChecks();
	if (TDW_PATH_GotoTargetArea(D2JSP_AREA_FLAYER_DUNGEON_LEVEL_3,
		access_strategy, TDW_PATHL_AREA_LOAD_FLAG_DEFAULT))
		return(-1);
	TDW_BOT_CHECK_PrecastChecks();

	var coord_list = TDW_PATH_GetPresetCoordsList(null,
		D2JSP_UTIL_GETUNIT_OBJECT, 406);

	if (!coord_list.length) {
		TDW_RS_SayError("Unable to find the chest containing " + desired_item +
			" in " + D2JSP_AREA_AreaToName() + ".");
		return(-1);
	}

	var desired_spot = coord_list[0];

	if (TDW_BOT_MOVE_GotoXYPair(desired_spot,
		TDW_PATH_MAP_BUILD_FLAG_NO_ACCESS_CHECK))
		return(-1);

	TDW_RS_SayStatus("Clearing the immediate area of the chest which " +
		"contains " + desired_item + "...");
	for (count_1 = 0; count_1 < 10; count_1++) {
		TDW_BOT_MOVE_DoArrival(TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_ALL, desired_spot);
		TDW_BOT_MOVE_DoDeparture(TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_ALL, desired_spot);
		delay(100);
	}

	TDW_BOT_SUPP_PopNearbyChests(TDW_BOT_ContextList["mysnagit.pop.chests.radius"],
		desired_spot);
	TDW_BOT_SUPP_MySnagIt(desired_spot);
	TDW_BOT_SUPP_MySnagIt(desired_spot);

	TDW_RS_SayOrders("Take my TP to retrieve " + desired_item + ".");

	return(0);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TDW_RS_DoAct3_KhalimsWill_Brain()
{
	var this_act       = 2;
	var this_quest     = 2;
	var this_wait      = TDW_RS_DefaultWaits[this_act][this_quest];
	var desired_item   = "Khalim's Brain";
	var desired_alias  = desired_item;
	var dest_room_list = [629];
	var count_1;

	if (TDW_BOT_MOVE_GotoActTown(3))
		return(-1);

	var access_strategy = TDW_BOT_MOVE_GetDefaultLinkAccessStrategy();

	TDW_BOT_AttackNPCSpec.copyFromMaster("Icehawk Riftwing");
	TDW_BOT_AttackNPCSpec.setMustKillOn("Icehawk Riftwing");
	TDW_BOT_AttackNPCSpec.setDoAttackOn();

	TDW_BOT_CHECK_PrecastChecks();
	if (TDW_PATH_GotoTargetArea(D2JSP_AREA_A3_SEWERS_LEVEL_2, access_strategy,
		TDW_PATHL_AREA_LOAD_FLAG_DEFAULT))
		return(-1);
	TDW_BOT_CHECK_PrecastChecks();

	var coord_list = TDW_PATH_GetPresetCoordsList(null,
		D2JSP_UTIL_GETUNIT_OBJECT, 405);

	if (!coord_list.length) {
		TDW_RS_SayError("Unable to find the chest containing " + desired_item +
			" in " + D2JSP_AREA_AreaToName() + ".");
		return(-1);
	}

	var desired_spot = coord_list[0];

	if (TDW_BOT_MOVE_GotoXYPair(desired_spot,
		TDW_PATH_MAP_BUILD_FLAG_NO_ACCESS_CHECK))
		return(-1);

	TDW_RS_SayStatus("Clearing the immediate area of the chest which " +
		"contains " + desired_item + "...");
	for (count_1 = 0; count_1 < 10; count_1++) {
		TDW_BOT_MOVE_DoArrival(TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_ALL, desired_spot);
		TDW_BOT_MOVE_DoDeparture(TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_ALL, desired_spot);
		delay(100);
	}

	TDW_BOT_SUPP_PopNearbyChests(TDW_BOT_ContextList["mysnagit.pop.chests.radius"],
		desired_spot);
	TDW_BOT_SUPP_MySnagIt(desired_spot);
	TDW_BOT_SUPP_MySnagIt(desired_spot);

	TDW_RS_SayOrders("Take my TP to retrieve " + desired_item + ".");

	return(0);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TDW_RS_DoAct3_LamEsensTome()
{
	var this_act   = 2;
	var this_quest = 3;
	var this_wait  = TDW_RS_DefaultWaits[this_act][this_quest];
	var count_1;

	if (TDW_BOT_MOVE_GotoActTown(3))
		return(-1);

	var access_strategy = TDW_BOT_MOVE_GetDefaultLinkAccessStrategy();

	TDW_BOT_AttackNPCSpec.copyFromMaster("Battlemaid Sarina");
	TDW_BOT_AttackNPCSpec.setMustKillOn("Battlemaid Sarina");
	TDW_BOT_AttackNPCSpec.setDoAttackOn();

/*
	TDW_BOT_CHECK_PrecastChecks();

	if (TDW_PATH_GotoTargetArea(D2JSP_AREA_RUINED_TEMPLE, access_strategy,
		TDW_PATHL_AREA_LOAD_FLAG_DEFAULT))
		return(-1);
	TDW_BOT_CHECK_PrecastChecks();

	var room_list  = new D2JSP_RoomList();
	var center_list = room_list.getCenterAccessibleList();

	// LamTome is classid 193.
	for (count_1 = 0; count_1 < center_list.length; count_1++) {
		var tome_obj = getUnit(D2JSP_OBJ_TYPE_OBJECT, "LamTome");
		if (tome_obj)
			break;
		TDW_BOT_MOVE_TeleportToDestination(center_list[count_1],
			TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_NONE);
	}
*/

	TDW_PATH_CreateArea(D2JSP_AREA_RUINED_TEMPLE);
	var tome_preset = TDW_PATH_MapGlobal.area_list[D2JSP_AREA_RUINED_TEMPLE].
		getPresetCoordsList(null, D2JSP_OBJ_TYPE_OBJECT, 193, true);

	if (!tome_preset.length) {
		access_strategy.msgError("Unable to locate the preset unit for " +
			"Lam Esen's Tome in " +
			D2JSP_AREA_AreaToName(D2JSP_AREA_RUINED_TEMPLE) + ".");
		return(-1);
	}

	TDW_BOT_CHECK_PrecastChecks();
	if (TDW_PATH_GotoTargetArea(D2JSP_AREA_RUINED_TEMPLE, access_strategy,
		TDW_PATHL_AREA_LOAD_FLAG_DEFAULT))
		return(-1);
	TDW_BOT_CHECK_PrecastChecks();

	if (access_strategy.gotoXYPairLocal(tome_preset[0]))
		return(-1);

	// LamTome is classid 193.
	var tome_obj = getUnit(D2JSP_OBJ_TYPE_OBJECT, "LamTome");
	if (!tome_obj) {
		TDW_RS_SayError("Unable to locate Lam Esen's Tome");
		return(-1);
	}

	var tome_mode    = tome_obj.mode;
	var desired_spot = [tome_obj.x, tome_obj.y];

	TDW_RS_SayStatus("Clearing the immediate area of the chest which " +
		"contains Lam Esen's Tome...");

	TDW_BOT_MOVE_TeleportToDestination(desired_spot,
		TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_ALL);

	for (count_1 = 0; count_1 < 10; count_1++) {
		TDW_BOT_MOVE_DoArrival(TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_ALL, desired_spot);
		TDW_BOT_MOVE_DoDeparture(TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_ALL, desired_spot);
		delay(100);
	}

	if ((tome_mode == D2JSP_MODE_OBJECT_IDLE) ||
		(getUnit(D2JSP_OBJ_TYPE_ITEM, "Lam Esen's Tome") != null))
		TDW_RS_SayStatus("Take my TP to retrieve Lam Esen's Tome.");
	else
		TDW_RS_SayStatus("Lam Esen's Tome pedestal is open and there's no " +
			"sign of the Tome itself. Quest may already be done.");

	return(0);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TDW_RS_DoAct3_Council()
{
	var return_code     = 0;
	var this_act        = 2;
	var this_quest      = 5;
	var this_wait       = TDW_RS_DefaultWaits[this_act][this_quest];
	var quest_done      = D2JSP_QUEST_IsStartedAct(4);
	var access_strategy = TDW_BOT_MOVE_GetDefaultLinkAccessStrategy();

	var TDW_RS_A3Q5_CouncilList = [
		"Ismail Vilehand",
		"Geleb Flamefinger",
		"Toorc Icefist"
	];

	if (TDW_BOT_MOVE_GotoActTown(3))
		return(-1);

	TDW_RS_SayStatus("Analyzing " + D2JSP_AREA_AreaToName(D2JSP_AREA_TRAVINCAL) +
		" topology to determine safe rushee clearance area...");

	// Get the necessary room information for Travincal...
	TDW_PATH_CreateArea(D2JSP_AREA_TRAVINCAL);
	var area_ref    = TDW_PATH_MapGlobal.area_list[D2JSP_AREA_TRAVINCAL];
	var meta_row    = 1;
	var meta_col    = 3;
	var base_room   = area_ref.meta_map[meta_row][meta_col];
	var base_coords = [base_room.x_1 + 20, base_room.y_1 + 6];
	var clear_list  = new Array();
	for (var count_1 = -3; count_1 <= 3; count_1++) {
		var this_room = area_ref.meta_map[meta_row][meta_col + count_1];
		clear_list.push([this_room, this_room.getCenterAccessible()]);
	}
	TDW_PATH_BuildMap(D2JSP_AREA_TRAVINCAL);

	TDW_BOT_CHECK_PrecastChecks();

	if (TDW_PATH_GotoTargetArea(D2JSP_AREA_TRAVINCAL, access_strategy,
		TDW_PATHL_AREA_LOAD_FLAG_DEFAULT))
		return_code = -1;
	else {
		// Clear the necessary rooms...
		TDW_BOT_MOVE_GotoXYPair(clear_list[0][1], TDW_PATH_MAP_BUILD_FLAG_NONE);
		var npc_flag_1;
		TDW_RS_SayStatus("Clearing a safe rushee area for the imminent death " +
			"of the High Council...");
		do {
			npc_flag_1 = false;
			for (var count_1 = 0; count_1 < clear_list.length; count_1++) {
				var this_room  = clear_list[count_1][0];
				var this_coord = clear_list[count_1][1];
				TDW_BOT_MOVE_TeleportToDestination(this_coord,
					TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_ALL);
				var npc_flag_2;
				do {
					var npc_obj  = getUnit(D2JSP_UTIL_GETUNIT_NPC, null,
						D2JSP_MODE_FLAG_INDICATOR | D2JSP_MODE_NPC_FLAGS_ALL_BUT_DEAD);
					npc_flag_2 = false;
					if (npc_obj) {
						do {
							if (D2JSP_NPC_ShouldAttackEnemy(npc_obj) &&
								(npc_obj.x >= this_room.x_1) &&
								(npc_obj.x <= this_room.x_2) &&
								(npc_obj.x >= this_room.x_1) &&
								(npc_obj.y >= this_room.y_1) &&
								(npc_obj.y <= this_room.y_2)) {
								TDW_BOT_MOVE_TeleportToDestination([npc_obj.x, npc_obj.y],
									TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_ALL);
								TDW_BOT_MOVE_TeleportToDestination(this_coord,
									TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_NONE);
								npc_flag_1 = true;
								npc_flag_2 = true;
								break;
							}
						} while (npc_obj && npc_obj.getNext(null,
							D2JSP_MODE_FLAG_INDICATOR | D2JSP_MODE_NPC_FLAGS_ALL_BUT_DEAD));
					}
				} while (npc_flag_2);
			}
		} while (npc_flag_1);
		// Go to the rushee portal spot.
		TDW_BOT_MOVE_GotoXYPair(base_coords, TDW_PATH_MAP_BUILD_FLAG_NONE);
		// Ensure there aren't any Hydras around...
		var hydra_msg = false;
		do {
			var hydra_unit_obj  = getUnit(D2JSP_UTIL_GETUNIT_NPC, "Hydra");
			var hydra_unit_flag = false;
			if (hydra_unit_obj) {
				do {
					if ((hydra_unit_obj.mode != D2JSP_MODE_NPC_DEATH) &&
						(hydra_unit_obj.mode != D2JSP_MODE_NPC_DEAD)) {
						hydra_unit_flag = true;
						break;
					}
				} while (hydra_unit_obj && hydra_unit_obj.getNext("Hydra"));
			}
			if (!hydra_unit_flag)
				break;
			if (!hydra_msg) {
				TDW_RS_SayOrders("Waiting for Council Hydras to die down...");
				hydra_msg = true;
			}
			TDW_BOT_MOVE_DoArrival(TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_ALL);
			delay(100);
		} while (true);
		// Area should now be clear for the rushee...
		if (TDW_RS_FinalDelay("The High Council", this_wait,
			"Stay at my portal until I tell you to move.", "A3Q5_1") < 0) {
			TDW_RS_SayOrders("Quest aborted. Return to town.", "ReturnToTown");
			return(0);
		}
		TDW_BOT_CHECK_PrecastChecks(60000);		// Ensure pre-casts will last...
		TDW_RS_SayOrders("Stay at my portal until I tell you to move.");
		TDW_BOT_AttackNPCSpec.setDoAttackOn();
		for (var count_1 = 0; count_1 < TDW_RS_A3Q5_CouncilList.length; count_1++) {
			TDW_BOT_AttackNPCSpec.copyFromMaster(TDW_RS_A3Q5_CouncilList[count_1]);
			TDW_BOT_AttackNPCSpec.setMustKillOn(TDW_RS_A3Q5_CouncilList[count_1]);
			TDW_BOT_AttackNPCSpec.findNPC(TDW_RS_A3Q5_CouncilList[count_1]).flags |=
				TDW_BOT_ATTACK_NPC_FLAG_NO_RETURN;
		}
		for (var count_1 = 0; count_1 < TDW_RS_A3Q5_CouncilList.length; count_1++) {
			var this_npc = TDW_PATHL_GetEnemyByName(TDW_RS_A3Q5_CouncilList[count_1]);
			if (this_npc)
				this_npc.gotoEnemy(access_strategy);
			TDW_BOT_AttackNPCSpec.killAny();
		}
		TDW_BOT_AttackNPCSpec.killAny();
		TDW_BOT_AttackNPCSpec.killAny();
	}

	TDW_RS_SayOrders("Quest completed. Return to town and talk with Cain.",
		"A3Q5_2");

	return(return_code);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TDW_RS_DoAct3_Mephisto()
{
	var this_act   = 2;
	var this_quest = 5;
	var this_wait  = TDW_RS_DefaultWaits[this_act][this_quest];
	var count_1;

var TDW_RS_Durance3Moves = [
	[17685, 8025],
	[17703, 8047],
	[17702, 8069],
	[17702, 8094],
	[17692, 8113],
//	[17681, 8086],
	[17687, 8069],
//	[17679, 8063],
	[17664, 8070],
	[17645, 8070],
	[17617, 8070],
	[17642, 8070],
	[17654, 8089],
	[17652, 8105],
	[17652, 8069],
	[17628, 8101],
	[17610, 8098],
	[17608, 8119],
	[17618, 8136],
	[17583, 8125],
	[17580, 8103],
	[17582, 8084],
	[17588, 8069],
	[17581, 8045],
	[17574, 8021],
	[17574, 8005],
	[17590, 8010],
	[17608, 8013],
	[17619, 8012],
	[17607, 8024],
	[17610, 8046],
	[17625, 8043],
	[17643, 8041],
	[17621, 8042],
	[17602, 8029],
	[17586, 8013],
	[17577, 8008]
];
var TDW_RS_PreMephistoMoves = [
	[17577, 8008],
	[17579, 8033],
	[17582, 8054],
	[17582, 8054],
	[17587, 8069],
	[17574, 8069],
	[17564, 8070],
	[17549, 8067]
];
var TDW_RS_PostMephistoMoves = [
	[17549, 8067],
	[17530, 8064],
	[17515, 8046],
	[17516, 8064],
	[17515, 8087],
	[17512, 8062]
];
var TDW_RS_ToRedPortal = [
	[17535, 8065],
	[17556, 8066],
	[17577, 8070],
	[17588, 8068]
];

	var TDW_RS_A3Q6_CouncilList = [
		"Ismail Vilehand",
		"Geleb Flamefinger",
		"Toorc Icefist"
	];

	if (TDW_BOT_MOVE_GotoActTown(3))
		return(-1);

	var quest_done      = D2JSP_QUEST_IsStartedAct(4);
	var access_strategy = TDW_BOT_MOVE_GetDefaultLinkAccessStrategy();

	TDW_BOT_AttackNPCSpec.setDoAttackOn();
	for (var count_1 = 0; count_1 < TDW_RS_A3Q6_CouncilList.length; count_1++) {
		TDW_BOT_AttackNPCSpec.copyFromMaster(TDW_RS_A3Q6_CouncilList[count_1]);
		TDW_BOT_AttackNPCSpec.setMustKillOn(TDW_RS_A3Q6_CouncilList[count_1]);
		TDW_BOT_AttackNPCSpec.findNPC(TDW_RS_A3Q6_CouncilList[count_1]).flags |=
			TDW_BOT_ATTACK_NPC_FLAG_NO_RETURN;
	}

	TDW_BOT_CHECK_PrecastChecks();
	if (TDW_PATH_GotoTargetArea(D2JSP_AREA_DURANCE_OF_HATE_LEVEL_3,
		access_strategy, TDW_PATHL_AREA_LOAD_FLAG_DEFAULT))
		return(-1);
	TDW_BOT_CHECK_PrecastChecks();

	TDW_RS_SayStatus("Clearing a safe rushee area for the imminent death " +
		"of Mephisto...");
	for (count_1 = 0; count_1 < TDW_RS_Durance3Moves.length; count_1++)
		TDW_BOT_MOVE_TeleportToDestination(TDW_RS_Durance3Moves[count_1],
			TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_TARGET);

	TDW_BOT_CHECK_PrecastChecks(60000);		// Ensure pre-casts will last...
	if (TDW_RS_FinalDelay("Mephisto", this_wait,
		"Stay at my portal until I tell you to move.", "A3Q6_1") < 0) {
		TDW_RS_SayOrders("Quest aborted. Return to town.", "ReturnToTown");
		return(0);
	}
	TDW_BOT_CHECK_PrecastChecks(60000);		// Ensure pre-casts will last...
	TDW_RS_SayOrders("Stay at my portal until I tell you to move.");

	var poison_townheal = TDW_BOT_ContextList["poison.townheal"];
	TDW_BOT_ContextList["poison.townheal"] = false;

	TDW_BOT_MOVE_TeleportToDestinationList(TDW_RS_PreMephistoMoves,
		TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_TARGET);

	TDW_BOT_AttackNPCSpec.copyFromMaster("Mephisto");
	TDW_BOT_AttackNPCSpec.setMustKillOn("Mephisto");
	TDW_BOT_AttackNPCSpec.setDoAttackOn();

	var kill_npc = TDW_BOT_AttackNPCSpec.findNPC("Mephisto");

	for (count_1 = 0; count_1 < 10; count_1++) {
		var npc_obj = getUnit(D2JSP_UTIL_GETUNIT_NPC, kill_npc.name);
		if (npc_obj) {
			if ((npc_obj.mode != D2JSP_MODE_NPC_DEATH) &&
				(npc_obj.mode != D2JSP_MODE_NPC_DEAD) && npc_obj.hp)
				TDW_BOT_ATTACK_KillSpecifiedNPC(kill_npc);
			TDW_RS_SayStatus(kill_npc.name + " is now dead!!!");
			break;
		}
		TDW_BOT_MOVE_DoArrival(TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_ALL);
		TDW_BOT_MOVE_DoDeparture(TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_ALL);
		delay(50);
	}

	TDW_BOT_MOVE_TeleportToDestinationList(TDW_RS_PostMephistoMoves,
		TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_TARGET);

	TDW_BOT_SUPP_PopNearbyChests(TDW_BOT_ContextList["mysnagit.pop.chests.radius"],
		[me.x, me.y]);
	TDW_BOT_SUPP_MySnagIt([me.x, me.y]);
	TDW_BOT_SUPP_MySnagIt([me.x, me.y]);
	TDW_BOT_SUPP_MySnagIt([me.x, me.y]);

	for (count_1 = 0; count_1 < TDW_RS_ToRedPortal.length; count_1++) {
		TDW_BOT_MOVE_DoArrival(TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_ALL);
		TDW_BOT_MOVE_DoDeparture(TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_ALL);
		D2JSP_SKILL_TeleportToPair(TDW_RS_ToRedPortal[count_1]);
		TDW_BOT_CHECK_DoChecks();
	}

	TDW_RS_SayOrders("Take Mephisto's red portal to Act 4.", "A3Q6_2");

	if (!quest_done) {
		TDW_MOVE_LookForAndTakePortal(0, "", 100, 50, true);
		if (me.act == 4) {
			var npc_obj;
			if ((npc_obj = D2JSP_NPC_InteractWithNPC("Tyrael")) != null)
				D2JSP_UTIL_GEN_CancelNPC(npc_obj);
		}
	}

	return(0);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TDW_RS_DoAct4_Izual()
{
	var this_act   = 3;
	var this_quest = 0;
	var this_wait  = TDW_RS_DefaultWaits[this_act][this_quest];

	var access_strategy = TDW_BOT_MOVE_GetDefaultLinkAccessStrategy();

	if (TDW_BOT_MOVE_GotoActTownForArea(D2JSP_AREA_PLAINS_OF_DESPAIR))
		return(-1);

	TDW_RS_SayStatus("Analyzing " +
		D2JSP_AREA_AreaToName(D2JSP_AREA_PLAINS_OF_DESPAIR) +
		" topology to determine safe rushee clearance area...");

	var this_npc = TDW_PATHL_GetEnemyByName("Izual");
	if (!this_npc) {
		TDW_RS_SayError("Unable to locate the TDW enemy object for Izual.");
		return(-1);
	}

	if (TDW_BOT_ClearRoomsNearbyByRoomNumber(D2JSP_AREA_PLAINS_OF_DESPAIR,
		this_npc.room_spec[0], TDW_BOT_CLEAR_ROOMS_NEARBY_FLAG_ADJACENT_1 |
		TDW_BOT_CLEAR_ROOMS_NEARBY_FLAG_DEPTH_2, access_strategy,
		"Clearing a safe rushee area near Izual..."))
		return(-1);

	if (TDW_RS_FinalDelay("Izual", this_wait,
		"Stay at my portal until I tell you to move.", "A4Q1_1") < 0)
		TDW_RS_SayOrders("Quest aborted. Return to town.", "ReturnToTown");
		return(0);

	TDW_BOT_AttackNPCSpec.copyFromMaster("Izual");
	TDW_BOT_AttackNPCSpec.setMustKillOn("Izual");
	TDW_BOT_AttackNPCSpec.setDoAttackOn();
	TDW_BOT_AttackNPCSpec.findNPC("Izual").flags |=
		TDW_BOT_ATTACK_NPC_FLAG_NO_RETURN;
	TDW_BOT_AttackNPCSpec.setDoAttackOn();

	TDW_BOT_AttackNPCSpec.killAny();
	this_npc.gotoEnemy(access_strategy);
	TDW_BOT_AttackNPCSpec.killAny();

	TDW_RS_SayOrders("Return to town and talk to Tyrael.", "A4Q1_2");

	return(0);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TDW_RS_DoAct4_HellForge()
{
//	var heph_dead  = false;
	var this_act   = 3;
	var this_quest = 1;
	var this_wait  = TDW_RS_DefaultWaits[this_act][this_quest];
	var count_1;

	if (TDW_BOT_MOVE_GotoActTown(4))
		return(-1);

	var access_strategy = TDW_BOT_MOVE_GetDefaultLinkAccessStrategy();

	TDW_BOT_AttackNPCSpec.copyFromMaster("Hephasto The Armorer");
	TDW_BOT_AttackNPCSpec.setMustKillOn("Hephasto The Armorer");
	TDW_BOT_AttackNPCSpec.setDoAttackOn();

/*
	if (TDW_BOT_MOVE_WaypointOutbound(D2JSP_AREA_RIVER_OF_FLAME))
		return(-1);
*/

	TDW_BOT_CHECK_PrecastChecks();
	if (TDW_PATH_GotoTargetArea(D2JSP_AREA_RIVER_OF_FLAME, access_strategy,
		TDW_PATHL_AREA_LOAD_FLAG_DEFAULT))
		return(-1);
	TDW_BOT_CHECK_PrecastChecks();

	// Go to the Hellforge room...
	if (TDW_BOT_MOVE_GotoRoom([853, 854],
		TDW_PATH_MAP_BUILD_FLAG_NO_ACCESS_CHECK))
		return(-1);

	TDW_RS_SayStatus("In " + D2JSP_AREA_AreaToName() + ".");

	var forge_obj = getUnit(D2JSP_UTIL_GETUNIT_OBJECT, "Hellforge");
	if (forge_obj)
		TDW_BOT_MOVE_TeleportToDestination([forge_obj.x, forge_obj.y],
			TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_ALL);

	TDW_RS_SayStatus("Clearing a safe rushee area for the Hellforge quest.");

	for (count_1 = 0; count_1 < 20; count_1++) {
		TDW_BOT_MOVE_DoArrival(TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_ALL);
		TDW_BOT_MOVE_DoDeparture(TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_ALL);
		delay(100);
	}

	TDW_RS_SayOrders("Take my TP to complete the Hellforge quest.");

	return(0);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TDW_RS_DoAct4_Diablo(quest_params)
{
	var return_code;
	var quest_done = D2JSP_QUEST_IsStartedAct(5);

	if (TDW_BOT_MOVE_GotoActTown(4))
		return(-1);

	TDW_BOT_AttackNPCSpec.copyFromMaster("Infector of Souls");
	TDW_BOT_AttackNPCSpec.copyFromMaster("Lord De Seis");
	TDW_BOT_AttackNPCSpec.copyFromMaster("Grand Vizier of Chaos");
	TDW_BOT_AttackNPCSpec.copyFromMaster("Diablo");

	TDW_BOT_AttackNPCSpec.setMustKillOn("Infector of Souls");
	TDW_BOT_AttackNPCSpec.setMustKillOn("Lord De Seis");
	TDW_BOT_AttackNPCSpec.setMustKillOn("Grand Vizier of Chaos");
	TDW_BOT_AttackNPCSpec.setMustKillOn("Diablo");

	TDW_BOT_AttackNPCSpec.setDoAttackOn();

	TDW_PATH_CreateArea(D2JSP_AREA_RIVER_OF_FLAME);
	TDW_PATH_BuildMap(D2JSP_AREA_RIVER_OF_FLAME);
	TDW_PATH_CreateArea(D2JSP_AREA_CHAOS_SANCTUM);
	TDW_PATH_BuildMap(D2JSP_AREA_CHAOS_SANCTUM);

	return_code = TDW_RS_DoAct4_DiabloCore(quest_params);

	TDW_RS_SayOrders("Talk to Tyrael and transit to Act 5.", "A4Q3_2");

	if ((!quest_done) &&
		(!D2JSP_QUEST_GetQuestBit(4, 3, D2JSP_QUEST_BIT_A4_Q3_TALK_TYRAEL))) {
		TDW_BOT_MOVE_RecoverInTown(false);
		D2JSP_NPC_FinalizeAct4();
	}
	return(return_code);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TDW_RS_DoAct4_DiabloCore(quest_params)
{
	var this_act   = 3;
	var this_quest = 2;
	var this_wait  = TDW_RS_DefaultWaits[this_act][this_quest];
	var count_1;

var TDW_RS_ChaosCenter         = [7791, 5290];
var TDW_RS_ChaosSanctuaryMoves = [
	[7798, 5592],
	[7792, 5570],
];
var TDW_RS_ChaosSanctuaryClear = [
	[7818, 5316],
	[7816, 5360],
	[7797, 5365],
	[7767, 5368],
	[7770, 5309],
	[7720, 5285],
	[7717, 5300],
	[7674, 5299],
	[7717, 5292],
	[7771, 5284],
	[7787, 5264],
	[7808, 5269],
	[7804, 5237],
	[7777, 5238],
	[7774, 5283]
];

	var access_strategy = TDW_BOT_MOVE_GetDefaultLinkAccessStrategy();

	TDW_BOT_CHECK_PrecastChecks();

	var wp_indices = D2JSP_AREA_AreaToWayPointIndices(D2JSP_AREA_RIVER_OF_FLAME);
	if (TDW_MOVE_WaypointAccessData[wp_indices[0]][wp_indices[1]]) {
		if (TDW_BOT_MOVE_WaypointOutbound(D2JSP_AREA_RIVER_OF_FLAME))
			return(-1);
	}
	else {
		var wp_obj = D2JSP_AREA_GetWaypointObjectForArea(D2JSP_AREA_RIVER_OF_FLAME);
		if (TDW_PATH_GotoTargetArea(D2JSP_AREA_RIVER_OF_FLAME, access_strategy,
			TDW_PATHL_AREA_LOAD_FLAG_DEFAULT))
			return(-1);
		else if (TDW_BOT_MOVE_GotoRoom(wp_obj.room_spec,
			TDW_PATH_MAP_BUILD_FLAG_NO_ACCESS_CHECK))
			return(-1);
	}

	TDW_BOT_CHECK_PrecastChecks();

	// Go to the Chaos Sanctuary entrance...
	var tour_flag;
	tour_flag                            = TDW_BOT_ContextList["operation.tour"];
	TDW_BOT_ContextList["operation.tour"] = true;
	TDW_BOT_MOVE_TeleportToDestination([7798, 5612],
		TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_NONE);

	TDW_BOT_MOVE_TeleportToDestinationList(TDW_RS_ChaosSanctuaryMoves,
		TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_NONE);
	if (TDW_RS_DoAct4_DiabloCheck())
		return(0);

	TDW_BOT_MOVE_TeleportToDestination(TDW_RS_ChaosCenter,
		TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_NONE);
	if (TDW_RS_DoAct4_DiabloCheck())
		return(0);

	TDW_RS_SayStatus("In " + D2JSP_AREA_AreaToName() + ".");

	if (TDW_RS_DoAct4_DiabloCheck())
		return(0);
	TDW_BOT_STATE_FixBadStatesUs();
	if (TDW_RS_DoAct4_DiabloCheck())
		return(0);

if ((!D2JSP_UTIL_GEN_TypeOfArray(quest_params)) || (!quest_params.length) ||
	(quest_params[0].toLowerCase() != "seals")) {

	TDW_BOT_ContextList["operation.tour"] = tour_flag;

	if (TDW_RS_DoAct4_Seals(TDW_RS_ChaosCenter, true, false, 0, 2))
		return(-2);
	if (TDW_RS_DoAct4_DiabloCheck())
		return(0);

	TDW_RS_SayStatus("Clearing the left-hand (west) side of " +
		D2JSP_AREA_AreaToName() + ".");
	TDW_BOT_MOVE_DoArrival(TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_ALL);
	TDW_BOT_MOVE_DoDeparture(TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_ALL);
	TDW_BOT_MOVE_TeleportToDestinationList(TDW_RS_ChaosSanctuaryClear,
		TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_ALL);
	if (TDW_RS_DoAct4_DiabloCheck())
		return(0);
	TDW_BOT_MOVE_DoArrival(TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_ALL);
	TDW_BOT_MOVE_DoDeparture(TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_ALL);
	TDW_BOT_MOVE_TeleportToDestination(TDW_RS_ChaosCenter,
		TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_ALL);
	if (TDW_RS_DoAct4_DiabloCheck())
		return(0);
	if (TDW_RS_DoAct4_Seals(TDW_RS_ChaosCenter, true, true, 2, 2))
		return(-2);
	if (TDW_RS_DoAct4_DiabloCheck())
		return(0);

	if (TDW_RS_DoAct4_CreateRusheePortal(true))
		return(-1);

	TDW_BOT_ContextList["operation.tour"] = tour_flag;

	if (TDW_RS_DoAct4_Seals(TDW_RS_ChaosCenter, true, true, 0, 1))
		return(-2);

}
else {
	if (TDW_RS_DoAct4_Seals(TDW_RS_ChaosCenter, false, true, 0, 2))
		return(-2);
	if (TDW_RS_DoAct4_CreateRusheePortal(false))
		return(-1);
	if (TDW_RS_DoAct4_DiabloCheck())
		return(0);
	TDW_BOT_MOVE_TeleportToDestination(TDW_RS_ChaosCenter,
		TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_NONE);
	if (TDW_RS_DoAct4_DiabloCheck())
		return(0);
}

	TDW_RS_SayStatus("Waiting for Diablo to show up.");
	for (count_1 = 0; count_1 < 300; count_1++) {
		if (TDW_RS_DoAct4_DiabloCheck())
			return(0);
		delay(50);
	}

	TDW_RS_DoAct4_DiabloCheck()

	return(0);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TDW_RS_DoAct4_DiabloCheck()
{
	var kill_npc = TDW_BOT_AttackNPCSpecData.findNPC("Diablo");
	var npc_obj  = getUnit(D2JSP_UTIL_GETUNIT_NPC, "Diablo");

	if (npc_obj) {
		if ((npc_obj.mode != D2JSP_MODE_NPC_DEATH) &&
			(npc_obj.mode != D2JSP_MODE_NPC_DEAD) && npc_obj.hp)
			TDW_BOT_ATTACK_KillSpecifiedNPC(kill_npc);
//		TDW_RS_SayStatus(kill_npc.name + " is now dead!!!");
		return(1);
	}

	return(0);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TDW_RS_DoAct4_CreateRusheePortal(refit_flag)
{
	var TDW_RS_ChaosTPSpot         = [7757, 5271];

	TDW_BOT_MOVE_DoArrival(TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_ALL);
	TDW_BOT_MOVE_DoDeparture(TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_ALL);
	TDW_BOT_MOVE_TeleportToDestination(TDW_RS_ChaosTPSpot,
		TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_ALL);

	if (refit_flag) {
		if (TDW_MOVE_PortalToTown(TDW_BOT_CHECK_ChickenChecksBasicMe, null)) {
			TDW_RS_SayError("Unable to return to town.");
			return(-1);
		}
		if (TDW_BOT_MOVE_TownLogic(TDW_BOT_MOVE_TOWN_FLAG_FORCE_ISF |
			TDW_BOT_MOVE_TOWN_FLAG_FILL_ALL |
			((TDW_BOT_ContextList["mercernary.needed"]) ?
			TDW_BOT_MOVE_TOWN_FLAG_MERC_NEEDED : TDW_BOT_MOVE_TOWN_FLAG_NONE),
			TDW_ISF_Cfg)) {
			D2JSP_UTIL_LOG_GetALog().logError("Unable to complete town logic.");
			return(-1);
		}
		if (TDW_BOT_MOVE_TownLogic(TDW_BOT_MOVE_TOWN_FLAG_FORCE_ISF_SELL |
			TDW_BOT_MOVE_TOWN_FLAG_FILL_ALL |
			((TDW_BOT_ContextList["mercernary.needed"]) ?
			TDW_BOT_MOVE_TOWN_FLAG_MERC_NEEDED : TDW_BOT_MOVE_TOWN_FLAG_NONE),
			TDW_ISF_Cfg)) {
			D2JSP_UTIL_LOG_GetALog().logError("Unable to complete town logic.");
			return(-1);
		}
		TDW_MOVE_COMPAT_TownMove("portalspot");
		TDW_BOT_CHECK_PrecastChecks(30000);		// Ensure pre-casts will last...
		TDW_MOVE_LookForAndTakePortal(D2JSP_AREA_CHAOS_SANCTUM, me.name,
			50, 50, false);
		if (me.area != D2JSP_AREA_CHAOS_SANCTUM) {
			TDW_RS_SayError("Unable to return to " +
				D2JSP_AREA_AreaToName(D2JSP_AREA_CHAOS_SANCTUM) + ".");
			return(-2);
		}
	}

	if (TDW_MOVE_OpenTownPortal()) {
		TDW_RS_SayError("Unable to use Tome of Town Portal.");
		return(-1);
	}

	TDW_RS_SayOrders("Take my TP *NOW* to " + D2JSP_AREA_AreaToName() +
		" to complete the Diablo quest.", "A4Q3_1");
	TDW_RS_SayOrders("Stay on the left-hand (west) side of " +
		D2JSP_AREA_AreaToName() + " near my TP.");
	TDW_RS_SayOrders("Hide in a corner until Diablo is dead.");
	TDW_RS_SayOrders("If you die, stay dead to still get the quest.");

	TDW_BOT_CHECK_PrecastChecks(30000);		// Ensure pre-casts will last...

	return(0);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TDW_RS_DoAct4_Seals(chaos_center, clear_flag, seal_flag, first_index,
	last_index)
{
	var attack_flags;
	var count_1;
	var count_2;

var TDW_RS_ChaosSealList = [
	[[7929, 5282], 2, 392, 393, "Infector of Souls"],
	[[7790, 5152], 1, 394, 394, "Lord De Seis"],
	[[7671, 5295], 2, 395, 396, "Grand Vizier of Chaos"]
];

	for (count_1 = 0; count_1 < TDW_RS_ChaosSealList.length; count_1++)
		TDW_RS_ChaosSealList[count_1][5] = new TDW_BOT_ATTACK_SpecialNPC(
			TDW_RS_ChaosSealList[count_1][4], TDW_BOT_ATTACK_NPC_FLAG_NONE, 5,
			11, 25);

	attack_flags = (clear_flag) ? TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_ALL :
		TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_NONE;

	TDW_BOT_MOVE_DoArrival(TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_ALL);
	TDW_BOT_MOVE_DoDeparture(TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_ALL);
	TDW_BOT_MOVE_TeleportToDestination(chaos_center, attack_flags);

	var tour_flag  = TDW_BOT_ContextList["operation.tour"];
	var mana_regen = TDW_BOT_ContextList["mana.regen.actual"];

	TDW_BOT_ContextList["operation.tour"]    = (clear_flag) ? false : true;
	TDW_BOT_ContextList["mana.regen.actual"] = 1;

	for (count_1 = first_index; count_1 <= last_index; count_1++) {
		TDW_BOT_MOVE_DoArrival(attack_flags);
		TDW_BOT_MOVE_DoDeparture(attack_flags);
		var dead_flag = false;
		var move_list =
			TDW_BOT_MOVE_TeleportToDestination(TDW_RS_ChaosSealList[count_1][0],
			attack_flags);
		TDW_BOT_CHECK_PrecastChecks(30000);		// Ensure pre-casts will last...
		for (count_2 = 0; count_2 < TDW_RS_ChaosSealList[count_1][1]; count_2++) {
			var seal_obj = getUnit(D2JSP_UTIL_GETUNIT_OBJECT,
				TDW_RS_ChaosSealList[count_1][count_2 + 2]);
			if (seal_obj)
				TDW_BOT_MOVE_TeleportToDestination([seal_obj.x, seal_obj.y],
					attack_flags);
			var seal_obj = getUnit(D2JSP_UTIL_GETUNIT_OBJECT,
				TDW_RS_ChaosSealList[count_1][count_2 + 2]);
			if (seal_flag && seal_obj && (seal_obj.mode != D2JSP_MODE_OBJECT_OPENED)) {
				TDW_RS_SayStatus("Opening " + TDW_RS_ChaosSealList[count_1][4] +
					" seal " + (count_2 + 1) + " of " +
					TDW_RS_ChaosSealList[count_1][1] +
					" (id = " + TDW_RS_ChaosSealList[count_1][count_2 + 2] +
					") at [" + seal_obj.x + ", " + seal_obj.y + "]");
TDW_BOT_Log.logDetail("SEAL STATUS: Opening " + TDW_RS_ChaosSealList[count_1][4] +
	" seal " + (count_2 + 1) + " of " +
	TDW_RS_ChaosSealList[count_1][1] + "(id = " +
	TDW_RS_ChaosSealList[count_1][count_2 + 2] +
	") at [" + seal_obj.x + ", " + seal_obj.y + "]");
				TDW_BOT_MOVE_DoArrival(attack_flags);
				TDW_BOT_MOVE_DoDeparture(attack_flags);
				TDW_BOT_MOVE_TeleportToDestination([seal_obj.x, seal_obj.y], attack_flags);
				for (count_2 = 0; count_2 < 5; count_2++) {
					var seal_obj = getUnit(D2JSP_UTIL_GETUNIT_OBJECT,
						TDW_RS_ChaosSealList[count_1][count_2 + 2]);
					if (seal_obj && (seal_obj.mode == D2JSP_MODE_OBJECT_IDLE)) {
						D2JSP_UTIL_InteractObject(seal_obj);
						if ((seal_obj.classid == 394) && (seal_obj.x == 7773) &&
							(seal_obj.y == 5155))
							TDW_BOT_MOVE_TeleportToDestination([7775, 5188],
								attack_flags);
						break
					}
//					TDW_BOT_MOVE_DoArrival(TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_ALL);
//					TDW_BOT_MOVE_DoDeparture(TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_ALL);
					delay(1);
				}
			}
		}
		if (seal_flag) {
			TDW_BOT_ContextList["operation.tour"] = false;
			for (count_2 = 0; count_2 < 100; count_2++) {
/*
				if (getUnit(D2JSP_UTIL_GETUNIT_NPC, TDW_RS_ChaosSealList[count_1][4]))
					break;
*/
				if (TDW_BOT_AttackNPCSpec.findNPC(TDW_RS_ChaosSealList[count_1][4])
					== null) {
					dead_flag = true;
					break;
				}
				TDW_BOT_MOVE_DoArrival(TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_ALL);
				TDW_BOT_MOVE_DoDeparture(TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_ALL);
				delay(50);
			}
			TDW_BOT_ContextList["operation.tour"] = (clear_flag) ? false : true;
			if (!dead_flag) {
				while (move_list.length) {
					var this_dest = move_list.shift();
					TDW_BOT_MOVE_TeleportToDestination(this_dest,
						TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_TARGET);
					if (TDW_BOT_AttackNPCSpec.findNPC(TDW_RS_ChaosSealList[count_1][4])
						== null)
						dead_flag = true;
					TDW_BOT_MOVE_DoArrival(TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_ALL, this_dest);
					TDW_BOT_MOVE_DoDeparture(TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_ALL, this_dest);
				}
			}
		}
		TDW_BOT_MOVE_TeleportToDestination(TDW_RS_ChaosSealList[count_1][0],
			attack_flags);
		for (count_2 = 0; count_2 < TDW_RS_ChaosSealList[count_1][1]; count_2++) {
			var seal_obj = getUnit(D2JSP_UTIL_GETUNIT_OBJECT,
				TDW_RS_ChaosSealList[count_1][count_2 + 2]);
			if (seal_obj)
				TDW_BOT_MOVE_TeleportToDestination([seal_obj.x, seal_obj.y],
					attack_flags);
			var seal_obj = getUnit(D2JSP_UTIL_GETUNIT_OBJECT,
				TDW_RS_ChaosSealList[count_1][count_2 + 2]);
			if (seal_flag && seal_obj && (seal_obj.mode == D2JSP_MODE_OBJECT_IDLE))
				D2JSP_UTIL_InteractObject(seal_obj);
		}
		TDW_BOT_MOVE_TeleportToDestination(chaos_center, attack_flags);
		TDW_BOT_CHECK_PrecastChecks(30000);		// Ensure pre-casts will last...
		TDW_BOT_STATE_FixBadStatesUs();
		if (count_1 < (TDW_RS_ChaosSealList.length - 1)) {
			TDW_BOT_ContextList["mana.regen.actual"] = mana_regen;
			TDW_BOT_MOVE_DoManaRegen(TDW_BOT_ContextList["mana.regen.actual"], true,
				chaos_center);
		}
		TDW_BOT_ContextList["mana.regen.actual"] = 1;
	}

	TDW_BOT_ContextList["operation.tour"]    = tour_flag;
	TDW_BOT_ContextList["mana.regen.actual"] = mana_regen;

	return(0);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TDW_RS_DoAct5_Shenk()
{
/*
	var this_act   = 4;
	var this_quest = 1;
	var this_wait  = TDW_RS_DefaultWaits[this_act][this_quest];
	var start_to_safe;
	var safe_to_shenk;
	var count_1;

	var access_strategy = TDW_BOT_MOVE_GetDefaultLinkAccessStrategy();

	TDW_BOT_AttackNPCSpec.setMustKillOn("Shenk the Overseer");

	TDW_PATH_GotoTargetArea(D2JSP_AREA_RIGID_HIGHLANDS, access_strategy,
		TDW_PATHL_AREA_LOAD_FLAG_DEFAULT);

	if (me.area == D2JSP_AREA_RIGID_HIGHLANDS) {
		safe_to_shenk = TDW_BOT_PATH_SafeSpotToShenkList;
		start_to_safe = TDW_BOT_PATH_FrigidWPToSafeSpotList;
	}
	else {
		TDW_BOT_Log.logWarning("Unable to get to " +
			D2JSP_AREA_AreaToName(D2JSP_AREA_RIGID_HIGHLANDS) +
			" using the waypoint. Will go the long way to Shenk instead.");
		if (me.act != 5)
			TDW_MOVE_COMPAT_TownMove(5, "waypoint");
		if (me.act != 5) {
			TDW_BOT_Log.logError("Unable to get to Act 5. Giving up...");
			return(-1);
		}
		TDW_MOVE_COMPAT_TownMove("exit");
		var the_gate = getUnit(D2JSP_UTIL_GETUNIT_OBJECT, "gate");
		if (!the_gate) {
			TDW_BOT_Log.logError("Unable to locate the town gate!!!");
			return(-1);
		}
		if (the_gate.mode == D2JSP_MODE_OBJECT_IDLE)
			D2JSP_UTIL_InteractObject(the_gate);
//		while (true) {
		for (count_1 = 0; count_1 < 1000; count_1++) {
			var the_gate = getUnit(D2JSP_UTIL_GETUNIT_OBJECT, "gate");
			if (!the_gate) {
				TDW_BOT_Log.logError("Unable to locate the town gate!!!");
				return(-1);
			}
			if (the_gate.mode == D2JSP_MODE_OBJECT_OPENED)
				break;
			delay(10);
		}
if (the_gate.mode != D2JSP_MODE_OBJECT_OPENED) {
	print("The gate never opened!!!");
	print("Stopping");
	stop();
}
		safe_to_shenk = D2JSP_UTIL_GEN_CloneObject(TDW_BOT_PATH_ShenkToTownFast);
		safe_to_shenk = safe_to_shenk.reverse();
		start_to_safe = D2JSP_UTIL_GEN_CloneObject(TDW_BOT_PATH_A5Q1_GateToBloody);
		start_to_safe = TDW_BOT_PATH_A5Q1_GateToBloody.concat(safe_to_shenk);
		while (start_to_safe.length || D2JSP_AREA_IsTown()) {
			TDW_MOVE_MoveToXYPair(start_to_safe[0]);
			if (myDist(start_to_safe[0][0], start_to_safe[0][1]) < 5) {
				start_to_safe.shift();
				if (!D2JSP_AREA_IsTown())
					break;
			}
		}
		start_to_safe = null;
	}

	if (start_to_safe != null)
		TDW_BOT_MOVE_TeleportToDestinationList(start_to_safe,
			TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_ALL);

	if (TDW_RS_FinalDelay("Shenk", this_wait,
		"Stay at my portal location until Shenk is dead.") < 0) {
		TDW_RS_SayOrders("Quest aborted. Return to town.", "ReturnToTown");
		return(0);
	}

	TDW_BOT_CHECK_PrecastChecks(30000);

	TDW_BOT_MOVE_TeleportToDestinationList(safe_to_shenk,
		TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_NONE);
	TDW_BOT_MOVE_TeleportToDestination(TDW_BOT_PATH_BloodyShenkLocation,
		TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_NONE);

	for (count_1 = 0; count_1 < 10; count_1++) {
		TDW_BOT_MOVE_DoArrival(TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_ALL);
		TDW_BOT_MOVE_DoDeparture(TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_ALL);
		delay(100);
	}

	return(0);
*/

	var this_act   = 4;
	var this_quest = 1;
	var this_wait  = TDW_RS_DefaultWaits[this_act][this_quest];
	var start_to_safe;
	var safe_to_shenk;
	var count_1;

	if (TDW_BOT_MOVE_GotoActTown(5))
		return(-1);

	var access_strategy = TDW_BOT_MOVE_GetDefaultLinkAccessStrategy();

	TDW_BOT_AttackNPCSpec.setDoAttackOff();

	TDW_BOT_CHECK_PrecastChecks();

	if (TDW_PATH_GotoTargetArea(D2JSP_AREA_RIGID_HIGHLANDS, access_strategy,
		TDW_PATHL_AREA_LOAD_FLAG_DEFAULT))
		return(-1);

	if (access_strategy.callback_func(access_strategy,
		TDW_PATH_ASCB_GOTO_XYPAIR_LOCAL, TDW_BOT_PATH_ShenkSafeSpot))
		return(-1);

	TDW_RS_SayStatus("Clearing area for a safe TP...");
	do {
		TDW_BOT_MOVE_DoArrival(TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_ALL);
		TDW_BOT_MOVE_DoDeparture(TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_ALL);
		delay(100);
	} while (TDW_BOT_ClusterLastCount);

	TDW_BOT_CHECK_PrecastChecks(30000);
	if (TDW_RS_FinalDelay("Shenk", this_wait,
		"Stay at my portal location until Shenk is dead.") < 0) {
		TDW_RS_SayOrders("Quest aborted. Return to town.", "ReturnToTown");
		TDW_BOT_AttackNPCSpec = tmp_attack_spec;
		return(0);
	}
	TDW_BOT_CHECK_PrecastChecks(30000);

	TDW_BOT_AttackNPCSpec.copyFromMaster("Shenk the Overseer");
	TDW_BOT_AttackNPCSpec.setMustKillOn("Shenk the Overseer");
	TDW_BOT_AttackNPCSpec.setDoAttackOn();

	do {
		TDW_BOT_MOVE_DoArrival(TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_ALL);
		TDW_BOT_MOVE_DoDeparture(TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_ALL);
		delay(100);
	} while (TDW_BOT_ClusterLastCount);

	if (access_strategy.callback_func(access_strategy,
		TDW_PATH_ASCB_GOTO_XYPAIR_LOCAL, TDW_BOT_PATH_BloodyShenkLocation))
		return(-1);

	TDW_BOT_AttackNPCSpec.killAny();

	return(0);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TDW_RS_DoAct5_Rescue()
{
	var this_act   = 4;
	var this_quest = 2;
	var this_wait  = TDW_RS_DefaultWaits[this_act][this_quest];
	var room_list  = [931, 932, 933, 934, 935, 936, 937, 938];
	var count_1;
	var count_2;

	if (TDW_BOT_MOVE_GotoActTown(5))
		return(-1);

	var access_strategy = TDW_BOT_MOVE_GetDefaultLinkAccessStrategy();

	var enemy_npc = (parseFloat(me.version) < 0.3518) ? "Thresh Socket" :
		"Sharptooth Slayer";

	TDW_BOT_AttackNPCSpec.copyFromMaster(enemy_npc);
	TDW_BOT_AttackNPCSpec.setMustKillOn(enemy_npc);
	TDW_BOT_AttackNPCSpec.setDoAttackOn();

/*
	if (TDW_BOT_MOVE_WaypointOutbound(D2JSP_AREA_RIGID_HIGHLANDS))
		return(-1);
*/

	TDW_BOT_CHECK_PrecastChecks();
	if (TDW_PATH_GotoTargetArea(D2JSP_AREA_RIGID_HIGHLANDS, access_strategy,
		TDW_PATHL_AREA_LOAD_FLAG_DEFAULT))
		return(-1);
	TDW_BOT_CHECK_PrecastChecks();

	var area_map     = new D2JSP_RoomList();
	var examine_list = new Array();

	area_map.createArea();

	for (count_1 = 0; count_1 < area_map.room_list.length; count_1++) {
		for (count_2 = 0; count_2 < room_list.length; count_2++) {
			if (area_map.room_list[count_1].number == room_list[count_2])
				examine_list.push(area_map.room_list[count_1]);
		}
	}

	var found_room_count = 0;
	var done_cage_list   = new Array();

	for (count_1 = 0; count_1 < examine_list.length; count_1++) {
		if (TDW_BOT_MOVE_GotoXY(examine_list[count_1].x_1,
			examine_list[count_1].y_1, TDW_PATH_MAP_BUILD_FLAG_NO_ACCESS_CHECK))
			return(-1);
		var cage_obj = getUnit(D2JSP_UTIL_GETUNIT_OBJECT, "cagedwussie1");
		if ((!cage_obj) || done_cage_list[cage_obj.x + "|" + cage_obj.y])
			continue;
		var desired_spot = [cage_obj.x, cage_obj.y];
		TDW_BOT_MOVE_TeleportToDestination(desired_spot,
			TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_NONE);
		var gate_obj = getUnit(D2JSP_UTIL_GETUNIT_OBJECT, 189);
		var ordinal  = ["first", "second", "third"][found_room_count];
		if (gate_obj && (gate_obj.mode == D2JSP_MODE_OBJECT_OPENED))
			TDW_RS_SayStatus("The " + ordinal + " five Barbarians have already " +
				"been rescued.");
		else {
			if (TDW_MOVE_OpenTownPortal()) {
				TDW_RS_SayError("Unable to use Tome of Town Portal.");
				return(-1);
			}
			TDW_RS_SayOrders("Take my TP to rescue the " + ordinal +
				" five Barbarians.");
			for (count_2 = 0; count_2 < 50; count_2++) {
				gate_obj = getUnit(D2JSP_UTIL_GETUNIT_OBJECT, 189);
				if (gate_obj) {
					if (gate_obj.mode == D2JSP_MODE_OBJECT_IDLE)
						TDW_BOT_ATTACK_DoAttackList_1(gate_obj.x, gate_obj.y, gate_obj);
					else {
						TDW_RS_SayStatus("The " + ordinal +
							" five Barbarians have been rescued.");
						break;
					}
				}
				delay(100);
			}
			if (!gate_obj)
				TDW_RS_SayStatus("Hmmm... The " + ordinal +
					" five Barbarians may have been rescued already.");
		}
		done_cage_list[cage_obj.x + "|" + cage_obj.y] = true;
		if (++found_room_count == 3)
			break;
	}

	return(0);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TDW_RS_DoAct5_Anya()
{
	var this_act   = 4;
	var this_quest = 3;
	var this_wait  = TDW_RS_DefaultWaits[this_act][this_quest];
	var count_1;
	var count_2;

var TDW_RS_MoveToAnya = [
	[[10005, 6775], [10074, 6568], [10052, 6567], [[10180, 6776], [10220, 6632], [10297, 6550]]],
	[[10100, 6511], [10096, 6765], [10057, 6767]],
	[[10010, 6650], [10185, 6585], [10183, 6561], [[10096, 6725], [10161, 6798], [10282, 6782], [10232, 6634]]],
	[[10290, 6586], [10049, 6593], [10057, 6556], [[10184, 6665], [10050, 6691]]]
/*
	[[10091, 6765], [10056, 6767]],
//	[[10057, 6556], [10047, 6591]]
	[[10096, 6763], [10091, 6767]]	// Tile=#73, X=10100, X=6511
*/
];

	if (TDW_BOT_MOVE_GotoActTown(5))
		return(-1);

	var access_strategy = TDW_BOT_MOVE_GetDefaultLinkAccessStrategy();

	TDW_BOT_AttackNPCSpec.copyFromMaster("Frozenstein");
	TDW_BOT_AttackNPCSpec.setMustKillOn("Frozenstein");
	TDW_BOT_AttackNPCSpec.setDoAttackOn();

	TDW_BOT_CHECK_PrecastChecks();
	if (TDW_PATH_GotoTargetArea(D2JSP_AREA_CELLAR_OF_PITY, access_strategy,
		TDW_PATHL_AREA_LOAD_FLAG_DEFAULT))
		return(-1);
	TDW_BOT_CHECK_PrecastChecks();

/*
	if (TDW_BOT_MOVE_WaypointOutbound(D2JSP_AREA_CRYSTALIZED_CAVERN_LEVEL_1))
		return(-1);

	if (TDW_BOT_MOVE_GotoRoomAndTakeTile([1026, 1027, 1028, 1029], null,
		TDW_PATH_MAP_BUILD_FLAG_NO_ACCESS_CHECK))
		return(-1);

	TDW_RS_SayStatus("In " + D2JSP_AREA_AreaToName() + ".");
*/

/*
\t{ "Act 5 - Ice River A", 1038, 64, 64, 1, 1, 4, { "Expansion/icecave/RiverIce01.ds1", "Expansion/icecave/RiverIce02.ds1", "Expansion/icecave/RiverIce03.ds1", "Expansion/icecave/RiverIce04.ds1", NULL, NULL } },
\t{ "Act 5 - Ice River B", 1039, 64, 64, 1, 1, 4, { "Expansion/icecave/RiverIce05.ds1", "Expansion/icecave/RiverIce06.ds1", "Expansion/icecave/RiverIce07.ds1", "Expansion/icecave/RiverIce08.ds1", NULL, NULL } },
\t{ "Act 5 - Ice Pool A", 1040, 32, 32, 1, 1, 6, { "Expansion/icecave/poolroom01a.ds1", "Expansion/icecave/poolroom02a.ds1", "Expansion/icecave/poolroom03a.ds1", "Expansion/icecave/poolroom04a.ds1", "Expansion/icecave/poolroom05a.ds1", "Expansion/icecave/poolroom06a.ds1" } },
\t{ "Act 5 - Ice Pool B", 1041, 32, 32, 1, 1, 6, { "Expansion/icecave/poolroom01.ds1", "Expansion/icecave/poolroom02.ds1", "Expansion/icecave/poolroom03.ds1", "Expansion/icecave/poolroom04.ds1", "Expansion/icecave/poolroom05.ds1", "Expansion/icecave/poolroom06.ds1" } },
*/
/*
[10091, 6765]
[10056, 6767]

[10057, 6556]
[10047, 6591]

Room		Tile 73		  		Dest. #1				Dest. #2				fana Object
------	--------------		--------------		--------------		-----------
1038		[10005, 6775]		[10074, 6568]		[10052, 6567]		???
1038		[10100, 6511]		[10096, 6765]		[10057, 6767]		???
1038		[10010, 6650]		[10185, 6585]		[10183, 6561]		[10181, 6556]
1039		[10010, 6650]		[10185, 6585]		[10183, 6561]		[10181, 6556]
1039		[10290, 6586]		[10049, 6593]		[10057, 6556]		???
*/
	var my_room = D2JSP_ROOM_GetCurrentRoomNumber();
	var my_tile = getUnit(D2JSP_OBJ_TYPE_TILE, 73);
	var to_anya = null;

/*
	if (my_room == 1038)
		to_anya = TDW_RS_MoveToAnya[0];
	else if (my_room == 1039)
		to_anya = TDW_RS_MoveToAnya[1];
	else {
		TDW_RS_SayStatus("In room " + my_room + ", don't know how to get to Anya.");
		return(-1);
	}

print("My room = " + my_room);
var my_tile = getUnit(D2JSP_OBJ_TYPE_TILE, 73);
if (my_tile)
	print("Tile 73 = " + my_tile.x + ", " + my_tile.y);
else
	print("Tile 73 not found.");
print("***** STOPPING");
stop();

	TDW_RS_SayStatus("Heading to Anya");

	if (TDW_BOT_MOVE_GotoXYPair(to_anya[0]));
		return(-1);

	var kill_npc = new TDW_BOT_ATTACK_SpecialNPC("Frozenstein",
		TDW_BOT_ATTACK_NPC_FLAG_NONE, 5, 11, 18);

	for (count_1 = 0; count_1 < 10; count_1++) {
		var npc_obj = getUnit(D2JSP_UTIL_GETUNIT_NPC, kill_npc.name);
		if (npc_obj) {
			if ((npc_obj.mode != D2JSP_MODE_NPC_DEATH) &&
				(npc_obj.mode != D2JSP_MODE_NPC_DEAD) && npc_obj.hp)
				TDW_BOT_ATTACK_KillSpecifiedNPC(kill_npc);
			TDW_RS_SayStatus(kill_npc.name + " is now dead!!!");
			kill_npc = null;
			break;
		}
		TDW_BOT_MOVE_DoArrival(TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_ALL);
		TDW_BOT_MOVE_DoDeparture(TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_ALL);
		delay(50);
	}

	TDW_BOT_MOVE_TeleportToDestinationList(to_anya[1],
		TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_ALL);

*/

	if (!my_tile) {
		TDW_BOT_Log.logError("In room " + my_room + ", but unable to locate " +
			"tile 73 --- don't know how to get to Anya.");
		return(-1);
	}

	for (count_1 = 0; count_1 < TDW_RS_MoveToAnya.length; count_1++) {
		if ((my_tile.x == TDW_RS_MoveToAnya[count_1][0][0]) &&
			(my_tile.y == TDW_RS_MoveToAnya[count_1][0][1])) {
			to_anya = TDW_RS_MoveToAnya[count_1];
			break;
		}
	}

	if (to_anya == null) {
		TDW_BOT_Log.logError("In room " + my_room + ", tile 73 coordinates = [" +
			my_tile.x + ", " + my_tile.y + "] --- don't know how to get to Anya.");
		return(-1);
	}

	TDW_BOT_Log.logInfo("In room " + my_room + ", tile 73 coordinates = [" +
		my_tile.x + ", " + my_tile.y + "]");

	TDW_RS_SayStatus("Heading to Anya");

//	if (TDW_BOT_MOVE_GotoXYPair(to_anya[1]))
//		return(-1);

/*
	var my_map = new oMap(true, false);
	var the_path;

	my_map.InitializeMap();

	if ((the_path = my_map.FindPath(me.x, me.y, to_anya[1][0], to_anya[1][1], 30,
		mlREDUCEWALK, mlASTAR, mlFHDIAGSHORTCUT, 10)) != null)
		my_map.PathMove(the_path, false, 0);
	else
		TDW_BOT_Log.logError("Unable to find a path to Anya's location.");
*/

	if (to_anya.length == 3) {
		if (TDW_BOT_MOVE_GotoXYPair(to_anya[1],
			TDW_PATH_MAP_BUILD_FLAG_NO_ACCESS_CHECK))
			return(-1);
	}
	else {
		TDW_BOT_MOVE_TeleportToDestinationList(to_anya[3],
			TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_NONE);
		TDW_BOT_MOVE_TeleportToDestination(to_anya[1],
			TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_NONE);
	}

	TDW_BOT_MOVE_TeleportToDestination(to_anya[1],
		TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_ALL);

/*
	var kill_npc = new TDW_BOT_ATTACK_SpecialNPC("Frozenstein",
		TDW_BOT_ATTACK_NPC_FLAG_NONE, 5, 11, 18);
*/

	TDW_RS_SayStatus("Clearing a safe rushee area for the Anya quest.");

	for (count_1 = 0; count_1 < 10; count_1++) {
/*
		var npc_obj = getUnit(D2JSP_UTIL_GETUNIT_NPC, kill_npc.name);
		if (npc_obj) {
			if ((npc_obj.mode != D2JSP_MODE_NPC_DEATH) &&
				(npc_obj.mode != D2JSP_MODE_NPC_DEAD) && npc_obj.hp)
				TDW_BOT_ATTACK_KillSpecifiedNPC(kill_npc);
			TDW_RS_SayStatus(kill_npc.name + " is now dead!!!");
			kill_npc = null;
			break;
		}
*/
		TDW_BOT_MOVE_DoArrival(TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_ALL);
		TDW_BOT_MOVE_DoDeparture(TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_ALL);
		delay(100);
	}

	TDW_BOT_MOVE_TeleportToDestination(to_anya[2],
		TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_ALL);

	if (TDW_MOVE_OpenTownPortal()) {
		TDW_RS_SayError("Unable to use Tome of Town Portal.");
		return(-1);
	}

	if (getUnit(D2JSP_UTIL_GETUNIT_OBJECT, "fana"))
		TDW_RS_SayOrders("Take my TP to rescue Anya.");
	else
		TDW_RS_SayStatus("Hmmm... Anya may have already been rescued.");

	return(0);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TDW_RS_DoAct5_Pindleskin()
{
	var this_act   = 4;
	var this_quest = 4;
	var this_wait  = TDW_RS_DefaultWaits[this_act][this_quest];

	var TDW_BOT_PATH_AnyaPortalToPindleList = [
		[10060, 13285],
		[10060, 13264],
		[10057, 13239],
		[10057, 13230]
	];

	if (TDW_BOT_MOVE_GotoActTown(5))
		return(-1);

	TDW_BOT_AttackNPCSpec.copyFromMaster("Pindleskin");
	TDW_BOT_AttackNPCSpec.setMustKillOn("Pindleskin");
	TDW_BOT_AttackNPCSpec.setDoAttackOn();

	TDW_MOVE_COMPAT_TownMove("portal");

	TDW_BOT_CHECK_PrecastChecks();
	if (TDW_MOVE_LookForAndTakePortal(D2JSP_AREA_NIHLATHAKS_TEMPLE, "*", 5, 50,
		true)) {
		TDW_RS_SayError("Unable to get to " +
			D2JSP_AREA_AreaToName(D2JSP_AREA_NIHLATHAKS_TEMPLE) + ".");
		return(-1);
	}

	TDW_BOT_CHECK_PrecastChecks(30000);

	TDW_BOT_MOVE_TeleportToDestinationList(TDW_BOT_PATH_AnyaPortalToPindleList,
		TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_NONE);

	for (var count_1 = 0; count_1 < 10; count_1++) {
		TDW_BOT_MOVE_DoArrival(TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_ALL);
		TDW_BOT_MOVE_DoDeparture(TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_ALL);
		delay(100);
	}

	return(0)
}
// ////////////////////////////////////////////////////////////////////////////

// NOTE: Not accessible from the command line to prevent accidents.
// ////////////////////////////////////////////////////////////////////////////
function TDW_RS_DoAct5_Nihlathak()
{
	var return_code = 0;
	var this_act   = 4;
	var this_quest = 3;
	var this_wait  = TDW_RS_DefaultWaits[this_act][this_quest];
	var access_strategy = TDW_BOT_MOVE_GetDefaultLinkAccessStrategy();

	if (TDW_BOT_MOVE_GotoActTown(5))
		return(-1);

	TDW_BOT_AttackNPCSpec.copyFromMaster("Nihlathak");
	TDW_BOT_AttackNPCSpec.setMustKillOn("Nihlathak");
	TDW_BOT_AttackNPCSpec.setDoAttackOn();

	if (TDW_PATH_HasWaypointAccess(D2JSP_AREA_HALLS_OF_DEATHS_CALLING,
		access_strategy)) {
		;	// Warnings go here.
	}

	TDW_BOT_CHECK_PrecastChecks();
	if (!(return_code = TDW_PATH_GotoTargetArea(D2JSP_AREA_HALLS_OF_VAUGHT,
		access_strategy, TDW_PATHL_AREA_LOAD_FLAG_DEFAULT))) {
		var coord_list = TDW_PATH_GetPresetCoordsList(864,
			D2JSP_UTIL_GETUNIT_OBJECT, 462, true);
		if (coord_list.length) {
			TDW_BOT_MOVE_GotoXYPair(coord_list[0]);
			TDW_BOT_AttackNPCSpec.killAny();
			if (TDW_BOT_AttackNPCSpec.findNPC("Nihlathak")) {
				access_strategy.callback_func(access_strategy,
					TDW_PATH_ASCB_MSG_ERROR, "Unable to locate Nihlathak in room " +
					"number 864 within area " + D2JSP_AREA_HALLS_OF_VAUGHT +
					" (" + D2JSP_AREA_AreaToName(D2JSP_AREA_HALLS_OF_VAUGHT) + ").");
				return_code = -1;
			}
		}
		else {
			access_strategy.callback_func(access_strategy,
				TDW_PATH_ASCB_MSG_ERROR, "Unable to locate Nihlathak's room " +
				"(room number 864) within area " + D2JSP_AREA_HALLS_OF_VAUGHT +
				" (" + D2JSP_AREA_AreaToName(D2JSP_AREA_HALLS_OF_VAUGHT) + ").");
			return_code = -1;
		}
	}

	return(return_code);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TDW_RS_DoAct5_Ancients()
{
	var return_code = 0;
	var this_act   = 4;
	var this_quest = 3;
	var this_wait  = TDW_RS_DefaultWaits[this_act][this_quest];
	var access_strategy = TDW_BOT_MOVE_GetDefaultLinkAccessStrategy();
	var safe_spot       = [10059, 12676];

	if (TDW_BOT_MOVE_GotoActTown(5))
		return(-1);

	TDW_BOT_AttackNPCSpec.copyFromMaster("Talic");
	TDW_BOT_AttackNPCSpec.copyFromMaster("Korlic");
	TDW_BOT_AttackNPCSpec.copyFromMaster("Madawc");

	TDW_BOT_AttackNPCSpec.setMustKillOn("Talic");
	TDW_BOT_AttackNPCSpec.setMustKillOn("Korlic");
	TDW_BOT_AttackNPCSpec.setMustKillOn("Madawc");

	TDW_BOT_AttackNPCSpec.setDoAttackOn();

	if (me.act != 5) {
		TDW_MOVE_COMPAT_TownMove(5, "waypoint");
		if (me.act != 5) {
			TDW_RS_SayError("Unable to get to Act 5");
			return(-1);
		}
	}

	TDW_BOT_CHECK_PrecastChecks();
	if (!(return_code = TDW_PATH_GotoTargetArea(D2JSP_AREA_ROCKY_SUMMIT,
		access_strategy, TDW_PATHL_AREA_LOAD_FLAG_DEFAULT))) {
		var coord_list = TDW_PATH_GetPresetCoordsList(null,
			D2JSP_UTIL_GETUNIT_OBJECT, 546, true);
		if (coord_list.length) {
			TDW_BOT_MOVE_GotoXYPair(safe_spot);
			if (TDW_MOVE_OpenTownPortal()) {
				TDW_RS_SayError("Unable to use Tome of Town Portal.");
				return(-1);
			}
			if (TDW_RS_FinalDelay("Ancients", this_wait,
				"Stay away from the Ancients until they're dead.", "A5Q5_1") < 0) {
				TDW_RS_SayOrders("Quest aborted. Return to town.", "ReturnToTown");
				return(0);
			}
			TDW_RS_SayOrders("If you die, stay dead to still get the quest.");
			TDW_BOT_CHECK_PrecastChecks(30000);		// Ensure pre-casts will last...
			TDW_BOT_MOVE_GotoXYPair(coord_list[0]);
			var altar_obj = getUnit(D2JSP_UTIL_GETUNIT_OBJECT, 546);
			if (altar_obj) {
				D2JSP_UTIL_InteractObject(altar_obj);
				while (true) {
					TDW_BOT_AttackNPCSpec.killAny();
					if ((!TDW_BOT_AttackNPCSpec.findNPC("Talic")) &&
						(!TDW_BOT_AttackNPCSpec.findNPC("Korlic")) &&
						(!TDW_BOT_AttackNPCSpec.findNPC("Madawc")))
						break;
					delay(250);
				}
				if (TDW_BOT_AttackNPCSpec.findNPC("Talic") ||
					TDW_BOT_AttackNPCSpec.findNPC("Korlic") ||
					TDW_BOT_AttackNPCSpec.findNPC("Madawc")) {
					access_strategy.callback_func(access_strategy,
						TDW_PATH_ASCB_MSG_ERROR, "Unable to locate and kill all of " +
						"the Ancients!!!");
					return_code = -1;
				}
			}
			else {
				access_strategy.callback_func(access_strategy,
					TDW_PATH_ASCB_MSG_ERROR, "Unable to locate the Altar of the " +
					"Heavens needed to awaken the Ancients!!!");
				return_code = -1;
			}
		}
		else {
			access_strategy.callback_func(access_strategy,
				TDW_PATH_ASCB_MSG_ERROR, "Unable to locate the Altar of the " +
				"Heavens needed to awaken the Ancients!!!");
			return_code = -1;
		}
	}

	if (!return_code)
		TDW_RS_SayOrders("The Ancients quest is completed.", "A5Q5_2");

	return(return_code);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function TDW_RS_DoAct5_Baal()
{
	var this_act   = 4;
	var this_quest = 5;
	var this_wait  = TDW_RS_DefaultWaits[this_act][this_quest];
	var count_1;

var TDW_RS_ThroneTileSpot   = [15089, 5006];
var TDW_RS_BaalPortalSpot   = [15207, 5886];
var TDW_RS_MoveToThroneList = [
//	[15102, 5240],
//	[15072, 5241],
//	[15103, 5244],
//	[15124, 5240],
//	[15111, 5206],
//	[15083, 5207],
//	[15080, 5166],
//	[15063, 5167],
//	[15111, 5167],
//	[15128, 5168],
//	[15112, 5128],
//	[15133, 5129],
//	[15082, 5127],
//	[15064, 5126],
//	[15097, 5125],
//	[15096, 5112],
//	[15096, 5099],
//	[15114, 5103],
//	[15084, 5108],
//	[15095, 5091],
	[15094, 5067],
	[15094, 5044],
	[15094, 5029],
	[15075, 5010],
	[15076, 5039],
	[15116, 5042],
	[15109, 5005],
	[15094, 5031]
];
var TDW_RS_MoveAtThroneList = [
	[15095, 5028],
	[15077, 5010],
	[15113, 5011],
	[15091, 5031],
	[15093, 5052],
	[15091, 5026]
];
var TDW_RS_FindBaalList = [
	[15172, 5888],
	[15168, 5938],
	[15135, 5943],
	[15137, 5899],
	[15092, 5900],
	[15134, 5948],
	[15173, 5929],
	[15171, 5885]
];

	if (TDW_BOT_MOVE_GotoActTown(5))
		return(-1);

	var access_strategy = TDW_BOT_MOVE_GetDefaultLinkAccessStrategy();

	TDW_BOT_AttackNPCSpec.copyFromMaster("Colenzo the Annihilator");
	TDW_BOT_AttackNPCSpec.copyFromMaster("Achmel the Cursed");
	TDW_BOT_AttackNPCSpec.copyFromMaster("Bartuc the Bloody");
	TDW_BOT_AttackNPCSpec.copyFromMaster("Ventar the Unholy");
	TDW_BOT_AttackNPCSpec.copyFromMaster("Lister the Tormentor");
	TDW_BOT_AttackNPCSpec.copyFromMaster("Baal");

	TDW_BOT_AttackNPCSpec.setMustKillOn("Colenzo the Annihilator");
	TDW_BOT_AttackNPCSpec.setMustKillOn("Achmel the Cursed");
	TDW_BOT_AttackNPCSpec.setMustKillOn("Bartuc the Bloody");
	TDW_BOT_AttackNPCSpec.setMustKillOn("Ventar the Unholy");
	TDW_BOT_AttackNPCSpec.setMustKillOn("Lister the Tormentor");
	TDW_BOT_AttackNPCSpec.setMustKillOn("Baal");

	TDW_BOT_AttackNPCSpec.setDoAttackOn();

/*
	if (TDW_BOT_MOVE_WaypointOutbound(D2JSP_AREA_THE_WORLDSTONE_KEEP_LEVEL_2))
		return(-1);

	if (TDW_PATH_DoSourceList([D2JSP_AREA_THE_WORLDSTONE_KEEP_LEVEL_3,
		D2JSP_AREA_THRONE_OF_DESTRUCTION], me.area, access_strategy))
		return(-1);
*/

	// //////////////////////////////////////////////////////////////////////
	// Have to pre-build these explicitly because we don't actually path there.
	TDW_PATH_CreateArea(D2JSP_AREA_THE_WORLDSTONE_CHAMBER);
	TDW_PATH_BuildMap(D2JSP_AREA_THE_WORLDSTONE_CHAMBER);
	// //////////////////////////////////////////////////////////////////////

	TDW_BOT_CHECK_PrecastChecks();
	if (TDW_PATH_GotoTargetArea(D2JSP_AREA_THRONE_OF_DESTRUCTION,
		access_strategy, TDW_PATHL_AREA_LOAD_FLAG_DEFAULT))
		return(-1);
	TDW_BOT_CHECK_PrecastChecks();

	TDW_BOT_MOVE_TeleportToDestinationList(TDW_RS_MoveToThroneList,
		TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_TARGET);

	TDW_BOT_STATE_FixBadStatesUs();

	TDW_RS_SayStatus("Waiting for a Baal minion attack wave.");

	while (getUnit(D2JSP_UTIL_GETUNIT_NPC, "Baal")) {
		for (count_1 = 0; count_1 < TDW_RS_MoveAtThroneList.length; count_1++) {
			TDW_BOT_STATE_FixBadStatesUs(TDW_BOT_STATE_BadStatesSerious);
			TDW_BOT_MOVE_TeleportToDestination(TDW_RS_MoveAtThroneList[count_1],
				TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_ALL);
			if (TDW_ISF_Cfg != null) {
				TDW_BOT_SUPP_MySnagIt([me.x, me.y]);
				TDW_BOT_SUPP_MySnagIt([me.x, me.y]);
				TDW_BOT_SUPP_MySnagIt([me.x, me.y]);
			}
			delay(100);
		}
		TDW_BOT_STATE_FixBadStatesUs(TDW_BOT_STATE_BadStatesSerious);
		D2JSP_UTIL_BNET_OverheadSafe("Waiting for a Baal minion attack wave");
		delay(100);
	}

	// The object classid for the "The Worldstone Chamber" is 563
	D2JSP_SKILL_TeleportToPair(TDW_RS_ThroneTileSpot);
	var chamber_obj = getUnit(D2JSP_UTIL_GETUNIT_OBJECT,
		"The Worldstone Chamber");
	if (!chamber_obj) {
		TDW_BOT_Log.logError("Unable to locate doorway to " +
			D2JSP_AREA_AreaToName(D2JSP_AREA_THE_WORLDSTONE_CHAMBER) + ".");
		return(-4);
	}

	for (count_1 = 0; count_1 < 10; count_1++) {
		D2JSP_UTIL_InteractObject(chamber_obj);
		delay(60);
		if (me.area == D2JSP_AREA_THE_WORLDSTONE_CHAMBER)
			break;
		delay(250);
	}

	if (me.area != D2JSP_AREA_THE_WORLDSTONE_CHAMBER) {
		TDW_RS_SayError("Unable to get to " +
			D2JSP_AREA_AreaToName(D2JSP_AREA_THE_WORLDSTONE_CHAMBER));
		return(-1);
	}

	TDW_RS_SayStatus("In " + D2JSP_AREA_AreaToName() + ".");

	D2JSP_SKILL_TeleportToPair(TDW_RS_BaalPortalSpot);
	TDW_BOT_CHECK_PrecastChecks(60000);		// Ensure pre-casts will last...
	if (TDW_RS_FinalDelay("Baal", this_wait,
		"Stay at my portal until I tell you to move.", "A5Q6_1") < 0) {
		TDW_RS_SayOrders("Quest aborted. Return to town.", "ReturnToTown");
		return(0);
	}

	TDW_BOT_CHECK_PrecastChecks(30000);		// Ensure pre-casts will last...
	TDW_RS_SayOrders("Stay at my portal until I tell you to move.");

	var kill_npc = TDW_BOT_AttackNPCSpec.findNPC("Baal");

 	for (count_1 = 0; count_1 < TDW_RS_FindBaalList.length; count_1++) {
		TDW_BOT_MOVE_TeleportToDestination(TDW_RS_FindBaalList[count_1],
			TDW_BOT_SUPP_TP2DEST_FLAG_ATTACK_TARGET);
		var npc_obj = getUnit(D2JSP_UTIL_GETUNIT_NPC, kill_npc.name);
		if (npc_obj) {
			if ((npc_obj.mode != D2JSP_MODE_NPC_DEATH) &&
				(npc_obj.mode != D2JSP_MODE_NPC_DEAD) && npc_obj.hp)
				TDW_BOT_ATTACK_KillSpecifiedNPC(kill_npc);
//			TDW_RS_SayStatus(kill_npc.name + " is now dead!!!");
			break;
		}
	}

	TDW_RS_SayOrders("You completed this difficulty!!!", "A5Q6_2");

  return(0);
}
// ////////////////////////////////////////////////////////////////////////////


