include("TDW/_D2JSP_Utility.d2l");

includeonce("TDW/_D2JSP_Areas.d2l");
includeonce("TDW/_D2JSP_Items.d2l");
includeonce("TDW/_D2JSP_ItemFlags.d2l");
includeonce("TDW/_D2JSP_ItemTypes.d2l");
includeonce("TDW/_D2JSP_Modes.d2l");
includeonce("TDW/_D2JSP_States.d2l");
includeonce("TDW/_D2JSP_Stats.d2l");

const MLB_DATA_DUMP_FLAG_SPARSE = 		1;

function MLB_DD_WriteToFile(file_name, append_flag, flags)
{
	var file_handle;

	if ((!arguments.length) || (file_name == null) || (file_name == ""))
		file_name = "output\\MLB_DataDump." + me.realm + "." + me.account + "." +
			me.name + ".txt";

	if (file_handle = fileOpen(file_name, ((append_flag) ? 2 : 1))) {
		file_handle.close();
		MLB_DD_FileName = file_name;
		print("Beginning comprehensive game data dump...");
		MLB_DD_WriteHeader(file_handle);
		MLB_DD_WriteToHandle(file_handle, flags);
		print("Comprehensive game data dump complete!");
		return(0);
	}
	else {
		print("Unable to open file '" + file_name + "' for " +
			((append_flag) ? "appending." : "writing."));
		return(-1);
	}
}

function MLB_DD_WriteToHandle(file_handle, flags)
{
	var dump_list = [
		["Player",  getPlayer,  MLB_DD_DumpTypePlayer],
		["NPC",     getNPC,     MLB_DD_DumpTypeNPC],
		["Object",  getObject,  MLB_DD_DumpTypeObject],
		["Item",    getItem,    MLB_DD_DumpTypeItem],
//		["Room",    getRoom,    MLB_DD_DumpTypeRoom],
//		["Tile",    getTile,    MLB_DD_DumpTypeTile],
//		["Missile", getMissile, MLB_DD_DumpTypeMissile]
	];
	var count_1;

	for (count_1 = 0; count_1 < dump_list.length; count_1++) {
		MLB_DD_WriteSep2(file_handle);
		MLB_DD_WriteLine(dump_list[count_1][0] + " Dump Start");
		MLB_DD_WriteSep3(file_handle);
		MLB_DD_DoType(dump_list[count_1][1], dump_list[count_1][2], file_handle,
			flags);
		MLB_DD_WriteSep3(file_handle);
		MLB_DD_WriteLine(dump_list[count_1][0] + " Dump Complete");
		MLB_DD_WriteSep2(file_handle);
		MLB_DD_WriteLine("");
	}
}

function MLB_DD_DoType(first_func, dump_func, file_handle, flags)
{
	var this_obj = first_func();

	if (this_obj) {
		do
			dump_func(file_handle, this_obj, flags);
		while (this_obj && this_obj.getNext());
	}
}

function MLB_DD_DumpTypePlayer(file_handle, in_obj, flags)
{
	var this_parent = in_obj.getParent();

	MLB_DD_WriteLine("Player Name    : " + in_obj.name);
	MLB_DD_WriteLine("Player Parent  : " +
		((this_parent && this_parent.name) ? this_parent.name : "*NONE*"));
	MLB_DD_WriteLine("Player Act     : " + in_obj.act);
	MLB_DD_WriteLine("Player Area    : " + in_obj.area + " (" +
		D2JSP_AREA_AreaToName(in_obj.area) + ")");
	MLB_DD_WriteLine("Player Type    : " + in_obj.type);
	MLB_DD_WriteLine("Player Mode    : " + in_obj.mode + " (" +
		D2JSP_MODE_ModeToName(D2JSP_MODE_TYPE_PLAYER, in_obj.mode) + ")");
	MLB_DD_WriteLine("Player Location: [" + in_obj.x + ", " +
		in_obj.y + "]");
	MLB_DD_WriteLine("Player Busy ?  : " +
		((in_obj.busy) ? "TRUE" : "FALSE"));
	MLB_DD_WriteLine("Player ClassId : " + in_obj.classid);
	MLB_DD_WriteLine("Player HP      : " + in_obj.hp);
	MLB_DD_WriteLine("Player HP Max  : " + in_obj.hpmax);
	MLB_DD_WriteLine("Player MP      : " + in_obj.mp);
	MLB_DD_WriteLine("Player MP Max  : " + in_obj.mpmax);

	MLB_DD_DumpStats(file_handle,  "Player", in_obj, flags);

	MLB_DD_DumpStates(file_handle, "Player", in_obj, flags);

	MLB_DD_WriteSep3(file_handle);
}

function MLB_DD_DumpTypeNPC(file_handle, in_obj, flags)
{
	var this_parent = in_obj.getParent();

	MLB_DD_WriteLine("NPC Name    : " + in_obj.name);
	MLB_DD_WriteLine("NPC Parent  : " +
		((this_parent && this_parent.name) ? this_parent.name : "*NONE*"));
	MLB_DD_WriteLine("NPC Act     : " + in_obj.act);
	MLB_DD_WriteLine("NPC Area    : " + in_obj.area + " (" +
		D2JSP_AREA_AreaToName(in_obj.area) + ")");
	MLB_DD_WriteLine("NPC Type    : " + in_obj.type);
	MLB_DD_WriteLine("NPC Mode    : " + in_obj.mode + " (" +
		D2JSP_MODE_ModeToName(D2JSP_MODE_TYPE_NPC, in_obj.mode) + ")");
	MLB_DD_WriteLine("NPC Location: [" + in_obj.x + ", " +
		in_obj.y + "]");
	MLB_DD_WriteLine("NPC Busy ?  : " +
		((in_obj.busy) ? "TRUE" : "FALSE"));
	MLB_DD_WriteLine("NPC ClassId : " + in_obj.classid);
	MLB_DD_WriteLine("NPC HP      : " + in_obj.hp);
	MLB_DD_WriteLine("NPC HP Max  : " + in_obj.hpmax);
	MLB_DD_WriteLine("NPC MP      : " + in_obj.mp);
	MLB_DD_WriteLine("NPC MP Max  : " + in_obj.mpmax);

	MLB_DD_DumpStats(file_handle,  "NPC", in_obj, flags);

	MLB_DD_DumpStates(file_handle, "NPC", in_obj, flags);

	MLB_DD_WriteSep3(file_handle);
}

function MLB_DD_DumpTypeObject(file_handle, in_obj, flags)
{
	var this_parent = in_obj.getParent();

	MLB_DD_WriteLine("Object Name    : " + in_obj.name);
	MLB_DD_WriteLine("Object Parent  : " +
		((this_parent && this_parent.name) ? this_parent.name : "*NONE*"));
	MLB_DD_WriteLine("Object Act     : " + in_obj.act);
	MLB_DD_WriteLine("Object Area    : " + in_obj.area + " (" +
		D2JSP_AREA_AreaToName(in_obj.area) + ")");
	MLB_DD_WriteLine("Object Sub-Area  : " +
		D2JSP_UTIL_GetObjectTargetArea(in_obj) + " (" +
		D2JSP_AREA_AreaToName(D2JSP_UTIL_GetObjectTargetArea(in_obj)) + ")");
	MLB_DD_WriteLine("Object Type    : " + in_obj.type);
	MLB_DD_WriteLine("Object Mode    : " + in_obj.mode + " (" +
		D2JSP_MODE_ModeToName(D2JSP_MODE_TYPE_OBJECT, in_obj.mode) + ")");
	MLB_DD_WriteLine("Object Location: [" + in_obj.x + ", " +
		in_obj.y + "]");

	MLB_DD_WriteSep3(file_handle);
}

function MLB_DD_DumpTypeItem(file_handle, in_obj, flags)
{
	var this_parent = in_obj.getParent();

	MLB_DD_WriteLine("Item Name    : " + in_obj.name);
	MLB_DD_WriteLine("Item Parent  : " +
		((this_parent && this_parent.name) ? this_parent.name : "*NONE*"));
	MLB_DD_WriteLine("Item Act     : " + in_obj.act);
/*
	CODE NOTE: To be removed.
	MLB_DD_WriteLine("Item Area    : " + in_obj.area + " (" +
		D2JSP_AREA_AreaToName(in_obj.area) + ")");
*/
	MLB_DD_WriteLine("Item Type    : " + in_obj.type);
	MLB_DD_WriteLine("Item Mode    : " + in_obj.mode + " (" +
		D2JSP_MODE_ModeToName(D2JSP_MODE_TYPE_ITEM, in_obj.mode) + ")");
	MLB_DD_WriteLine("Item Location: [" + in_obj.x + ", " +
		in_obj.y + "]");
	MLB_DD_WriteLine("Item Busy ?  : " +
		((in_obj.busy) ? "TRUE" : "FALSE"));
	MLB_DD_WriteLine("Item Code    : " + in_obj.code);
	MLB_DD_WriteLine("Item Flags   : 0x" +
		D2JSP_UTIL_FORMAT_ZeroFill(
		D2JSP_ITEMFLAG_GetFlagsForItem(in_obj).toString(16), 8) +
		" (" + D2JSP_ITEMFLAG_GetStringForItem(in_obj) + ")");
	MLB_DD_WriteLine("Item FLPFile : " + in_obj.flpfile);
	MLB_DD_WriteLine("Item FName   : " + D2JSP_ITEM_GetItemFName(in_obj));
	MLB_DD_WriteLine("Item ILvl    : " + in_obj.ilvl);
	MLB_DD_WriteLine("Item InvFile : " + in_obj.invfile);
	MLB_DD_WriteLine("Item ItemLoc : " + in_obj.itemloc);
	MLB_DD_WriteLine("Item Class   : " + in_obj.itemclass);
	MLB_DD_WriteLine("Item ItemType  : " + D2JSP_ITEM_GetItemType(in_obj) +
		" (" + D2JSP_ITEMTYPE_TypeToName(D2JSP_ITEM_GetItemType(in_obj)) + ")");
	MLB_DD_WriteLine("Item Prefix  : " + D2JSP_ITEM_GetItemPrefix(in_obj));
	MLB_DD_WriteLine("Item Suffix  : " + D2JSP_ITEM_GetItemSuffix(in_obj));
	MLB_DD_WriteLine("Item Quality : " + in_obj.quality);
	MLB_DD_WriteLine("Item SInvFile: " + in_obj.sinvfile);
	MLB_DD_WriteLine("Item UInvFile: " + in_obj.uinvfile);
	MLB_DD_WriteLine("Item X-Size  : " + D2JSP_ITEM_GetItemXSize(in_obj));
	MLB_DD_WriteLine("Item Y-Size  : " + D2JSP_ITEM_GetItemYSize(in_obj));

	MLB_DD_DumpStats(file_handle,  "Item", in_obj, flags);

	MLB_DD_DumpStates(file_handle, "Item", in_obj, flags);

	MLB_DD_WriteSep3(file_handle);
}

function MLB_DD_DumpTypeRoom(file_handle, in_obj, flags)
{
	MLB_DD_WriteLine("Room Name    : " + in_obj.name);
	MLB_DD_WriteLine("Room Number  : " + in_obj.number);
	MLB_DD_WriteLine("Room Location: [" + in_obj.x + ", " +
		in_obj.y + "] (multiplied by 5 = [" +
		(in_obj.x * 5) + ", " + (in_obj.y * 5) + "])");

	MLB_DD_WriteSep3(file_handle);
}

function MLB_DD_DumpTypeTile(file_handle, in_obj, flags)
{
	var this_parent = in_obj.getParent();

	MLB_DD_WriteLine("Tile Name    : " + in_obj.name);
	MLB_DD_WriteLine("Tile Parent  : " +
		((this_parent && this_parent.name) ? this_parent.name : "*NONE*"));
	MLB_DD_WriteLine("Tile Sub-Area: " +
		D2JSP_UTIL_GetObjectTargetArea(in_obj) + " (" +
		D2JSP_AREA_AreaToName(D2JSP_UTIL_GetObjectTargetArea(in_obj)) + ")");
	MLB_DD_WriteLine("Tile Type    : " + in_obj.type);
	MLB_DD_WriteLine("Tile Number  : " + in_obj.number);
	MLB_DD_WriteLine("Tile Location: [" + in_obj.x + ", " +
		in_obj.y + "]");

	MLB_DD_WriteSep3(file_handle);
}

function MLB_DD_DumpTypeMissile(file_handle, in_obj, flags)
{
	var this_parent = in_obj.getParent();

	MLB_DD_WriteLine("Missile Name    : " + in_obj.name);
	MLB_DD_WriteLine("Missile Parent  : " +
		((this_parent && this_parent.name) ? this_parent.name : "*NONE*"));
	MLB_DD_WriteLine("Missile Type    : " + in_obj.type);
	MLB_DD_WriteLine("Missile Number  : " + in_obj.number);
	MLB_DD_WriteLine("Missile Location: [" + in_obj.x + ", " +
		in_obj.y + "]");

	MLB_DD_WriteSep3(file_handle);
}

function MLB_DD_DumpStats(file_handle, in_name, in_obj, flags)
{
	var do_it_flag = true;
	var count_1    = 0;
	var this_value;

	if (flags & MLB_DATA_DUMP_FLAG_SPARSE) {
		do_it_flag = false;
		for (count_1 = 0; count_1 < D2JSP_STAT_COUNT; count_1++) {
			if (in_obj.getStat(count_1)) {
				MLB_DD_WriteLine(in_name + " " + in_obj.name + " Stats:");
				do_it_flag = true;
				break;
			}
		}
	}

	if (do_it_flag) {
		for ( ; count_1 < D2JSP_STAT_COUNT; count_1++) {
			if ((this_value = in_obj.getStat(count_1)) ||
				(!(flags & MLB_DATA_DUMP_FLAG_SPARSE)))
				MLB_DD_WriteLine("\tSTAT :\t" + count_1 + "\t:\t" +
					D2JSP_UTIL_FORMAT_LJust(D2JSP_STAT_StatToName(count_1), 30) +
					"\t=\t" + this_value);
		}
	}
}

function MLB_DD_DumpStates(file_handle, in_name, in_obj, flags)
{
	var do_it_flag = true;
	var count_1    = 0;
	var this_value;

	if (flags & MLB_DATA_DUMP_FLAG_SPARSE) {
		do_it_flag = false;
		for (count_1 = 0; count_1 < D2JSP_STATE_COUNT; count_1++) {
			if (in_obj.getState(count_1)) {
				MLB_DD_WriteLine(in_name + " " + in_obj.name + " States:");
				do_it_flag = true;
				break;
			}
		}
	}

	if (do_it_flag) {
		for ( ; count_1 < D2JSP_STATE_COUNT; count_1++) {
			if ((this_value = in_obj.getState(count_1)) ||
				(!(flags & MLB_DATA_DUMP_FLAG_SPARSE)))
				MLB_DD_WriteLine("\tSTATE:\t" + count_1 + "\t:\t" +
					D2JSP_UTIL_FORMAT_LJust(D2JSP_STATE_StateToName(count_1), 30) +
					"\t=\t" + this_value);
		}
	}
}

function MLB_DD_WriteHeader(file_handle)
{
	var this_date = new Date();

	MLB_DD_WriteSep(file_handle);
	MLB_DD_WriteSep(file_handle);
	MLB_DD_WriteComment(file_handle, "D2JSP Data Dumper");
	MLB_DD_WriteSep(file_handle);
	MLB_DD_WriteComment(file_handle, "Realm    : " + me.realm);
	MLB_DD_WriteComment(file_handle, "Account  : " + me.account);
	MLB_DD_WriteComment(file_handle, "Character: " + me.name);
	MLB_DD_WriteComment(file_handle, "Act      : " + me.act);
	MLB_DD_WriteComment(file_handle, "Area     : " + me.area + " (" +
		D2JSP_AREA_AreaToName(me.area) + ")");
	MLB_DD_WriteComment(file_handle, "Location : [" + me.x + ", " + me.y + "]");
	MLB_DD_WriteComment(file_handle, "Date/Time: " + this_date.toString());
	MLB_DD_WriteSep(file_handle);
	MLB_DD_WriteLine("");
}

function MLB_DD_WriteSep(file_handle)
{
	var tmp_array = new Array(73);
	MLB_DD_WriteLine("// " + tmp_array.join("/"));
}

function MLB_DD_WriteSep2(file_handle)
{
	var tmp_array = new Array(76);
	MLB_DD_WriteLine(tmp_array.join("="));
}

function MLB_DD_WriteSep3(file_handle)
{
	var tmp_array = new Array(76);
	MLB_DD_WriteLine(tmp_array.join("-"));
}

function MLB_DD_WriteComment(file_handle, comment_string)
{
	MLB_DD_WriteLine("//" + ((comment_string != "") ? " " : "") +
		comment_string);
}

function MLB_DD_WriteLine(out_string)
{
	if (file_handle = fileOpen(MLB_DD_FileName, 2)) {
		file_handle.writeLine(out_string);
		file_handle.close();
	}
	else {
		print("Unable to re-open file '" + file_name + "' for appending.");
		quit();
	}
}

function main()
{
	print("Waiting 1 seconds for game load to complete...");
	delay(1000);
	print("Ready.");

	MLB_DD_WriteToFile(null, false, true);

	print("Done!");

	print("Waiting 10 seconds before exit...");

	for (var count_1 = 0; count_1 < 100; count_1++)
		delay(100);

	quit();
}


