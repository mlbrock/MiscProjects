/*
	___CoreTest.006.d2j

	Symptoms    :
		<item-obj>.shop(<npc-obj>, 2) is broken.

		Test Two:
			Catastrophic failure:
				Warning
				Location : D2Common\Stats\Stats.cpp, line #450
				Expression : ptStats
				

			Catastrophic failure occurs intermittently when attempting to move
			items from one container to another.

	How to run:
		Test One:
			1) Start a new game and move close to Larzuk (or your chosen other
				trading NPC).
			2) Observe the print statements after the program enters trading.
				You may have to move the character away from the NPC, take a
				waypoint to another area in the same act, and return to town to
				trade with the NPC once or twice.

		Test Two:
			As above, but before starting the new game, change the value of the
			global variable 'TEST_UseBusyFlag' to 'true'.

	Tested under :
		D2X Product and D2 Loader for
			24 Core --- Win 2000 / SP 3 / 1 2.0 Ghz Pentium 4 CPU / 512KB RAM
			26 Core --- Win 2000 / SP 2 / 2 1.7 Ghz Xeon CPU / 2GB RAM

		I tested with Larzuk, Anya and Charsi. Seemed to take four or five trips
		through the red portal with Anya. This is perhaps because she sells less
		stuff than the others.
*/

var LogName   = "output/____CoreTest.006.log";
var LogHandle = null;

const D2JSP_UTIL_COLOR_WHITE = "ÿc0";
const D2JSP_UTIL_COLOR_RED   = "ÿc1";

	// Set this to 'true' to run Test Two.
var TEST_UseBusyFlag = false;

function main()
{
	var npc_name  = "Larzuk";
	var test_iter = 0;
	var junk_list = ["aqv", "cqv"];
	var npc_obj;
	var other_npc_obj;
	var all_items_1;
	var all_items_2;
	var my_items_1;
	var my_items_2;
	var npc_items;
	var count_1;
	var count_2;
	var quiver_obj;
	var shop_return_code;

	print("Waiting 3 seconds for game load completion...");
	delay(3000);

	me.randommove = true;

	if ((LogHandle = fileOpen(LogName, 1)) == null) {
		print("Unable to open file '" + LogName + "' for writing.");
		stop();
	}

	all_items_1 = CountItemsAll();
	my_items_1  = CountItemsOwned(me.name);
	print("My items = " + my_items_1);
	print("All items = " + all_items_1);

	while (true) {
		while (!(npc_obj = getUnit(1, npc_name))) {
			me.overhead("Must run this test near " + npc_name + ".");
			delay(500);
		}
		npc_act  = me.act;
		npc_area = me.area;
		while (true) {
			while (me.act != npc_act) {
				me.overhead("Please move back to act " + npc_act + " near " +
					npc_name + ".");
				delay(500);
			}
			while (me.area != npc_area) {
				me.overhead("Please move back to area number " + npc_area +
					" near " + npc_name + ".");
				delay(500);
			}
			while (Dist(me.x, me.y, npc_obj.x, npc_obj.y) > 5) {
				me.overhead("Please move closer to " + npc_name + ".");
				delay(500);
			}
	all_items_1 = CountItemsAll();
	my_items_1  = CountItemsOwned(me.name);
	print("My items = " + my_items_1);
	print("All items = " + all_items_1);
			me.overhead("Close enough");
			print("Please remove test junk items (" + junk_list + ").");
			while (true) {
				for (count_1 = 0; count_1 < junk_list.length; count_1++) {
					if ((quiver_obj = FindAnItem(me.name, junk_list[count_1])))
						break;
				}
				if (!quiver_obj)
					break;
				me.overhead("Please remove test junk items (" + junk_list + ").");
				delay(500);
			}
			print("Attempting to interact with " + npc_name + "...");
			npc_obj.interact();
			delay(2000);
			print("Attempting to trade with " + npc_name + "...");
//			npc_obj.trade();
			npc_obj.useMenu(0x0D06);
//			delay(2000);
			for (var count_1 = 0; count_1 < 40; count_1++) {
				if (getUIFlag(0x0c)) {
					print("Detected in trade with NPC " + npc_obj.name + ".");
					break;
				}
			}
			if (CountItemsOwned(npc_name)) {
				print("In trade with " + npc_name + ".");
				print("Now trying to buy quivers.");
				for (count_1 = 0; count_1 < junk_list.length; count_1++) {
					if (!(quiver_obj =
						FindAnItem(npc_name, junk_list[count_1]))) {
						print("ERROR: Unable to locate a quiver of " +
							junk_list[count_1] + " -- exiting.");
						me.overhead(" ");
						stop();
					}
					print("Trying to buy a quiver of " + quiver_obj.name + ".");
					for (count_2 = 0; count_2 < 100; count_2++) {
						if ((shop_return_code = quiver_obj.shop(npc_obj, 2)) == 1)
							break;
						delay(50);
					}
					print("Call to shop() = " + shop_return_code);
					if (!shop_return_code) {
						print("Failed to buy a " + junk_list[count_1] + ".");
						print("Exiting...");
						break;
					}
					print("Bought a quiver of " + junk_list[count_1] + " --- " +
						"looking for it in inventory...");
					for (count_2 = 0; count_2 < 100; count_2++) {
						if ((quiver_obj = FindAnItem(me.name, junk_list[count_1])))
							break;
					}
					if (quiver_obj)
						print("Found " + quiver_obj.name + " at coordinates [" +
							quiver_obj.x + ", " + quiver_obj.y + "]");
					else {
						print("Couldn't find " + junk_list[count_1] +
							" in inventory.");
						break;
					}
delay(10);
//print("Sleeping 5 seconds...");
//delay(5000);
				}
				print("Script stopping. Check inventory for quivers.");
				stop();
/*
				print("In trade with " + npc_name + ", now printing all NPC '" +
					((!TEST_UseBusyFlag) ? "name" : "busy") + "' members ...");
				while (npc_items = CountItemsOwned(npc_name)) {
					other_npc_obj = getUnit(1);
					if (other_npc_obj) {
						do {
							if (!TEST_UseBusyFlag)
								print("NPC Name = " + other_npc_obj.name);
							else
								print("NPC Busy Flag = " + other_npc_obj.busy);
						} while(other_npc_obj && other_npc_obj.getNext());
					}
					my_items_2  = CountItemsOwned(me.name);
					all_items_2 = CountItemsAll();
					print((++test_iter) + ": [" +
						((my_items_1 != my_items_2) ? D2JSP_UTIL_COLOR_RED : "") +
						my_items_1 + " -> " + my_items_2 + D2JSP_UTIL_COLOR_WHITE +
						"][" +
						((all_items_1 != all_items_2) ? D2JSP_UTIL_COLOR_RED : "") +
						all_items_1 + " -> " + all_items_2 + D2JSP_UTIL_COLOR_WHITE +
						"][" + npc_items + "]");
					delay(1000);
				}
*/
			}
			print("Not in trade with " + npc_name + ", re-trying...");
			delay(1000);
			break;
		}
	}
}

function CountItemsOwned(parent_name)
{
	var item_count = 0;
	var this_item  = getUnit(4);
	var this_parent;

	if (parent_name == me.name) {
		LogHandle.writeLine("==================================================");
		LogHandle.writeLine("My Items");
	}

	if (this_item) {
		do {
 			this_parent = this_item.getParent();
			if (this_parent &&
				(this_parent.name.toLowerCase() == parent_name.toLowerCase())) {
				item_count++;
				if (parent_name == me.name)
					LogHandle.writeLine(item_count + "\t" +
						this_item.prefix + " " + this_item.name + " " + this_item.suffix);
			}
		} while (this_item && this_item.getNext());
	}

	if (parent_name == me.name) {
		LogHandle.writeLine("My Items Count = " + item_count);
		LogHandle.writeLine("==================================================");
	}

	return(item_count);
}

function CountItemsAll()
{
	var item_count = 0;
	var this_item  = getUnit(4);

	LogHandle.writeLine("==================================================");
	LogHandle.writeLine("All Items");

	if (this_item) {
		do {
			item_count++;
			LogHandle.writeLine(item_count + "\t" +
				this_item.prefix + " " + this_item.name + " " + this_item.suffix);
		} while (this_item && this_item.getNext());
	}

	LogHandle.writeLine("All Items Count = " + item_count);
	LogHandle.writeLine("==================================================");

	return(item_count);
}

function FindAnItem(parent_name, item_code)
{
	var this_item;
	var this_parent;

	this_item  = getUnit(4, item_code);
	if (this_item) {
		do {
 			this_parent = this_item.getParent();
			if (this_parent &&
				(this_parent.name.toLowerCase() == parent_name.toLowerCase()))
				return(this_item)
		} while (this_item && this_item.getNext());
	}

	return(null);
}


// Syadasti's d2jsp function library
// Copyright (c) 2002 by Mike Gogulski
function Dist2(x1, y1, x2, y2) {
	return Math.floor((x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2)); }

function Dist(x1, y1, x2, y2) {
	return Math.floor(Math.sqrt(Dist2(x1, y1, x2, y2))); }

