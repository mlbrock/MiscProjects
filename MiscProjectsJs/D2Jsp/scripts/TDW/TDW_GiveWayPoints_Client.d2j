include("TDW/_D2JSP_Utility.d2l");

includeonce("TDW/_D2JSP_Areas.d2l");
includeonce("TDW/_D2JSP_Modes.d2l");
includeonce("TDW/TDW_Move.d2l");

var TDW_GWPS_C_Log             = null;

var TDW_GWPS_C_MyWPAccess      = null;
var TDW_GWPS_C_NeededWPAccess  = null;

// If you want all your chars to have Anya's portal (as I do), you'll set
// the below variable to 'true'. Important because you can get the Nihlathak
// quest while standing in another area if partied with someone.
var D2J_GWPS_C_SkipHallsOfPain = true;

function main()
{
	var time_start;

	me.randommove   = true;
	me.autoparty    = true;
	me.autoquitonpk = true;

	TDW_GWPS_C_Log = new D2JSP_UTIL_Log("output/TDW_GiveWayPoints_Client." +
		D2JSP_UTIL_FORMAT_GetUserDottedStringFixed() + ".log",
		"TDW_GiveWayPoints_Client");

	print("Waiting 1 second for game load to complete...");
	delay(1000);

	time_start = new Date();
	TDW_GWPS_C_Log.logInfo("-----> Beginning Give Way Points Client run",
		time_start);

	if (me.version < 0.32)
		D2J_GWPS_S_ErrorExit("Sorry, program requires d2jsp core 0.32 or later.");

	if (!D2JSP_AREA_IsTown())
		Sc_GotoTown();
	if (!D2JSP_AREA_IsTown())
		D2J_GWPS_S_ErrorExit("Error, unable to return to town.");

	TDW_GWPS_C_MyWPAccess = TDW_MOVE_GetMyWayPointAccess();
	if (TDW_GWPS_C_MyWPAccess == null)
		D2J_GWPS_S_ErrorExit("Error, unable to get way point access data.");

	// Fix-up for the Halls of Pain waypoint if not wanted. We prevent trying to
	// get the waypoint by setting it to 'true'.
	if (D2J_GWPS_C_SkipHallsOfPain) {
		var hop_wp = D2JSP_AREA_AreaToWayPointIndices(
			D2JSP_AREA_HALLS_OF_DEATHS_CALLING);
		if (hop_wp)
			TDW_GWPS_C_MyWPAccess[hop_wp[0]][hop_wp[1]] = true;
	}

	// Fix-up for acts not yet reached with this char. We prevent trying to
	// get waypoints for those acts by setting all of the waypoint access flags
	// to 'true'.
	//
	// Slightly more efficient to start 'count_1' from '1'...
	for (var count_1 = 1; count_1 < TDW_GWPS_C_MyWPAccess.length; count_1++) {
		if (TDW_GWPS_C_MyWPAccess[count_1][0] != true) {
			for (var count_2 = 0; count_2 < TDW_GWPS_C_MyWPAccess[count_1].length;
				count_2++)
				TDW_GWPS_C_MyWPAccess[count_1][count_2] = true;
		}
	}

	// Now construct an array of desired waypoints. Each element is itself an
	// array which has the following elements:
	//	[0] = Act (numbered from zero)
	// [1] = Waypoint index of the area within that act (numbered from zero).
	// [2] = The actual area number.
	TDW_GWPS_C_NeededWPAccess = new Array();
	for (var count_1 = 0; count_1 < TDW_GWPS_C_MyWPAccess.length; count_1++) {
		for (var count_2 = 0; count_2 < TDW_GWPS_C_MyWPAccess[count_1].length;
			count_2++) {
			if (TDW_GWPS_C_MyWPAccess[count_1][count_2] != true)
				TDW_GWPS_C_NeededWPAccess.push([count_1, count_2,
					D2JSP_WayPoints[count_1][count_2]]);
		}
	}

	TDW_GWPS_C_Log.logInfo("Need a total of " +
		TDW_GWPS_C_NeededWPAccess.length + " waypoints in this difficulty.");

	if (TDW_GWPS_C_NeededWPAccess.length) {
		var old_log_screen_flag = TDW_GWPS_C_Log.screenOff();
		TDW_GWPS_C_Log.emitSep("=");
		TDW_GWPS_C_Log.logInfo("Waypoints Needed:");
		TDW_GWPS_C_Log.emitSep("-");
		for (var count_1 = 0; count_1 < TDW_GWPS_C_NeededWPAccess.length;
			count_1++)
			TDW_GWPS_C_Log.logInfo("Act " +
				(TDW_GWPS_C_NeededWPAccess[count_1][0] + 1) +
				", Waypoint " + (TDW_GWPS_C_NeededWPAccess[count_1][1] + 1) + ": " +
				D2JSP_UTIL_FORMAT_RJust(TDW_GWPS_C_NeededWPAccess[count_1][2], 3) +
				" " + D2JSP_AREA_AreaToName(TDW_GWPS_C_NeededWPAccess[count_1][2]));
		TDW_GWPS_C_Log.emitSep("=");
		if (old_log_screen_flag)
			TDW_GWPS_C_Log.screenOn();
		TDW_MOVE_COMPAT_TownMove(TDW_GWPS_C_NeededWPAccess[0][0] + 1, "portalspot");
		D2J_GWPS_C_GetWayPoints();
	}

	time_end = new Date();
	TDW_GWPS_C_Log.logInfo("-----> Ending Give Way Points Client run (" +
		((time_end.getTime() - time_start.getTime()) / 1000.0) + " seconds)",
		time_end);

	TDW_GWPS_C_Log.closeLog();

	print("Script completed normally.");
}

function D2J_GWPS_C_GetWayPoints()
{
	var town_area        = D2JSP_AREA_ROGUE_ENCAMPMENT;
	var last_area        = me.area;
	var last_act         = me.act;
	var portal_parent    = "";
	var last_portal_area = -1;
	var server_portal;
	var way_point;

	while (TDW_GWPS_C_NeededWPAccess.length) {
		var this_wp = TDW_GWPS_C_NeededWPAccess[0];
		var next_wp;
		var this_portal;
		var this_portal_parent;
		next_wp = (TDW_GWPS_C_NeededWPAccess.length > 1) ?
			TDW_GWPS_C_NeededWPAccess[1] : null;
		if (me.act != (this_wp[0] + 1))
			TDW_MOVE_COMPAT_TownMove(this_wp[0] + 1, "portalspot");
		D2JSP_UTIL_BNET_SaySafe("Looking for portal to " +
			D2JSP_AREA_AreaToName(this_wp[2]) + "(" + (this_wp[0] + 1) + ", " +
			(this_wp[1] + 1) + ")");
		var old_log_screen_flag = TDW_GWPS_C_Log.screenOff();
		TDW_GWPS_C_Log.logInfo("Looking for portal to " +
			D2JSP_AREA_AreaToName(this_wp[2]) +
			"(" + (this_wp[0] + 1) + ", " + (this_wp[1] + 1) + ")");
		if (old_log_screen_flag)
			TDW_GWPS_C_Log.screenOn();
		while (true) {
			this_portal = TDW_MOVE_LookForPortal(this_wp[2], "*", 10, 50, true);
			if (this_portal) {
				this_portal_parent = this_portal.getParent();
				TDW_MOVE_TakePortal(this_portal);
				if (me.area == this_wp[2])
					break;
			}
			D2JSP_UTIL_BNET_OverheadSafe("Looking for portal to " +
				D2JSP_AREA_AreaToName(this_wp[2]) +
				"(" + (this_wp[0] + 1) + ", " + (this_wp[1] + 1) + ")");
		}
		TDW_GWPS_C_Log.logInfo("Portaled to " + D2JSP_AREA_AreaToName());
		TDW_GWPS_C_Log.logInfo("Looking for waypoint in " +
			D2JSP_AREA_AreaToName());
		var way_point_obj;
		for (count_1 = 0; count_1 < 1000; count_1++) {
			way_point_obj = getUnit(D2JSP_UTIL_GETUNIT_OBJECT, "Waypoint");
			if (way_point_obj)
				break;
		}
		if (way_point_obj) {
			while (myDist(way_point_obj.x, way_point_obj.y) > 5)
				TDW_MOVE_MoveToObject(way_point_obj);
			TDW_GWPS_C_Log.logInfo("Interacting with waypoint in " +
				D2JSP_AREA_AreaToName());
			way_point_obj.interact()
			while (!getUIFlag(D2JSP_UTIL_UI_WAYPOINT))
				delay(50);
			TDW_GWPS_C_Log.logInfo("Now have waypoint in " +
				D2JSP_AREA_AreaToName());
			TDW_MOVE_WaypointCancel();
			while (getUIFlag(D2JSP_UTIL_UI_WAYPOINT))
				delay(50);
		}
		else
			TDW_GWPS_C_Log.logError("Couldn't find waypoint in " +
				D2JSP_AREA_AreaToName());
		if ((next_wp != null) && (this_wp[0] != next_wp[0])) {
			TDW_GWPS_C_Log.logInfo("Going to " +
				D2JSP_AREA_AreaToName(D2JSP_AREA_AreaToTown(next_wp[2])));
			if (!TDW_MOVE_WaypointUse(D2JSP_AREA_AreaToTown(next_wp[2]))) {
				TDW_GWPS_C_Log.logInfo("Now in " + D2JSP_AREA_AreaToName());
				TDW_MOVE_COMPAT_TownMove("portalspot");
			}
			else {
				TDW_GWPS_C_Log.logFatal("Unable to waypoint to " +
					D2JSP_AREA_AreaToName(D2JSP_AREA_AreaToTown(next_wp[2])));
				return(-1);
			}
		}
		else {
			TDW_GWPS_C_Log.logInfo("Returning to " +
				D2JSP_AREA_AreaToName(D2JSP_AREA_AreaToTown()));
			TDW_MOVE_LookForAndTakePortal(D2JSP_AREA_AreaToTown(),
				this_portal_parent, 10, 50, true);
			if (D2JSP_AREA_IsTown())
				TDW_GWPS_C_Log.logInfo("Back in " + D2JSP_AREA_AreaToName());
			else {
				TDW_GWPS_C_Log.logError("Unable to find the portal created by " +
					this_portal_parent + " to return to " +
					D2JSP_AREA_AreaToName(D2JSP_AREA_AreaToTown()) +
					" --- using the waypoint instead.");
				for (count_1 = 0; count_1 < 1000; count_1++) {
					way_point_obj = getUnit(D2JSP_UTIL_GETUNIT_OBJECT, "Waypoint");
					if (way_point_obj) {
						while (myDist(way_point_obj.x, way_point_obj.y) > 5)
							TDW_MOVE_MoveToObject(way_point_obj);
						break;
					}
					delay(10);
				}
				if (!TDW_MOVE_WaypointUse(D2JSP_AREA_AreaToTown())) {
					TDW_GWPS_C_Log.logInfo("Back in " + D2JSP_AREA_AreaToName());
					TDW_MOVE_COMPAT_TownMove("portalspot");
				}
				else {
					TDW_GWPS_C_Log.logFatal("Unable to waypoint to " +
						D2JSP_AREA_AreaToName(D2JSP_AREA_AreaToTown()));
					return(-1);
				}
			}
		}
		TDW_GWPS_C_NeededWPAccess.shift();
	}

}

function D2J_GWPS_C_ErrorExit(error_text)
{
	print(error_text);
	delay(500);
	print("Aborting...");
	delay(1000);
	return(-1);
}

// ////////////////////////////////////////////////////////////////////////////
function hostilemsgHandler()
{
	runGC();
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function partymsgHandler()
{
	runGC();
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function gamemsgHandler()
{
	runGC();
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
function keypressHandler()
{
	runGC();
}
// ////////////////////////////////////////////////////////////////////////////


