//	////////////////////////////////////////////////////////////////////////////
/*
#include "../../../MlbDev/include/mbtypes.h"
*/
//	////////////////////////////////////////////////////////////////////////////

//	////////////////////////////////////////////////////////////////////////////
#define SIMPLE_DEFINE	666

#define MACRO_DEFINE(x)	\
	{							\
		x += x;				\
		x *= 100;			\
	}
//	////////////////////////////////////////////////////////////////////////////

//	////////////////////////////////////////////////////////////////////////////
typedef unsigned int MyUInt;
//	////////////////////////////////////////////////////////////////////////////

//	////////////////////////////////////////////////////////////////////////////
int AFunction_001(int some_value);
int AFunction_002(int some_value = 42);
//	////////////////////////////////////////////////////////////////////////////

//	////////////////////////////////////////////////////////////////////////////
struct SomeClass {
	SomeClass(int int_value = 42, double double_value = 43.5)
		:int_value_(int_value)
		,double_value_(double_value)
	{
	}

	~SomeClass()
	{
		int_value_ ^= int_value_;
	}

	bool operator < (const SomeClass &other) const
	{
		return(int_value_ < other.int_value_);
	}

	const double &GetDoubleRef() const
	{
		return(double_value_);
	}

	double &GetDoubleRef()
	{
		return(double_value_);
	}

	int    int_value_;
	double double_value_;
};
//	////////////////////////////////////////////////////////////////////////////

//	////////////////////////////////////////////////////////////////////////////
struct DescendantClass : public SomeClass {
	DescendantClass(int int_value = 42, double double_value = 43.5)
		:SomeClass(int_value, double_value)
		,mo_data_(100.0)
	{
	}

	float GetMoData() const
	{
		return(GetDoubleRef() + mo_data_);
	}

	double mo_data_;
};
//	////////////////////////////////////////////////////////////////////////////

//	////////////////////////////////////////////////////////////////////////////
template <typename T, typename U> struct SomeWrapper {
	T datum_t_;
	U datum_u_;
};
//	////////////////////////////////////////////////////////////////////////////

